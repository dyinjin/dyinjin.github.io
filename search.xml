<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Onedrive共享</title>
    <url>/2022/01/12/Onedrive%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<h1 id="最简单用法：直接拖进去"><a href="#最简单用法：直接拖进去" class="headerlink" title="最简单用法：直接拖进去"></a>最简单用法：直接拖进去</h1><p>比如我就可以直接吧文件拷到<code>C:\Users\123\OneDrive\123</code>中即可等待自动传输同步。相当于OneDrive会把任何其目录下的内容上次云端<br>但是如果不想改文件位置，甚至文件太大不想拷一份呢（而且每次修改需要重新拷过来）</p>
<h1 id="着重记下指定任意文件夹进行备份"><a href="#着重记下指定任意文件夹进行备份" class="headerlink" title="着重记下指定任意文件夹进行备份"></a>着重记下指定任意文件夹进行备份</h1><p>这个不算是官方功能，但只需要运用映射文件夹的简单道理，即可实现一般所谓的文件夹备份（即修改本地文件夹内容后自动修改OneDrive上的内容）<br>即cmd（管理员）中运行<code>mklink /d  C:\Users\123\OneDrive\123  D:\456</code>进行文件夹映射（链接）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Onedrive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/09/hello-world/</url>
    <content><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl      <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public(hexo clean 的缩写)</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo d       <span class="comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br><span class="line">by 岛屿尽</span><br></pre></td></tr></table></figure>

<h2 id="网站没刷新过来时Shift-F5刷新试试"><a href="#网站没刷新过来时Shift-F5刷新试试" class="headerlink" title="网站没刷新过来时Shift+F5刷新试试"></a>网站没刷新过来时<kbd>Shift</kbd>+<kbd>F5</kbd>刷新试试</h2><h2 id="永久禁用数字签名"><a href="#永久禁用数字签名" class="headerlink" title="永久禁用数字签名"></a>永久禁用数字签名</h2><p>在管理员模式的cmd下<br><code>bcdedit.exe /set nointegritychecks on</code></p>
<h2 id="F2文件重命名"><a href="#F2文件重命名" class="headerlink" title="F2文件重命名"></a><kbd>F2</kbd>文件重命名</h2>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索技巧</title>
    <url>/2021/09/10/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="《》"><a href="#《》" class="headerlink" title="《》"></a>《》</h2><p>专有名词化</p>
<h2 id="“”"><a href="#“”" class="headerlink" title="“”"></a>“”</h2><p>强制字符匹配</p>
<h2 id><a href="#" class="headerlink" title="+ -"></a>+ -</h2><p>“+”“-”左面必须留空格，右面不留<br>强制包含<br>强制排除</p>
<h2 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h2><p>标题搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">“intitle:XXX”</span><br></pre></td></tr></table></figure>
<h2 id="site"><a href="#site" class="headerlink" title="site"></a>site</h2><p>域名内容搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">“site:XXX”</span><br></pre></td></tr></table></figure>
<h2 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h2><p>特定格式文件搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">“filetype:XXX”</span><br></pre></td></tr></table></figure>
<h2 id="filetype-1"><a href="#filetype-1" class="headerlink" title="filetype"></a>filetype</h2><p>特定格式文件搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">“filetype:XXX”</span><br></pre></td></tr></table></figure>
<h2 id="filetype-2"><a href="#filetype-2" class="headerlink" title="filetype"></a>filetype</h2><p>特定格式文件搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">“filetype:XXX”</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>python远古笔记</title>
    <url>/2021/09/20/python%E8%BF%9C%E5%8F%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>使用关键字<strong>def</strong>来告诉Python你要定义一个 函数，在这里，函数名为greet_user()，它不需要任何信息就能完成其工作，因此括号是空的（即便如此，括号也必不可少）。最后，定义以<strong>冒号</strong>结尾。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br></pre></td></tr></table></figure>
<p>可混合使用位置实参、关键字实参和默认值</p>
<ul>
<li>如使用 <strong>title()</strong> 将example转换为 首字母大写格式  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example.title():</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>有时候，需要让实参变成可选的，这样使用函数的人就只需在必要时才提供额外的信息。可 使用默认值来让实参变成可选的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">if</span> middle_name:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">return</span> full_name.title()</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<hr>
<p>向函数传递列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span>(<span class="params">names</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;向列表中的每位用户都发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">		msg = <span class="string">&quot;Hello, &quot;</span> + name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(msg)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;margot&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<hr>
<p>函数列表示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):</span> </span><br><span class="line"><span class="string">&quot;&quot;&quot;模拟打印每个设计，直到没有未打印的设计为止 打印每个设计后，都将其移到列表completed_models中&quot;&quot;&quot;</span> </span><br><span class="line">	<span class="keyword">while</span> unprinted_designs: </span><br><span class="line">		current_design = unprinted_designs.pop()</span><br><span class="line">		<span class="comment">#模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;Printing model: &quot;</span> + current_design)</span><br><span class="line">	completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span>(<span class="params">completed_models</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;显示打印好的所有模型&quot;&quot;&quot;</span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>) </span><br><span class="line">	<span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">		<span class="built_in">print</span>(completed_model)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>] </span><br><span class="line">completed_models = [] </span><br><span class="line"></span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>禁止函数修改列表<br>要将列表的副本传递给函数，可以像下面这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure>
<ul>
<li>切片表示法[:]创建列表的副本</li>
</ul>
<hr>
<p>有时候，你预先不知道函数需要接受多少个实参，好在Python允许函数从调用语句中收集任意数量的实参<br>形参名 <strong>*toppings</strong> 中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封 装到这个元组中</p>
<p>使用任意数量的关键字实参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span>(<span class="params">first, last, **user_info</span>):</span></span><br><span class="line">	profile = &#123;&#125;</span><br><span class="line">	……</span><br><span class="line">	<span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">		profile[key] = value</span><br><span class="line">	<span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>, location=<span class="string">&#x27;princeton&#x27;</span>, field=<span class="string">&#x27;physics&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>形参 <strong>**user_info</strong> 中的两个星号让Python创建一个名为user_info的空字典，并将收到的所 有名称—值对都封装到这个字典中。在这个函数中，可以像访问其他字典那样访问user_info中的 名称—值对</p>
<hr>
<p>导入整个模块<br>要让函数是可导入的，得先创建模块<br>pizza.py（模块名是文件名）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">size, *toppings</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) +<span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们在pizza.py所在的目录中创建另一个名为making_pizzas.py的文件，这个文件导入刚创建的模块，再调用make_pizza()两次：<br>making_pizzas.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line">	pizza.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">	pizza.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p>Python读取这个文件时，代码行<strong>import pizza</strong>让Python打开文件pizza.py，并将其中的所有函数都复制到这个程序中<br>要调用被导入的模块中的函数，可指定导入的模块的名称pizza和函数名make_pizza()，并用句点分隔它们</p>
<p>你还可以导入模块中的特定函数，这种导入方法的语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br></pre></td></tr></table></figure>
<p>或使用 as 给函数/模块指定别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</span><br></pre></td></tr></table></figure>
<p>导入模块中的所有函数<br>使用星号（*）运算符可让Python导入模块中的所有函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ol>
<li>   在列表末尾添加元素：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br></pre></td></tr></table></figure>
方法append()将元素’ducati’添加到了列表末尾</li>
<li>   在列表中插入元素：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>)	</span><br></pre></td></tr></table></figure>
使用方法insert()可在列表的任何位置添加新元素这种操作将列表中既有的每个元素都右移一个位置</li>
<li>   使用del语句删除元素：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>] </span><br></pre></td></tr></table></figure>
已知位置[0]</li>
<li>   使用方法pop()删除元素：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles.pop()</span><br></pre></td></tr></table></figure>
方法pop()可删除列表末尾的元素，并让你能够接着使用它。实际上，你可以使用pop()来删除列表中任何位置的元素，只需在括号中指定要删除的元素 的索引即可：motorcycles.pop(0)</li>
<li>   根据值删除元素    如果你只知道要删除的元素的值，可使用方法remove()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br></pre></td></tr></table></figure>
让Python确定’ducati’出现在列表的什么地方，并将该元素删除，方法remove()只删除第一个指定的值。</li>
<li>   使用方法 sort()对列表进行永久性排序<br>方法sort()永久性地修改了列表元素的排列顺序按字母顺序。你还可以按与字母顺序相反的顺序排列列表元素，只需向sort()方法传递参数 reverse=True。XXX.sort(reverse=True)</li>
<li>   使用函数 sorted()对列表进行临时排序<br>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。<br>函数 sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>) <span class="built_in">print</span>(cars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>) <span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>) <span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></li>
<li>   倒着打印列表可使用方法reverse()。<br>注意，reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序</li>
<li>   确定列表的长度<br>使用函数len()可快速获悉列表的长度</li>
<li>   当需要访问最后一个列表元素时，都可使用索引-1。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(motorcycles[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li>
<li>   遍历整个列表<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">	<span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure>
第一行代码让Python获取列表magicians中的第一个值（’alice’），并将其存储到变量magician 中。</li>
<li>   使用函数 range()使用函数 range()来打印一系列的数字：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>): </span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure>
上述代码好像应该打印数字1~5，但实际上它不会打印数字5<br>range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出不包含第二个值（这里为5）。</li>
<li>   使用 range()创建数字列表<br>使用函数range()时，还可指定步长。<br>例如，下面的代码打印1~10内的偶数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>)) </span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br></pre></td></tr></table></figure>
在这个示例中，函数range()从2开始数，然后不断地加2，直到达到或超过终值因此输出如下[2, 4, 6, 8, 10]</li>
<li>   在Python中，两个星号（**）表示乘方运算。下面的代码演示了 如何将前10个整数的平方加入到一个列表中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [] </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>): </span><br><span class="line">	square = value**<span class="number">2</span> </span><br><span class="line">squares.append(square) </span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></li>
<li>   对数字列表执行简单的统计计算<br>你可以轻松地找出数字列表的最大值、 最小值和总和：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(digits) </span><br><span class="line"><span class="number">0</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(digits) </span><br><span class="line"><span class="number">9</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(digits)</span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure></li>
<li>   列表解析<br>前面介绍的生成列表squares的方式包含三四行代码，而列表解析让你只需编写一行代码就 能生成这样的列表。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></li>
<li>   切片使用列表的一部分<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) </span><br></pre></td></tr></table></figure>
代码打印该列表的一个切片，其中只包含三名队员。输出也是一个列表，其中包含前三名队员<br>你可以生成列表的任何子集，例如如果你要提取列表的第2~4个元素，可将起始索引指定 为1，并将终止索引指定为4<br>print(players[1:4])</li>
</ol>
<p>没有指定起始索引，Python从列表开头开始提取<br>print(players[:4])</p>
<p>Python将返回从第3个元素到列表末尾的所有元素<br>print(players[2:])</p>
<p>打印最后三名队员的名字，即便队员名单的长度发生变化，也依然如此<br>print(players[-3:])<br>18.    遍历切片<br>可在for循环中使用切片<br>for player in players[:3]<br>代码没有遍历整个队员列表，而只遍历前三名队员<br>19.    复制列表<br>你经常需要根据既有列表创建全新的列表。下面来介绍复制列表的工作原理，以及复制列表 可提供极大帮助的一种情形。 要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（[:]）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">friend_foods = my_foods[:] <span class="comment">#正确</span></span><br><span class="line">friend_foods = my_foods <span class="comment">#错误</span></span><br></pre></td></tr></table></figure>
<ol start="20">
<li>   定义元组<br>元组看起来犹如列表，但使用<strong>圆括号</strong>而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。 例如如果有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中，从而确保它们是不能修改的：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li>
<li>   虽然不能修改元组的元素，但可以给存储元组的变量赋值。因此，如果要修改前述矩形的尺寸，可重新定义整个元组：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line">	<span class="built_in">print</span>(dimension)</span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line">	<span class="built_in">print</span>(dimension) </span><br></pre></td></tr></table></figure>
我们首先定义了一个元组，并将其存储的尺寸打印了出来；接下来，将一个新元组 存储到变量dimensions中；然后，打印新的尺寸。这次，Python不会报告任何错 误，因为给元组变量赋值是合法的：</li>
<li>   python中创建二维列表<br>创建方法：</li>
</ol>
<ul>
<li>直接创建：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
输出结果：[[1, 0, 0], [0, 0, 0], [0, 0, 0]]<br>2、列表生成法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4列 2行</span></span><br><span class="line">a=[[<span class="number">0</span>]*<span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
输出结果：[[0, 0, 0, 0], [0, 0, 0, 0]]<br>3、使用numpy库<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">a=numpy.zeros((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
输出结果：<br>[[0. 0. 0. 0.]<br>[0. 0. 0. 0.]]</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft kubejs</title>
    <url>/2021/11/15/MC/minecraft%20kubejs/</url>
    <content><![CDATA[<p>kubejs系模组<code>【前置41】【辅助】【前置19】或【前置2】(添加合成表矿辞统一)kubejs-forge-1605.3.18-build.157.jar</code><br>此 mod 允许您使用 JavaScript 语言创建脚本来管理服务器、添加新的方块和物品、更改配方、为任务模组添加自定义处理程序、更改世界生成器等！‎</p>
<h1 id="kubejs操作指南"><a href="#kubejs操作指南" class="headerlink" title="kubejs操作指南"></a>kubejs操作指南</h1><p>首先<code>/kubejs hand</code>获取手持物品信息<br>单击信息即可复制到剪切板</p>
<h2 id="初始物品"><a href="#初始物品" class="headerlink" title="初始物品"></a>初始物品</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Listen to player login event</span></span><br><span class="line">onEvent(<span class="string">&#x27;player.logged_in&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Check if player doesn&#x27;t have &quot;starting_items&quot; stage yet</span></span><br><span class="line">  <span class="keyword">if</span> (!event.player.stages.has(<span class="string">&#x27;starting_items&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// Add the stage</span></span><br><span class="line">    event.player.stages.add(<span class="string">&#x27;starting_items&#x27;</span>)</span><br><span class="line">    <span class="comment">// Give some items to player</span></span><br><span class="line">    event.player.give(<span class="string">&#x27;minecraft:stone_sword&#x27;</span>)</span><br><span class="line">    event.player.give(Item.of(<span class="string">&#x27;minecraft:stone_pickaxe&#x27;</span>, <span class="string">&quot;&#123;Damage: 10&#125;&quot;</span>))</span><br><span class="line">    event.player.give(<span class="string">&#x27;30x minecraft:apple&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>简简单单不用多说</p>
<h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p><code>kubejs\startup_scripts</code>下</p>
<h3 id="湖"><a href="#湖" class="headerlink" title="湖"></a>湖</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onEvent(<span class="string">&#x27;worldgen.remove&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">	event.addLake(<span class="function"><span class="params">lake</span> =&gt;</span> &#123; <span class="comment">// Create new lake feature</span></span><br><span class="line">		lake.block = <span class="string">&#x27;quark:elder_sea_lantern&#x27;</span> <span class="comment">// Block ID (Use [] syntax for properties)</span></span><br><span class="line">		lake.chance = <span class="number">1</span> <span class="comment">// Spawns every ~3 chunks</span></span><br><span class="line">	  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="矿石"><a href="#矿石" class="headerlink" title="矿石"></a>矿石</h3><p>移除矿石</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onEvent(<span class="string">&#x27;worldgen.remove&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.removeOres(<span class="function"><span class="params">ores</span> =&gt;</span> &#123;<span class="comment">//移除矿石</span></span><br><span class="line">      ores.blocks = [ <span class="string">&#x27;minecraft:coal_ore&#x27;</span>, <span class="string">&#x27;minecraft:iron_ore&#x27;</span> ] <span class="comment">// 移除铁矿和煤矿</span></span><br><span class="line">      ores.biomes.values = [ <span class="string">&#x27;minecraft:plains&#x27;</span> ] <span class="comment">// 限制该选项仅在平原生效</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>添加矿石<br><del>不知道什么原因，在我的整合包中几乎没有作用<br>此段语法有问题?</del></p>
<p>blacklist = false代表开启黑名单模式，即以下名单为<strong>不可</strong>生成名单<br>blacklist = true代表开启白名单模式，即以下名单为<strong>可</strong>生成名单</p>
<p><strong>官方维基与中文翻译都没说清楚(坑我老半天)！！！</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onEvent(<span class="string">&#x27;worldgen.add&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">    event.addOre(<span class="function"><span class="params">ore</span> =&gt;</span> &#123; <span class="comment">//自定义矿石</span></span><br><span class="line">      ore.block = <span class="string">&#x27;minecraft:iron_ore&#x27;</span>,<span class="string">&#x27;darkerdepths:silver_ore&#x27;</span>,<span class="string">&#x27;minecraft:gold_ore&#x27;</span></span><br><span class="line">      ore.spawnsIn.blacklist = <span class="literal">false</span></span><br><span class="line">      ore.spawnsIn.values = [</span><br><span class="line">        <span class="string">&#x27;#minecraft:base_stone_overworld&#x27;</span> <span class="comment">// 默认的生成方式: 用于决定作为地下矿石生成时，该矿石能取代哪些方块。你可以在https://wiki.biligame.com/mc/%E6%A0%87%E7%AD%BE查看更多信息。</span></span><br><span class="line">      ]</span><br><span class="line">      </span><br><span class="line">      ore.biomes.blacklist = flase <span class="comment">// true代表一下名单为黑名单 flase代表一下名单为白名单</span></span><br><span class="line">      ore.biomes.values = [ <span class="comment">//一下群系类别(也可以是id)在flase的情况下为可生成名单</span></span><br><span class="line">        <span class="string">&#x27;#extreme_hills&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#taiga&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#savanna&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#forest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#mesa&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#desert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#icy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#jungle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#plains&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#ocean&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#swamp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#river&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#mushroom&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#beach&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#none&#x27;</span></span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">      ore.clusterMinSize = <span class="number">3</span> <span class="comment">// 每矿簇最少的矿石数量</span></span><br><span class="line">      ore.clusterMaxSize = <span class="number">7</span> <span class="comment">// 每矿簇最多的矿石数量</span></span><br><span class="line">      ore.clusterCount = <span class="number">15</span> <span class="comment">// 每个区块矿石数量</span></span><br><span class="line">      ore.minHeight = <span class="number">60</span> <span class="comment">// 最小Y值</span></span><br><span class="line">      ore.maxHeight = <span class="number">128</span> <span class="comment">// 最大Y值</span></span><br><span class="line">      ore.squared = <span class="literal">true</span> <span class="comment">// 对X和Z值添加0~16的随机值. 推荐设置为 true</span></span><br><span class="line">      <span class="comment">// ore.chance = 4 // 每大约4个区块生成一次. 对于稀有的矿石来说, 你可以将它和 clusterCount = 1 一同使用</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="nbt标签编辑"><a href="#nbt标签编辑" class="headerlink" title="nbt标签编辑"></a>nbt标签编辑</h2><p>格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onEvent(<span class="string">&#x27;item.tags&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// Get the #forge:cobblestone tag collection and add Diamond Ore to it</span></span><br><span class="line">	event.get(<span class="string">&#x27;forge:cobblestone&#x27;</span>).add(<span class="string">&#x27;minecraft:diamond_ore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get the #forge:cobblestone tag collection and remove Mossy Cobblestone from it</span></span><br><span class="line">	event.get(<span class="string">&#x27;forge:cobblestone&#x27;</span>).remove(<span class="string">&#x27;minecraft:mossy_cobblestone&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>注意前面的标签记号不要<code>#</code></p>
<ul>
<li>添加<br><code>event.get(&#39;forge:cobblestone&#39;).add(&#39;minecraft:diamond_ore&#39;)</code></li>
<li>移除<br><code>event.get(&#39;forge:cobblestone&#39;).remove(&#39;minecraft:mossy_cobblestone&#39;)</code></li>
</ul>
<h2 id="工作台配方"><a href="#工作台配方" class="headerlink" title="工作台配方"></a>工作台配方</h2><p>可<code>kubejs\server_scripts</code>下<br>首先格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onEvent(<span class="string">&#x27;recipes&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// Change recipes here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>无序<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.shapeless(<span class="string">&#x27;minecraft:carved_pumpkin&#x27;</span>, [<span class="string">&#x27;minecraft:jack_o_lantern&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li>数量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.shapeless(<span class="string">&#x27;2x minecraft:carved_pumpkin&#x27;</span>, [<span class="string">&#x27;minecraft:jack_o_lantern&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li>有序<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.shaped(<span class="string">&#x27;minecraft:iron_leggings&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;SXS&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X X&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Y Y&#x27;</span></span><br><span class="line">      ], &#123;</span><br><span class="line">        <span class="attr">S</span>: <span class="string">&#x27;minecraft:iron_ingot&#x27;</span>,</span><br><span class="line">        <span class="attr">X</span>: <span class="string">&#x27;minecraft:redstone&#x27;</span>,</span><br><span class="line">        <span class="attr">Y</span>: <span class="string">&#x27;minecraft:gold_ingot&#x27;</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li>
<li>标签物品<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">event.shaped(<span class="string">&#x27;minecraft:book&#x27;</span>, [</span><br><span class="line">  <span class="string">&#x27;CCC&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;WGL&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;CCC&#x27;</span></span><br><span class="line">], &#123;</span><br><span class="line">  <span class="attr">C</span>: <span class="string">&#x27;#forge:cobblestone&#x27;</span>,</span><br><span class="line">  <span class="attr">L</span>: Item.of(<span class="string">&#x27;minecraft:enchanted_book&#x27;</span>, &#123;<span class="attr">StoredEnchantments</span>:[&#123;<span class="attr">lvl</span>:<span class="number">1</span>,<span class="attr">id</span>:<span class="string">&quot;minecraft:sweeping&quot;</span>&#125;]&#125;),</span><br><span class="line">  <span class="comment">// 对于附魔来说，你还可以将其简写成如下形式：</span></span><br><span class="line">  <span class="attr">W</span>: Item.of(<span class="string">&#x27;minecraft:enchanted_book&#x27;</span>).enchant(<span class="string">&#x27;minecraft:respiration&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="attr">G</span>: <span class="string">&#x27;#forge:glass&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="某些带json文件-其实是大部分-的模组的直接修改"><a href="#某些带json文件-其实是大部分-的模组的直接修改" class="headerlink" title="某些带json文件(其实是大部分)的模组的直接修改"></a>某些带json文件(其实是大部分)的模组的直接修改</h1><h2 id="但强烈不建议直接修改别人打包好的jar，很不尊重作者"><a href="#但强烈不建议直接修改别人打包好的jar，很不尊重作者" class="headerlink" title="但强烈不建议直接修改别人打包好的jar，很不尊重作者"></a>但强烈不建议直接修改别人打包好的jar，很不尊重作者</h2><p>也顺带提一下大部分模组的文件结构：</p>
<ul>
<li><code>assets</code>资源文件，不是简单的png材质，还附带模型json及各种UI排布json等(某种程度上可视为css)，语言文件也在此</li>
<li><code>com</code>包含基本的Java文件经过编译后的class，不可修改(当然可反编译再自己编译一遍)</li>
<li><code>META-INF</code>一些标志性文件例：mods.toml及用于描述模组信息，如版本信息，依赖信息等</li>
<li><code>data</code>此文件为一些逻辑性的配置json，并提供兼容性接口(其下的minecraft、forge文件夹多用于配置兼容标签)，推测kubejs就是某种程度上的修改和复制此json</li>
</ul>
<p>如果实在想直接修改一些掉落物情况可参考：<br><code>【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar</code>对于此模组的铂矿生成过多、不可配置的问题，而直接对<code>jar</code>文件中<code>【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar\data\wyrmroost\loot_tables\blocks\</code>下的<code>platinum_ore.json</code>进行编辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;minecraft:block&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pools&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;rolls&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;entries&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;minecraft:item&quot;</span>,</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;wyrmroost:platinum_ore&quot;</span><span class="comment">//修改此处直接修改了挖掘掉落物</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;conditions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;condition&quot;</span>: <span class="string">&quot;minecraft:survives_explosion&quot;</span><span class="comment">//意思说情况只发生在生存模式下</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="此方案最终弃用、采用如上kubejs的方法"><a href="#此方案最终弃用、采用如上kubejs的方法" class="headerlink" title="此方案最终弃用、采用如上kubejs的方法"></a>此方案最终弃用、采用如上kubejs的方法</h2>]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft forge maker#0</title>
    <url>/2021/11/08/MC/minecraftforge/</url>
    <content><![CDATA[<h1 id="MinecraftForgeMDK安装注意"><a href="#MinecraftForgeMDK安装注意" class="headerlink" title="MinecraftForgeMDK安装注意"></a>MinecraftForgeMDK安装注意</h1><p>就是跑gradlew.bat tasks<br>我的版本：<br>MDK：forge-1.16.5-36.2.8-mdk.zip<br>JDK：jdk1.8.0_311<br>(jdk17测试报错)</p>
<h2 id="JAVA-HOME的奇葩要求"><a href="#JAVA-HOME的奇葩要求" class="headerlink" title="JAVA_HOME的奇葩要求"></a>JAVA_HOME的奇葩要求</h2><ul>
<li>不能有其它路径（建议先剪切保存，安装后回改）</li>
<li>最后不能有分号</li>
<li>不能下到bin目录,即：<code>C:\Program Files\Java\jdk1.8.0_311</code></li>
<li>然后日常的PATH为%JAVA_HOME%/bin</li>
<li>最后CLASSPATH直接<code>.</code>缺省<br>否则：<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636313580367.png" alt="enter description here"><h2 id="gradlew命令变更"><a href="#gradlew命令变更" class="headerlink" title="gradlew命令变更"></a>gradlew命令变更</h2>相对于土球球教程<code>gradlew.bat setupDecompWorkspace</code>变更为<code>gradlew.bat tasks</code></li>
</ul>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
        <tag>forge</tag>
      </tags>
  </entry>
  <entry>
    <title>packmenu模组使用</title>
    <url>/2021/11/06/MC/packmenu%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="官方下载"><a href="#官方下载" class="headerlink" title="官方下载"></a><a href="https://www.curseforge.com/minecraft/mc-mods/packmenu">官方下载</a></h1><h1 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h1><h2 id="About"><a href="#About" class="headerlink" title="About"></a><strong>About</strong></h2><p>Pack Menu allows the user to change the way the Minecraft Main Menu looks.  It was developed as a replacement to Custom Main Menu in Minecraft 1.14+.</p>
<p>Pack Menu has the following features:</p>
<ul>
<li>  Changing the background image of the Main Menu</li>
<li>  Rearranging or disabling any menu elements, such as the title image, splash text, and the panorama fade.</li>
<li>  Creation of custom buttons, and through that, the ability to completely overhaul the buttons on the menu. Buttons are created using JSON files, with the defaults shipped with the provided resource pack.</li>
<li>Display of a custom logo separate from the background. This logo can have splash text attached to it, and can draw from a custom splash text list instead of the defaults.<br>  Creation of a custom background slideshow, using any number of images.</li>
<li>  Creation of a custom panorama by overriding the vanilla panorama assets.</li>
</ul>
<p>PackMenu uses a resource pack to load its textures.  This resource pack is located at <gamedir>/packmenu/resources.zip</gamedir>, or at <gamedir>/packmenu/resources</gamedir> (as a folder) if enabled in the config.</p>
<p>This means you can also use PackMenu to load any assets that your modpack may require for any reason.</p>
<p>Please note that when asked for a “Resource Path”, packmenu requires them in the vanilla resource format. Do not put absolute paths into these areas, and do not attempt to access assets that are not loaded as part of a resource pack.</p>
<p>For reference, this is how resource transformation works:  The resource path <strong>minecraft:textures/gui/background.png</strong> translates to (in the resource zip) <strong>assets\minecraft\textures\gui\background.png</strong>.</p>
<p>Finally, PackMenu does not re-ship any vanilla assets.  This means that you will not find any vanilla assets inside the defaultly generated packmenu zip.  A list of common resource paths is provided below.</p>
<p>Important Resource Paths (for overriding things):</p>
<ul>
<li><p>  The location of the Custom Background Image is <strong>packmenu:textures/gui/background.png</strong>_.  _This image should be 1920x1080.</p>
</li>
<li><p>  Buttons, by default, use the texture sheet <strong>minecraft:textures/gui/widgets.png</strong>.</p>
</li>
<li><p>  However, this is used by non-main menu buttons, so overriding it is not advisable.  Instead, you can point buttons at packmenu’s copy of that file: <strong>packmenu:textures/gui/widgets.png</strong>and override that one.</p>
</li>
<li><p>  Buttons are loaded from <strong>packmenu:buttons/</strong>. Any json files in this directory will be treated as if it were a button (similar to advancements or recipes, but in this directory). More information about buttons, including the JSON specification, is available on <a href="https://github.com/Shadows-of-Fire/PackMenu/wiki/PackMenu-Button-Schema">the wiki</a>.</p>
</li>
<li><p>  The path of the Minecraft Title Texture is <strong>minecraft:textures/gui/title/minecraft.png</strong></p>
</li>
<li><p>  The path of the Java Edition Texture is <strong>minecraft:textures/gui/title/edition.png</strong></p>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>本身是模组，在运行一次后会创建<code>packmenu</code>目录，在<code>assets</code>中创建文件，建议基于原版或成熟材质包修改</p>
<h2 id="简单的替换"><a href="#简单的替换" class="headerlink" title="简单的替换"></a>简单的替换</h2><p>在原版<code>\resources\assets\minecraft\textures\gui\title</code>目录下，有<code>mojangstudios.png</code>标志文件<br>若想修改，则在<code>packmenu\resources\assets\minecraft\textures\gui\title</code>目录下，存放修改后同名图片文件即可</p>
<h2 id="按钮添加"><a href="#按钮添加" class="headerlink" title="按钮添加"></a>按钮添加</h2><p><code>packmenu\resources\assets\minecraft\buttons</code>目录下，编辑json文件，如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;x&quot;</span>: <span class="number">-50</span>,</span><br><span class="line">	<span class="attr">&quot;y&quot;</span>: <span class="number">-25</span>,</span><br><span class="line">	<span class="attr">&quot;width&quot;</span>: <span class="number">120</span>,</span><br><span class="line">	<span class="attr">&quot;height&quot;</span>: <span class="number">30</span>,</span><br><span class="line">	<span class="attr">&quot;langKey&quot;</span>: <span class="string">&quot;menu.singleplayer&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;action&quot;</span>: <span class="string">&quot;OPEN_GUI&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;data&quot;</span>: <span class="string">&quot;SINGLEPLAYER&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;u&quot;</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">&quot;v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">&quot;hoverU&quot;</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">&quot;hoverV&quot;</span>: <span class="number">30</span>,</span><br><span class="line">	<span class="attr">&quot;texWidth&quot;</span>: <span class="number">120</span>,</span><br><span class="line">	<span class="attr">&quot;texHeight&quot;</span>: <span class="number">60</span>,</span><br><span class="line">	<span class="attr">&quot;texture&quot;</span>: <span class="string">&quot;textures/singleplayer.png&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;fontColor&quot;</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">&quot;hoverFontColor&quot;</span>: <span class="number">1140326</span>,</span><br><span class="line">	<span class="attr">&quot;dropShadow&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">&quot;textXOffset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">	<span class="attr">&quot;textYOffset&quot;</span>: <span class="number">-6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>packmenu\resources\assets\minecraft\textures</code>目录下，存放按钮png即可(注意像素位置设置)</p>
<h2 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h2><p>部分设置参照自动生成文件<br>如：<br>修改背景文件在    <code>packmenu\resources\assets\packmenu\textures\gui</code>目录下的<code>background.png</code>中</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS简单速成</title>
    <url>/2021/10/14/%E5%89%8D%E7%AB%AF/CSS%E7%AE%80%E5%8D%95%E9%80%9F%E6%88%90/</url>
    <content><![CDATA[<p><a href="https://www.w3school.com.cn/css/css_jianjie.asp">w3school教程</a></p>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>简单来说就是独立的</p>
<h2 id="什么是-CSS？"><a href="#什么是-CSS？" class="headerlink" title="什么是 CSS？"></a>什么是 CSS？</h2><ul>
<li> CSS 指的是层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li>
<li> CSS 描述了<em>如何在屏幕、纸张或其他媒体上显示 HTML 元素</em></li>
<li> CSS <em>节省了大量工作</em>。它可以同时控制多张网页的布局</li>
<li> 外部样式表存储在 <em>CSS 文件</em> 中<h2 id="CSS-解决了一个大问题"><a href="#CSS-解决了一个大问题" class="headerlink" title="CSS 解决了一个大问题"></a>CSS 解决了一个大问题</h2>HTML 从未打算包含用于格式化网页的标签！<br>创建 HTML 的目的是_描述网页_的内容<br>将 &lt;font&gt; 之类的标签和 color 属性添加到 HTML 3.2 规范后，Web 开发人员的噩梦开始了。大型网站的开发将字体和颜色信息添加到每个页面中，这演变为一个漫长而昂贵的过程。<br>为了解决这个问题，万维网联盟（W3C）创建了 CSS。<br>CSS 从 HTML 页面中删除了样式格式！<h2 id="CSS-节省了大量工作！"><a href="#CSS-节省了大量工作！" class="headerlink" title="CSS 节省了大量工作！"></a>CSS 节省了大量工作！</h2>样式定义通常保存在外部 .css 文件中。<br>通过使用外部样式表文件，您只需更改一个文件即可更改整个网站的外观！</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>CSS 规则集（rule-set）由<strong>选择器</strong>和<strong>声明块</strong>组成：<br><img src="https://www.w3school.com.cn/i/css/selector.gif" alt="CSS 选择器"><br>选择器指向您需要设置样式的 HTML 元素。<br>每条声明都包含一个 CSS 属性名称和一个值，以<code>:</code>冒号分隔。<br>多条 CSS 声明用<code>;</code>分号分隔，声明块用<code>&#123;&#125;</code>花括号括起来。<br>例：(在此例中，所有 &lt;p&gt; 元素都将居中对齐，并带有红色文本颜色：)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>p 是 CSS 中的_选择器_（它指向要设置样式的 HTML 元素：&lt;p&gt;）。</li>
<li>color 是属性，red 是属性值</li>
<li>text-align 是属性，center 是属性值<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2>位于 &lt;style&gt; 元素内的 CSS 注释，以 /* 开始，以 */ 结束<h1 id="在HTML中使用"><a href="#在HTML中使用" class="headerlink" title="在HTML中使用"></a>在HTML中使用</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2>选择器用于“查找”（或选取）要设置样式的 HTML 元素。<table>
<thead>
<tr>
<th>选择器</th>
<th>例子</th>
<th>例子描述</th>
<th>概述</th>
</tr>
</thead>
<tbody><tr>
<td>.class</td>
<td>.intro</td>
<td>选取所有 class=”intro” 的元素。</td>
<td>类选择器选择有特定 class 属性的 HTML 元素。</td>
</tr>
<tr>
<td>#<em>id</em></td>
<td>#firstname</td>
<td>选取 id=”firstname” 的那个元素。</td>
<td>id 选择器使用 HTML 元素的 id 属性来选择特定元素。</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>选取所有元素。</td>
<td>通用选择器（*）选择页面上的所有的 HTML 元素。</td>
</tr>
<tr>
<td>element</td>
<td>p</td>
<td>选取所有 &lt;p&gt; 元素。</td>
<td>元素选择器根据元素名称来选择 HTML 元素。</td>
</tr>
<tr>
<td>element,element,..</td>
<td>div, p</td>
<td>选取所有 &lt;div&gt; 元素和所有 &lt;p&gt; 元素。</td>
<td></td>
</tr>
</tbody></table>
<h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 &lt;style&gt; 标签定义内部样式表。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2>当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML简单速成</title>
    <url>/2021/10/12/%E5%89%8D%E7%AB%AF/HTML%E9%80%9F%E6%88%90/</url>
    <content><![CDATA[<p><a href="https://www.w3school.com.cn/">w3school教程</a></p>
<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><ul>
<li>  HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</li>
<li>HTML 不是一种编程语言，而是一种<em>标记语言</em> (markup language)<ul>
<li>HTML 指的是超文本标记语言 (<b>H</b>yper
  <span>&nbsp;</span><b>T</b>ext
  <span>&nbsp;</span><b>M</b>arkup
  <span>&nbsp;</span><b>L</b>anguage)</li>
<li>HTML 不是一种编程语言，而是一种
  <em>标记语言</em>
  <span>&nbsp;</span>(markup language)</li>
</ul></li>
</ul>
<p>以上MD写法</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   HTML 指的是超文本标记语言 (<span class="strong">**H**</span>yper <span class="strong">**T**</span>ext <span class="strong">**M**</span>arkup <span class="strong">**L**</span>anguage)</span><br><span class="line"><span class="bullet">*</span>   HTML 不是一种编程语言，而是一种<span class="emphasis">*标记语言*</span> (markup language)</span><br></pre></td></tr></table></figure>
<p> 以上HTML写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML 指的是超文本标记语言 (<span class="tag">&lt;<span class="name">b</span>&gt;</span>H<span class="tag">&lt;/<span class="name">b</span>&gt;</span>yper</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>T<span class="tag">&lt;/<span class="name">b</span>&gt;</span>ext</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>M<span class="tag">&lt;/<span class="name">b</span>&gt;</span>arkup</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>L<span class="tag">&lt;/<span class="name">b</span>&gt;</span>anguage)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML 不是一种编程语言，而是一种</span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>标记语言<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>(markup language)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>&lt;html&gt; 与 &lt;/html&gt; 之间的文本描述网页</li>
<li>&lt;body&gt; 与 &lt;/body&gt; 之间的文本是可见的页面内容</li>
<li>&lt;h1&gt; 与 &lt;/h1&gt; 之间的文本被显示为标题(h后面的数字表示第几级标签)</li>
<li>&lt;p&gt; 与 &lt;/p&gt; 之间的文本被显示为段落，浏览器会自动地在段落的前后添加空行。（&lt;p&gt; 是块级元素）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://dyinjin.github.io/&quot;</span>&gt;</span>This is my link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>HTML 链接是通过 &lt;a&gt; 标签进行定义的。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;test.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;104&quot;</span> <span class="attr">height</span>=<span class="string">&quot;142&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>HTML 图像是通过 &lt;img&gt; 标签进行定义的(同级目录开始)</li>
</ul>
<p>一般的元素标签都应该有头有尾，但也有本身不需要中间内容的空标签如：&lt;br&gt; 标签定义换行(可用在同段落中换行)，则一般建议写为&lt;br /&gt;（还有&lt;hr /&gt; 标签在 HTML 页面中创建水平线。）</p>
<hr>
HTML 标签对大小写不敏感，而万维网联盟（W3C）在 HTML 4 中推荐使用小写，而在未来 (X)HTML 版本中强制使用小写。

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是一段注释--&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样类似（css中可使用）<br>/* 这是一段注释 */</p>
<p>当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p>
<h3 id="h1标题标签的注意"><a href="#h1标题标签的注意" class="headerlink" title="h1标题标签的注意"></a>h1标题标签的注意</h3><p>请确保将 HTML heading 标签只用于标题。不要仅仅是为了产生粗体或大号的文本而使用标题。<br><strong>搜索引擎使用标题为您的网页的结构和内容编制索引。</strong><br>因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。<br>属性总是以名称/值对的形式出现，比如：name=”value”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>改背景颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注：background-color 属性为元素定义了背景颜色：&lt;body style=”background-color:yellow”&gt;&lt;/body&gt;此style 属性淘汰了“旧的” bgcolor 属性。</li>
</ul>
<p>属性总是在 HTML 元素的开始标签中规定。<br>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。<br>在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：&lt;pre&gt;name=’Bill “HelloWorld” Gates’&lt;/pre&gt;<br>| 属性 | 值 | 描述 |<br>| — | — | — |<br>| class | <em>classname</em> | 规定元素的类名（classname） |<br>| id | <em>id</em> | 规定元素的唯一 id |<br>| style | <em>style_definition</em> | 规定元素的行内样式（inline style） |<br>| title | <em>text</em> | 规定元素的额外信息（可在工具提示中显示） |</p>
<h4 id="style属性"><a href="#style属性" class="headerlink" title="style属性"></a>style属性</h4><p>提供了一种改变所有 HTML 元素的样式的通用方法。<br>样式是 HTML 4 引入的，它是一种新的首选的改变 HTML 元素样式的方式。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。<br>而某些标签和属性建议用同样效果的样式代替：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>A red paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">face</span>=<span class="string">&quot;arial&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>A red paragraph.<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span>This is a center<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>This is center 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>仅仅有 16 种颜色名被 W3C 的 HTML4.0 标准所支持。它们是：aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow。如果需要使用其它的颜色，需要使用十六进制的颜色值。</p>
<h1 id="HTML与CSS"><a href="#HTML与CSS" class="headerlink" title="HTML与CSS"></a>HTML与CSS</h1><p>如何使用样式？<br>当浏览器读到一个样式表，它就会按照这个样式表来对文档进行格式化。有以下三种方式来插入样式表：</p>
<h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 &lt;style&gt; 标签定义内部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
暂时<del>抄</del>记这么多

<hr>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装HMCL的注意</title>
    <url>/2021/10/21/MC/vmmc/</url>
    <content><![CDATA[<h1 id="VM共享文件问题"><a href="#VM共享文件问题" class="headerlink" title="VM共享文件问题"></a>VM共享文件问题</h1><p>这篇也放这里吧<br>这里针对有hgfs但其下无文件的问题，这里找到了一种简易解决方法</p>
<ul>
<li>首先，在vmware上手动配置<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634829388093.png" alt="enter description here"><br>这一步下来如果看得到hgfs文件夹就是我这种情况</li>
<li>再执行命令<br><code>sudo vmhgfs-fuse .host:/ /mnt/hgfs -o nonempty -o allow_other</code><br>貌似是权限问题（先不深究了<h1 id="Ubuntu单独安装JavaFX"><a href="#Ubuntu单独安装JavaFX" class="headerlink" title="Ubuntu单独安装JavaFX"></a>Ubuntu单独安装JavaFX</h1><code>sudo apt install openjdk-8-jdk openjfx</code><h1 id="但是第一次强烈建议安装openjdk11而不是17"><a href="#但是第一次强烈建议安装openjdk11而不是17" class="headerlink" title="但是第一次强烈建议安装openjdk11而不是17"></a>但是第一次强烈建议安装openjdk11而不是17</h1>11后不再自带JAVAFX库<h1 id="成功安装HMCL后就是傻瓜操作了：）"><a href="#成功安装HMCL后就是傻瓜操作了：）" class="headerlink" title="成功安装HMCL后就是傻瓜操作了：）"></a>成功安装HMCL后就是傻瓜操作了：）</h1></li>
</ul>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>模组服的尝试</title>
    <url>/2021/10/25/MC/%E6%A8%A1%E7%BB%84%E6%9C%8D%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><h2 id="mohist-YYDS"><a href="#mohist-YYDS" class="headerlink" title="mohist (YYDS)"></a><a href="https://mohistmc.com/">mohist</a> (YYDS)</h2><p>下载下来是jar包，用终端运行，或者随便写个bat启动文件(使用开服器可以略过)：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">color</span> <span class="number">3</span></span><br><span class="line"><span class="built_in">title</span> <span class="number">1</span>.<span class="number">16</span>.<span class="number">5</span></span><br><span class="line">java -Xmx12G -jar mohist-<span class="number">1</span>.<span class="number">16</span>.<span class="number">5</span>-<span class="number">820</span>-server.jar//其实只用这一句（<span class="number">12</span>G为自己选择分配的内存）</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>
<h2 id="模组的选择"><a href="#模组的选择" class="headerlink" title="模组的选择"></a>模组的选择</h2><p>我的主力整合包已经240+mods了，不要妄想全部能用在服务器上(一个是负载问题、更多问题的是有BUG)<br>最终挑选了130+mods：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021/07/19  18:33            98,900 【优化】区块加载ferritecore-2.0.5-forge.jar</span><br><span class="line">2021/04/26  08:04           437,841 【优化】区块预加载Chunk Pregenerator-V1.16-3.0.5.jar</span><br><span class="line">2021/07/20  22:25           129,304 【优化】合成冲突化解polymorph-forge-1.16.5-0.25.jar</span><br><span class="line">2021/07/19  14:56            60,714 【优化】实体优化EntityCulling-1.16.5-2.1.6.jar</span><br><span class="line">2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar</span><br><span class="line">2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar</span><br><span class="line">2021/07/19  14:53           232,291 【优化】生物AI优化performant-1.16.2-5-3.71m.jar</span><br><span class="line">2021/07/19  15:42            19,038 【优化】生物群系修复(争对新添加群系)biomeidfixer-1.16.5-1.0.1.s4.jar</span><br><span class="line">2021/07/06  15:29           947,047 【前置01】abnormals_core-1.16.5-3.2.0.jar</span><br><span class="line">2021/07/21  21:33           812,772 【前置10】【辅助】jei-1.16.5-7.7.1.110.jar</span><br><span class="line">2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar</span><br><span class="line">2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar</span><br><span class="line">2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar</span><br><span class="line">2021/07/06  16:13         1,259,031 【前置17】【食物】FarmersDelight-1.16.5-0.4.5.jar</span><br><span class="line">2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar</span><br><span class="line">2021/06/20  16:17           912,234 【前置19】rhino-1605.1.1-build.23.jar</span><br><span class="line">2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar</span><br><span class="line">2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar</span><br><span class="line">2021/07/19  21:41         3,374,203 【前置22】geckolib-forge-1.16.5-3.0.41.jar</span><br><span class="line">2021/09/03  16:03           253,717 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.7.4.jar</span><br><span class="line">2021/07/20  19:38           714,054 【前置29】Mantle-1.16.5-1.6.115.jar</span><br><span class="line">2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar</span><br><span class="line">2021/06/04  22:42           260,027 【前置32】structure_gel-1.16.5-1.7.7.jar</span><br><span class="line">2021/06/05  02:28            32,203 【前置33】SimpleCoreLib-1.16.5-2.0.7.5.jar</span><br><span class="line">2021/09/13  00:35           140,636 【前置37】collective-1.16.5-2.64.jar</span><br><span class="line">2021/07/20  23:13           140,070 【前置38】Placebo-1.16.4-4.5.0.jar</span><br><span class="line">2021/07/20  23:18           208,147 【前置39】selene-1.16.5-1.5.jar</span><br><span class="line">2021/09/03  15:54           106,044 【前置3】YungsApi-1.16.4-Forge-12.jar</span><br><span class="line">2021/09/04  22:58           125,835 【前置40】valhelsia_core-16.0.10.jar</span><br><span class="line">2021/07/19  18:14           740,946 【前置41】【辅助】【前置19】或【前置2】添加合成表kubejs-forge-1605.3.12-build.38.jar</span><br><span class="line">2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar</span><br><span class="line">2021/08/17  13:42           395,978 【前置43】shetiphiancore-1.16-3.8.5.jar</span><br><span class="line">2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar</span><br><span class="line">2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar</span><br><span class="line">2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar</span><br><span class="line">2021/07/20  15:08           244,720 【前置9】饰品栏curios-forge-1.16.5-4.0.5.2.jar</span><br><span class="line">2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar</span><br><span class="line">2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar</span><br><span class="line">2021/05/04  08:31             9,772 【杂项】农田不再被踩坏.jar</span><br><span class="line">2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar</span><br><span class="line">2021/04/09  23:42            18,175 【杂项】快速树叶腐烂FastLeafDecay-v25.jar</span><br><span class="line">2021/06/08  00:35           312,299 【杂项】旅行背包TravelersBackpack-1.16.5-5.4.2.jar</span><br><span class="line">2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar</span><br><span class="line">2021/07/20  22:36           378,040 【杂项】荒野之息Paraglider-1.16.5-1.3.2.0-beta.4.jar</span><br><span class="line">2021/08/29  21:07        18,109,537 【生物】alexsmobs-1.12.0.jar</span><br><span class="line">2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar</span><br><span class="line">2021/07/21  13:20         2,970,312 【生物】Zonko&#x27;s+Monsters+1.16.5+1.2.jar</span><br><span class="line">2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar</span><br><span class="line">2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar</span><br><span class="line">2021/06/04  20:58         3,668,858 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.0.jar</span><br><span class="line">2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar</span><br><span class="line">2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar</span><br><span class="line">2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar</span><br><span class="line">2021/10/22  13:54         4,590,562 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.26.jar</span><br><span class="line">2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar</span><br><span class="line">2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar</span><br><span class="line">2021/07/20  16:23           845,975 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.5.jar</span><br><span class="line">2021/08/29  21:06           511,424 【生物】寂静岭Silent+Mine+1.16.5+0.1.jar</span><br><span class="line">2021/07/21  17:55         1,225,543 【生物】无名生物(优质无汉化)unnamedanimalmod-1.0.2.jar</span><br><span class="line">2021/07/20  16:51        14,493,152 【生物】更多下界生物infernal-expansion-2.0.0-beta.7.jar</span><br><span class="line">2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar</span><br><span class="line">2021/08/29  21:14         1,743,711 【生物】更多挑战DungeonsMod-1.16.3-1.4.40.jar</span><br><span class="line">2021/07/21  14:06           259,576 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.3.jar</span><br><span class="line">2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar</span><br><span class="line">2021/04/24  05:02         8,356,809 【生物】更好动物betteranimalsplus#-1.16.5-10.2.0.jar</span><br><span class="line">2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar</span><br><span class="line">2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar</span><br><span class="line">2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar</span><br><span class="line">2021/07/19  16:25           235,050 【生物】海洋生物risingtides-1.16.5-1.3.0.jar</span><br><span class="line">2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar</span><br><span class="line">2021/07/21  14:07           427,537 【生物】灾祸村民illagers_plus-1.16.4v1.5.jar</span><br><span class="line">2021/06/04  22:44           466,557 【生物】落选生物outvoted-1.16.5-1.2.4.jar</span><br><span class="line">2021/07/06  10:33           327,809 【生物】附魔师enchantwithmob-1.16.5-1.4.6.jar</span><br><span class="line">2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar</span><br><span class="line">2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar</span><br><span class="line">2021/10/22  13:45           756,298 【结构】DungeonCrawl-1.16.5-2.3.2.jar</span><br><span class="line">2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar</span><br><span class="line">2021/09/03  15:54           509,890 【结构】yung_BetterDungeons-1.16.4-1.2.jar</span><br><span class="line">2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar</span><br><span class="line">2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar</span><br><span class="line">2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar</span><br><span class="line">2021/07/21  14:06         1,537,457 【结构】【前置40】valhelsia_structures-1.16.5-0.1.3.jar</span><br><span class="line">2021/09/03  16:07         1,540,625 【结构】【前置40】valhelsia_structures-1.16.5-0.1.5.jar</span><br><span class="line">2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar</span><br><span class="line">2021/07/20  21:29         4,676,349 【结构】地下城DungeonsArise-1.16.5-2.1.47-release.jar</span><br><span class="line">2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar</span><br><span class="line">2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar</span><br><span class="line">2021/09/05  16:28         1,061,118 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.3.jar</span><br><span class="line">2021/06/29  16:58           915,982 【结构】大型结构Shrines-1.16.5-1.8.1.jar</span><br><span class="line">2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar</span><br><span class="line">2021/09/05  00:12         5,240,491 【结构】更多结构repurposed_structures_forge-3.2.4+1.16.5.jar</span><br><span class="line">2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar</span><br><span class="line">2021/09/18  02:46           781,636 【结构】遗迹relics-0.2.9.jar</span><br><span class="line">2021/10/22  13:44           281,735 【结构】（墙壁宝石快）Forgotten+Treasures+V12+1.16.5.jar</span><br><span class="line">2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar</span><br><span class="line">2021/07/19  15:22           464,318 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.0.jar</span><br><span class="line">2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar</span><br><span class="line">2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar</span><br><span class="line">2021/07/06  10:33         2,049,774 【装备】地下城装备dungeons_gear-1.16.5-3.0.17.jar</span><br><span class="line">2021/07/20  22:43         2,033,912 【装饰】cfm-7.0.0pre22-1.16.3.jar</span><br><span class="line">2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar</span><br><span class="line">2021/07/19  12:49            65,945 【装饰】【前置2】更多竹制品bambooeverything-1.16.5-1.0.0-forge.jar</span><br><span class="line">2021/07/20  21:51         5,723,810 【装饰】【前置39】supplementaries-1.16.5-0.14.5.jar</span><br><span class="line">2021/08/17  13:36         7,824,319 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.15.jar</span><br><span class="line">2021/06/04  18:58           954,765 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.6.4.2.jar</span><br><span class="line">2021/07/19  14:47         8,666,985 【装饰】自然装饰Natural+Decor+Mod+1.16+II+V0.21.3.7.jar</span><br><span class="line">2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar</span><br><span class="line">2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar</span><br><span class="line">2021/07/20  22:52         6,132,491 【装饰】（cfm系）morecfm-1.3.1-1.16.3.jar</span><br><span class="line">2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar</span><br><span class="line">2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar</span><br><span class="line">2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar</span><br><span class="line">2021/04/09  02:10            24,981 【辅助】【前置10】JEI拓展jeiintegration_1.16.5-7.0.1.15.jar</span><br><span class="line">2021/08/29  21:33           235,574 【辅助】【前置10】JEI资源显示JustEnoughResources-1.16.5-0.12.1.128.jar</span><br><span class="line">2021/07/19  15:19           262,656 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.0.jar</span><br><span class="line">2021/07/21  14:06            31,243 【辅助】【前置10】附魔信息JEIEnchantmentInfo-1.16.4-1.2.1.jar</span><br><span class="line">2021/07/20  16:16            29,421 【辅助】【前置25】12高亮显示扩展WailaHarvestability-mc1.16.x-forge-1.1.15.jar</span><br><span class="line">2021/07/17  10:12           483,347 【辅助】世界地图XaerosWorldMap_1.14.6.1_Forge_1.16.5.jar</span><br><span class="line">2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar</span><br><span class="line">2021/07/30  18:11           460,711 【辅助】回收箱Corail-Recycler-NE-1.16.4-385.jar</span><br><span class="line">2021/07/20  21:23           330,091 【辅助】搬箱子carryon-1.16.5-1.15.5.15.jar</span><br><span class="line">2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar</span><br><span class="line">2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar</span><br><span class="line">2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar</span><br><span class="line">2021/08/02  11:50            46,287 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.1.0.jar</span><br><span class="line">2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar</span><br><span class="line">2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar</span><br><span class="line">2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar</span><br><span class="line">2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar</span><br><span class="line">2021/07/19  16:52            14,411 【食物】【前置17】【前置18】farmerstea-1.16.5-1.2.jar</span><br><span class="line">2021/07/19  16:52           107,061 【食物】【前置17】农夫乐事下界扩展nethers_delight-1.1.jar</span><br><span class="line">2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar</span><br><span class="line">2021/07/19  16:54           182,667 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.0.jar</span><br></pre></td></tr></table></figure>
<p>然后也在测试时发现了一个非常关键的问题，在初次用html配好的forge中直接一次性全部跑以上mods很可能会卡住(卡死)<br>最后发现是小伙伴的JAVA用的是jdk16，而我一般用的是jdk15就没有问题。最后他先换为jdk11发现能进来了，但有贴图bug还是得有jdk15（这种关于材质的错误很可能与JAVA版本有关）</p>
<h1 id="开服器"><a href="#开服器" class="headerlink" title="开服器"></a>开服器</h1><p>可视化、方便操作、不必要(对小型服务器)</p>
<h2 id="灵工艺"><a href="#灵工艺" class="headerlink" title="灵工艺"></a><a href="https://nullcraft.org/">灵工艺</a></h2><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>一开始看网上开服教程，说如果本机ip为公网ip则不用搞内网穿透，我学校的网ip确实是公网，但好像对于校外连接还是不行，还是得内网穿透(而且寝室的网络也不是公网ip)。</p>
<h2 id="SakuraFrp-YYDS"><a href="#SakuraFrp-YYDS" class="headerlink" title="SakuraFrp (YYDS)"></a><a href="https://www.natfrp.com/">SakuraFrp</a> (YYDS)</h2><font size="2">
有说通过ipconfig查自己IP的方法，但好像学校(寝室)有些不一样：
我通过ipconfig查到的是普通的192.168.XXX.XXX
通过百度ip查到的却是210.XXX.XXX.XXX
</font>
<br>
其实如果是用SakuraFrp以上都不重要，直接在左侧进程中选择Java的就行了
最终实现了*愉快的玩耍*



]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript简记</title>
    <url>/2021/10/14/%E5%89%8D%E7%AB%AF/JavaScript%E7%AE%80%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/js/js-tutorial.html">菜鸟教程</a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="JavaScript-是脚本语言"><a href="#JavaScript-是脚本语言" class="headerlink" title="JavaScript 是脚本语言"></a>JavaScript 是脚本语言</h2><p>JavaScript 是一种轻量级的编程语言；是可插入 HTML 页面的编程代码；插入 HTML 页面后，可由所有的现代浏览器执行。</p>
<h2 id="可直接写入HTML输入流"><a href="#可直接写入HTML输入流" class="headerlink" title="可直接写入HTML输入流"></a>可直接写入HTML输入流</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="简单逻辑判断"><a href="#简单逻辑判断" class="headerlink" title="简单逻辑判断"></a>简单逻辑判断</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入数字。如果输入值不是数字，浏览器会弹出提示框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">if</span>(x==<span class="string">&quot;&quot;</span>||<span class="built_in">isNaN</span>(x))</span></span><br><span class="line"><span class="javascript">	&#123;</span></span><br><span class="line"><span class="javascript">		alert(<span class="string">&quot;不是数字&quot;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="在HTML中使用"><a href="#在HTML中使用" class="headerlink" title="在HTML中使用"></a>在HTML中使用</h1><p>HTML 中的脚本必须位于 &lt;script&gt; 与 &lt;/script&gt; 标签之间。<br>脚本可被放置在 HTML 页面的 &lt;body&gt; 和 &lt;head&gt; 部分中。<br>内部使用如上例，外部调用如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h3><p>自然有</p>
<ul>
<li>数字（Number）字面量</li>
</ul>
<p>3.14<br>101<br>123e5（科学计数）</p>
<ul>
<li>字符串（String）字面量<br>“John Doe”<br>‘John Doe’（单引号或双引号）</li>
<li>表达式字面量<br>5 + 6<br>5 * 10（直接算出答案）</li>
<li>数组（Array）字面量<br>[40, 100, 1, 10]</li>
<li>对象（Object）字面量<br>{firstName:”John”, lastName:”Doe”, age:50, eyeColor:”blue”}</li>
<li>函数（Function）字面量<br>function myFunction(a, b) { return a * b;}</li>
</ul>
<h3 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h3><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x, length</span><br><span class="line">x = 5</span><br><span class="line">length = 6</span><br></pre></td></tr></table></figure>
<p>JavaScript 使用动态弱类型<br>实际数据类型是根据赋值确定，具有兼容性（可16+“0”输出160）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var length = 16;                                  // Number 通过数字字面量赋值</span><br><span class="line">var points = x * 10;                              // Number 通过表达式字面量赋值</span><br><span class="line">var lastName = &quot;Johnson&quot;;                         // String 通过字符串字面量赋值</span><br><span class="line">var cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];              // Array  通过数组字面量赋值</span><br><span class="line">var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;&#125;;  // Object 通过对象字面量赋值</span><br></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>可以用<code>//123456</code>来<br>可多行注释以 /* 开始，以 */ 结尾。</p>
<h3 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h3><p>可用以下输出<code>你好 世界!</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.write(&quot;你好 \</span><br><span class="line">世界!&quot;);</span><br></pre></td></tr></table></figure>
<p>不可（报错）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.write \ </span><br><span class="line">(&quot;你好世界!&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>JavaScript 没有任何打印或者输出的函数，但可通过以下方法来输出数据：</p>
<h3 id="使用-window-alert-弹出警告框。"><a href="#使用-window-alert-弹出警告框。" class="headerlink" title="使用 window.alert() 弹出警告框。"></a>使用 <strong>window.alert()</strong> 弹出警告框。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.alert(5 + 6);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>显示11</p>
<h3 id="使用-document-write-方法将内容写到-HTML-文档中-使用innerHTML-写入到-HTML-元素。"><a href="#使用-document-write-方法将内容写到-HTML-文档中-使用innerHTML-写入到-HTML-元素。" class="headerlink" title="使用 document.write() 方法将内容写到 HTML 文档中 使用innerHTML 写入到 HTML 元素。"></a>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中 使用<strong>innerHTML</strong> 写入到 HTML 元素。</h3><p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;我的第一个段落&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = &quot;段落已修改。&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(Date());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的第一个 Web 页面</span><br><span class="line">段落已修改。</span><br><span class="line">Thu Oct 14 2021 19:51:02 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>
<p>这种写入有覆盖的顺序，以上代码是在加载HTML时便写入，而以下是后来写入则会覆盖</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个 Web 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-console-log-写入到浏览器的控制台。"><a href="#使用-console-log-写入到浏览器的控制台。" class="headerlink" title="使用 console.log() 写入到浏览器的控制台。"></a>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</h3><p>如果您的浏览器支持调试，可以使用 console.log() 方法在浏览器中显示 JavaScript 值。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>蚂蚁前端课程简易聊天室</title>
    <url>/2021/10/25/%E5%89%8D%E7%AB%AF/%E8%9A%82%E8%9A%81%E5%89%8D%E7%AB%AF%E8%AF%BE%E7%A8%8B1/</url>
    <content><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="浏览器-cilent"><a href="#浏览器-cilent" class="headerlink" title="浏览器(cilent)"></a>浏览器(cilent)</h2><ol>
<li>发起登录操作<ol>
<li>获取用户名和密码</li>
<li>发送信息到服务器端验证</li>
<li>事件绑定到按钮上</li>
</ol>
</li>
<li>发送信息<ol>
<li>获取到输入框的内容</li>
<li>socket.emit(‘sendMessage’, msg)</li>
<li>自己的聊天界面 $(text) 里新增消息记录</li>
<li>广播到其他的浏览器端中</li>
</ol>
</li>
<li>online<ol>
<li>服务端发送当前已登录的用户</li>
<li>拿到登录用户后，显示在左边的好友列表</li>
</ol>
</li>
<li>获取历史记录<ol>
<li>socket.emi(‘getHistory’)</li>
<li>服务器端返回保存的历史记录</li>
<li>拿到历史记录后渲染聊天框中</li>
</ol>
</li>
</ol>
<h2 id="服务器端-server"><a href="#服务器端-server" class="headerlink" title="服务器端(server)"></a>服务器端(server)</h2><ol>
<li>通过中间件的形式 io.use 验证账号密码是否为空</li>
<li>在 connected 事件里获取到浏览器的 socket<ol>
<li>socket.on(‘sendMessage’)</li>
<li>拼装 Message 对象，包含消息内容 content，发送时间，发送人</li>
<li>将信息对象 push 到 history 中</li>
<li>通过广播发生消息</li>
</ol>
</li>
<li>增加获取历史记录的接口<ol>
<li>socket.on(‘getHistory’) 将历史记录返回浏览器</li>
</ol>
</li>
<li>触发 online 事件<ol>
<li>io 监听 connected 和 disconnect 事件后</li>
<li>将保存在全局的 sockets 通过 socket.emit(‘online’) 发送浏览器</li>
<li>disconnect 事件，delete name，然后再发送<h1 id="具体结构"><a href="#具体结构" class="headerlink" title="具体结构"></a>具体结构</h1><h2 id="服务端JS"><a href="#服务端JS" class="headerlink" title="服务端JS"></a>服务端JS</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> socketIO = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>).Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> express();</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app);</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> socketIO(server);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sockets = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> historys = [];</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./web&#x27;</span>));</span><br><span class="line"></span><br><span class="line">io.use(<span class="function">(<span class="params">socket, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a client incoming&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> name = socket.handshake.query.name;</span><br><span class="line">  <span class="keyword">const</span> password = socket.handshake.query.password;</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;拒绝连接：没有账户名&#x27;</span>);</span><br><span class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;empty&#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (password !== <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;拒绝连接：密码错误&#x27;</span>);</span><br><span class="line">    next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a user connected&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = socket.handshake.query.name;</span><br><span class="line">  sockets[name] = socket;</span><br><span class="line">  socket.on(<span class="string">&#x27;sendMessage&#x27;</span>, <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;receive a message&#x27;</span>, name, content);</span><br><span class="line">    <span class="keyword">const</span> message = &#123;</span><br><span class="line">      <span class="attr">time</span>: <span class="built_in">Date</span>.now(),</span><br><span class="line">      <span class="attr">sender</span>: name,</span><br><span class="line">      content</span><br><span class="line">    &#125;;</span><br><span class="line">    historys.push(message);</span><br><span class="line">    socket.broadcast.emit(<span class="string">&#x27;receiveMessage&#x27;</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&#x27;getHistory&#x27;</span>, <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    fn(historys);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> sockets[name];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sa user disconnect:&#x27;</span>, name, reason);</span><br><span class="line">    io.sockets.emit(<span class="string">&#x27;online&#x27;</span>, <span class="built_in">Object</span>.keys(sockets));</span><br><span class="line">  &#125;);</span><br><span class="line">  io.sockets.emit(<span class="string">&#x27;online&#x27;</span>, <span class="built_in">Object</span>.keys(sockets));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="网页文件-web文件夹与xerver-js同级"><a href="#网页文件-web文件夹与xerver-js同级" class="headerlink" title="网页文件(web文件夹与xerver.js同级)"></a>网页文件(web文件夹与xerver.js同级)</h2><h3 id="客户端JS"><a href="#客户端JS" class="headerlink" title="客户端JS"></a>客户端JS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快捷选择方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(query)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 登录模块</span></span><br><span class="line">  <span class="keyword">var</span> login = $(<span class="string">&#x27;#login&#x27;</span>);</span><br><span class="line">  <span class="comment">// 聊天室模块</span></span><br><span class="line">  <span class="keyword">var</span> chatroom = $(<span class="string">&#x27;#chatroom&#x27;</span>);</span><br><span class="line">  <span class="comment">// 保存连接对象，后面需要用到</span></span><br><span class="line">  <span class="keyword">var</span> socket = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 登录方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onLoginFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputNameValue = $(<span class="string">&#x27;#inputName&#x27;</span>).value;</span><br><span class="line">    <span class="keyword">var</span> inputPwdValue = $(<span class="string">&#x27;#inputPwd&#x27;</span>).value;</span><br><span class="line">    socket = io(&#123;</span><br><span class="line">      <span class="attr">query</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: inputNameValue,</span><br><span class="line">        <span class="attr">password</span>: inputPwdValue</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">reconnection</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    socket.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      login.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;login disappear&quot;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        chatroom.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;display: flex&quot;</span>);</span><br><span class="line">      &#125;, <span class="number">1500</span>);</span><br><span class="line">  </span><br><span class="line">      socket.emit(<span class="string">&#x27;getHistory&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;history&#x27;</span>, data);</span><br><span class="line">        <span class="keyword">var</span> textSection = $(<span class="string">&#x27;#text-section&#x27;</span>);</span><br><span class="line">        textSection.innerHTML = data.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (value.sender == inputNameValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              <span class="string">`&lt;div class=&quot;msg msg-me&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;<span class="subst">$&#123;value.sender&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;msg-txt&quot;&gt;<span class="subst">$&#123;value.content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;`</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            <span class="string">`&lt;div class=&quot;msg&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;label&gt;<span class="subst">$&#123;value.sender&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">              &lt;div class=&quot;msg-txt&quot;&gt;<span class="subst">$&#123;value.content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span></span><br><span class="line">          );</span><br><span class="line">        &#125;).join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  </span><br><span class="line">      socket.on(<span class="string">&#x27;receiveMessage&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> textSection = $(<span class="string">&#x27;#text-section&#x27;</span>);</span><br><span class="line">        textSection.innerHTML += (</span><br><span class="line">          <span class="string">`&lt;div class=&quot;msg&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;label&gt;<span class="subst">$&#123;message.sender&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;msg-txt&quot;&gt;<span class="subst">$&#123;message.content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span></span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//   socket.on(&#x27;online&#x27;, (onlines) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;onlines&#x27;, onlines);</span></span><br><span class="line">    <span class="comment">//     var friendSection = $(&#x27;#friend-box&#x27;);</span></span><br><span class="line">    <span class="comment">//     friendSection.innerHTML = onlines.map(name =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//       return `&lt;p class=&quot;friend-profile&quot;&gt;$&#123;name&#125;&lt;/p&gt;`;</span></span><br><span class="line">    <span class="comment">//     &#125;).join(&#x27;&#x27;);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    socket.on(<span class="string">&#x27;connect_error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;connect_error&#x27;</span>, e);</span><br><span class="line">      <span class="keyword">if</span> (e &amp;&amp; e.message === <span class="string">&#x27;error&#x27;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;密码错误，请检查&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      alert(<span class="string">&#x27;链接失败，请检查服务器地址&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> login = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#login&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> chatRoom = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#chatRoom&#x27;</span>)</span><br><span class="line">    login.style.top = <span class="string">&#x27;-100%&#x27;</span></span><br><span class="line">    chatRoom.style.top = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> loginbutton = $(<span class="string">&#x27;.login-button&#x27;</span>);</span><br><span class="line">  loginbutton.addEventListener(<span class="string">&#x27;click&#x27;</span>, onLoginFunction);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onSendFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> textSection = $(<span class="string">&#x27;#text-section&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> msg = $(<span class="string">&#x27;.input-area&#x27;</span>).value;</span><br><span class="line">    <span class="keyword">if</span> (!msg) &#123;</span><br><span class="line">      alert(<span class="string">&#x27;请输入内容&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&#x27;.input-area&#x27;</span>).value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> inputNameValue = $(<span class="string">&#x27;#inputName&#x27;</span>).value;</span><br><span class="line">    socket.emit(<span class="string">&#x27;sendMessage&#x27;</span>, msg);</span><br><span class="line">    textSection.innerHTML += <span class="string">`&lt;div class=&quot;msg msg-me&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;label&gt;<span class="subst">$&#123;inputNameValue&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;msg-txt&quot;&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> sendBtn = $(<span class="string">&#x27;.send-button&#x27;</span>);</span><br><span class="line">  sendBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>, onSendFunction);</span><br></pre></td></tr></table></figure>
<h3 id="总HTML"><a href="#总HTML" class="headerlink" title="总HTML"></a>总HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Room<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content usrName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>账户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content usrPwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputPwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;login-button&quot;</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap chatRoom&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chatroom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;friend-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;li&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;li&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;li&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;li&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Room<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text-section&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./me.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-txt&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input-area&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;send-button&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">63deg</span>, <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>) <span class="number">23%</span>, transparent <span class="number">23%</span>) <span class="number">7px</span> <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">63deg</span>, transparent <span class="number">74%</span>, <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>) <span class="number">78%</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">63deg</span>, transparent <span class="number">34%</span>, <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>) <span class="number">38%</span>, <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">233</span>, <span class="number">233</span>) <span class="number">58%</span>, transparent <span class="number">62%</span>),<span class="number">#444</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">16px</span> <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.95</span>; </span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#494848</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-title</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.send-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chatRoom</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* position: relative; */</span></span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">29</span>, <span class="number">49</span>, <span class="number">28</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.li</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-area</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg-me</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg-me</span> <span class="selector-class">.msg-txt</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">81</span>, <span class="number">108</span>, <span class="number">81</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg-txt</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: fit-content;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="仅作简单了解前端的练习"><a href="#仅作简单了解前端的练习" class="headerlink" title="仅作简单了解前端的练习"></a>仅作简单了解前端的练习</h1></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>蚂蚁前端课程聊天室界面框架</title>
    <url>/2021/10/17/%E5%89%8D%E7%AB%AF/%E8%9A%82%E8%9A%81%E5%89%8D%E7%AB%AF%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<p>网页图标</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://dyinjin.github.io/images/avatar.gif&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h1 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h1><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(checkUsername() &amp;&amp; checkPassword())&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.open(<span class="string">&quot;聊天界面.html&quot;</span>);</span></span><br><span class="line"><span class="javascript">			 &#125;		  </span></span><br><span class="line"><span class="javascript">        &#125;  </span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;in1&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">if</span>(username==<span class="string">&quot;wyj&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">				alert(<span class="string">&quot;请输入正确用户名&quot;</span>);</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//检查登录密码</span></span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&quot;in2&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">if</span>(password==<span class="string">&quot;123&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">				alert(<span class="string">&quot;请输入正确密码&quot;</span>);</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bgimg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ndiv&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ntitle&quot;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ninput&quot;</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ninput&quot;</span> <span class="attr">id</span>=<span class="string">&quot;in2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;neu&quot;</span> <span class="attr">id</span>=<span class="string">&quot;but1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;buttonClick();&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>LOGIN<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    place-items: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.neu</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.neu</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, inset -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.neu</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.neu</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#767676</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.neu</span><span class="selector-pseudo">:active</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.95</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.neu</span><span class="selector-id">#but1</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ninput</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ninput</span><span class="selector-id">#in1</span>&#123;    </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ninput</span><span class="selector-id">#in2</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ndiv</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfc0bf</span>;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.95</span>; </span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#494848</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgimg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">63deg</span>, <span class="number">#999</span> <span class="number">23%</span>, transparent <span class="number">23%</span>) <span class="number">7px</span> <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">63deg</span>, transparent <span class="number">74%</span>, <span class="number">#999</span> <span class="number">78%</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">63deg</span>, transparent <span class="number">34%</span>, <span class="number">#999</span> <span class="number">38%</span>, <span class="number">#999</span> <span class="number">58%</span>, transparent <span class="number">62%</span>),<span class="number">#444</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">16px</span> <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ntitle</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="聊天界面"><a href="#聊天界面" class="headerlink" title="聊天界面"></a>聊天界面</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.warp0</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.cl2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.msglist2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">239</span>, <span class="number">239</span>, <span class="number">239</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.title2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: dimgrey;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.msg3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.msg3me</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: row-reverse;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.msg3me</span> <span class="selector-class">.text4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.img4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.text4</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: fit-content;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#e6e6e6</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#bbbbbb</span>, -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">10px</span> <span class="number">#ffffff</span>; </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.msgsend2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-top</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.input3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">&quot;sendmsg&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> div0 = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> div2 = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">            div0.setAttribute(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;msg3 msg3me&quot;</span>);</span></span><br><span class="line"><span class="javascript">            img1.setAttribute(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;img4&quot;</span>);</span></span><br><span class="line"><span class="javascript">            img1.setAttribute(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;图片1.jpg&quot;</span>);</span></span><br><span class="line"><span class="javascript">            div2.setAttribute(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;text4&quot;</span>);</span></span><br><span class="line"><span class="javascript">            div2.innerHTML=x;</span></span><br><span class="line"><span class="javascript">            div0.appendChild(img1);</span></span><br><span class="line"><span class="javascript">            div0.appendChild(div2);</span></span><br><span class="line"><span class="javascript">            box.appendChild(div0);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;sendmsg&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;warp0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cl2&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cl2&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cl2&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cl2&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title2&quot;</span>&gt;</span></span><br><span class="line">            Tom</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msglist2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img4&quot;</span> <span class="attr">src</span>=<span class="string">&quot;图片1.jpg&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text4&quot;</span>&gt;</span>HELLO<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg3 msg3me&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img4&quot;</span> <span class="attr">src</span>=<span class="string">&quot;图片1.jpg&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text4&quot;</span>&gt;</span>begin<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msgsend2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;input3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendmsg&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;buttonClick();&quot;</span>&gt;</span>send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="仅作简单了解前端的练习"><a href="#仅作简单了解前端的练习" class="headerlink" title="仅作简单了解前端的练习"></a>仅作简单了解前端的练习</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机名词</title>
    <url>/2021/09/23/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%90%8D%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h1><p>GUN’s Not Unix<br>开源操作系统(unix-like)<br>GNU是一个自由的操作系统，其内容软件完全以GPL方式发布。这个操作系统是GNU计划的主要目标，名称来自GNU’s Not Unix!的递归缩写，因为GNU的设计类似Unix，但它不包含具著作权的Unix代码。</p>
<h1 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h1><p>为GNU操作系统专门编写的一款编译器<br>GCC（GNU Compiler Collection，GNU编译器套件）是由GNU开发的编程语言译器。GNU编译器套件包括C、C++、 Objective-C、 Fortran、Java、Ada和Go语言前端，也包括了这些语言的库（如libstdc++，libgcj等。）</p>
<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><p>UNIX下的程序调试工具<br>UNIX及UNIX-like下的调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB等IDE的调试，但如果你是在 UNIX平台下做软件，你会发现GDB这个调试工具相比于VC、z的优点是具有修复网络断点以及恢复链接等功能，比BCB的图形化调试器有更强大的功能。所谓“尺有所短，寸有所长”就是这个道理。</p>
<h1 id="BSP"><a href="#BSP" class="headerlink" title="BSP"></a>BSP</h1><p>板级支持包<br>用作初始化与运行操作系统并用于评估板(Evaluation Board)的简易代码。板级支持包（BSP）（Board Support Package）是构建嵌入式操作系统所需的引导程序(Bootload)、内核(Kernel)、根文件系统(Rootfs)和工具链(Toolchain) 提供完整的软件资源包。</p>
<h1 id="DSP"><a href="#DSP" class="headerlink" title="DSP"></a>DSP</h1><p>数字信号处理<br>大部分信号的初始形态是事物的运动变化，为了测量它们和处理它们，先要用传感器把它们的特征转换成电信号，等到这些电信号处理完后，再把它们转变为我们能看见、能听见或能利用的形态。<br>数字信号处理单元实际上是一个计算机，它按照指令对二进制的数字信号进行计算。例如，将声波信号与一个高频正弦波信号相乘，可实现幅度调制。实际上，数字信号往往还要变回模拟信号，才能发挥它的作用。例如，无线电是电磁波通过天线向外发射的，这时的电磁波只能是模拟信号。</p>
<h1 id="PSP"><a href="#PSP" class="headerlink" title="PSP"></a>PSP</h1><p>一般来说PSP是256个字节，当程序生成了可执行文件以后，在执行时会先将程序调入内存，这个时候ds中存入程序在内存中的段地址，紧接着是程序的一些说明，比如程序占用多少空间等，这就是PSP，然后才是真正的程序地址，将cs指向这里，且ip设为0000h</p>
<h1 id="BootLoader"><a href="#BootLoader" class="headerlink" title="BootLoader"></a>BootLoader</h1><p>在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。在嵌入式系统中，通常并没有像BIOS那样的固件程序（注，有的嵌入式CPU也会内嵌一段短小的启动程序），因此整个系统的加载启动任务就完全由BootLoader来完成。</p>
<h1 id="SOC片上系统"><a href="#SOC片上系统" class="headerlink" title="SOC片上系统"></a>SOC片上系统</h1><p>一个芯片就是一个系统，或将一个系统放在一个芯片中。SOC最大特点是实现了软/硬件的无缝结合，直接在处理器芯片内部嵌入操作系统代码模块</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>Linux操作系统简介 嵌入式 Linux 的特点： </p>
<ol>
<li>Linux 是开放源代码的； </li>
<li>Linux 的内核小、效率高，内核的更新速度很快； </li>
<li>Linux 是免费的 OS，在价格上极具竞争力</li>
</ol>
<p>嵌入式 Linux 系统产品主要分为三类： </p>
<ul>
<li>第一：专门为 Linux 的嵌入式方向做的 如何让 Linux 更小、更容易嵌入到体积要求和功能、性 能要求更高的硬件中去，是产品的开发方向，如 Monta Vista 的Hard Hat Linux等。</li>
<li>第二：专门为Linux的实时特性设计的产品 将 Linux 开发成实时操作系统，尤其是硬实时系统，应 用于一些关键的控制场合。如 Fsmlabs 公司的 RT-Linux。 </li>
<li>第三：将实时性和嵌入式方案结合起来的方案，并且提供集 成化的解决方案。如Lineo、TimeSys等。</li>
</ul>
<h1 id="VxWorks"><a href="#VxWorks" class="headerlink" title="VxWorks"></a>VxWorks</h1><p>VxWorks 操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS）。<br>VxWorks具有良好的持续发展能力、高性能的内核以及友好的用户开发环境，具有良好的可靠性和卓越的实时性，在嵌入式实时操作系统领域占据一席之地。<br>VxWorks被广泛的应用于<strong>通信、军事、航空、航天</strong>等 高精尖技术及实时性要求极高的领域中。如卫星通讯、军事演习、导弹制导、飞机导航等</p>
<h1 id="WinCE"><a href="#WinCE" class="headerlink" title="WinCE"></a>WinCE</h1><p>Windows CE 是一个全新开发的操作系统，是一个开放的、可裁剪的、32位的实时嵌入式<strong>窗口</strong>操作系统。<br>Windows CE 的基本特性如下： </p>
<ol>
<li>适应小型系统，为低成本、计算能力较差的系统提供简洁、 高效、完善的控制机制； </li>
<li>支持多种处理器和计算机架构，并支持多种装置接口； </li>
<li>遵循Windows平台的应用开发规范，提供Win32API等； </li>
<li>操作系统各部分模块化，可根据特性定制，以适应ROM； </li>
<li>为应用程序提供网络通信、图形使用接口、数据库、档案 等支持； </li>
<li>支持实时应用； </li>
<li>提供进阶电源管理功能</li>
</ol>
<h1 id="uC-os-Ⅱ"><a href="#uC-os-Ⅱ" class="headerlink" title="uC/os-Ⅱ"></a>uC/os-Ⅱ</h1><p>uC/os-Ⅱ是一种<strong>基于优先级的抢占式</strong>多任务实时操作系统，包含了：实时内核、任务管理、时间管理、任务间通信同步（信号量、邮箱、消息队列）和内存管理等功能。<br>uC/os-Ⅱ可以使各个任务独立工作，互不干涉，很容易实现准时而且无误执行，使实际应用程序的设计和扩展变得容易，使应用程序的设计过程大为简单。<br>uC/os-Ⅱ绝大部分的代码是用ANSI的C语言写的</p>
<h1 id="pSOSystem"><a href="#pSOSystem" class="headerlink" title="pSOSystem"></a>pSOSystem</h1><p>pSOSystem 是一个专门为嵌入式微处理器设计和开发的模块、高效率的实时操作系统。<br>pSOSystem 的每一部分都是完全“自包含”的，这种机制允许开发者根据每个应用的特殊要求，对操作系统的功能和内存进行裁剪和配置。<br>pSOSystem 提供了<strong>一套集成化的交叉开发工具</strong>，以支持应用系统的开发。该集成环境可在 PC 机或工作站上运行，这些工具可通过多种连接机制与目标机通信</p>
<h1 id="uClinux"><a href="#uClinux" class="headerlink" title="uClinux"></a>uClinux</h1><p>Linux是一种很受欢迎的操作系统，它与UNIX系统兼容，开放源代码。它原本被设计为桌面系统，现在广泛应用于服务器领域。而更大的影响在于它正逐渐的应用于嵌入式设备。uClinux正是在这种氛围下产生的。在uClinux这个英文单词中u表示Micro，小的意思，C表示Control，控制的意思，所以uClinux就是Micro-Control-Linux，字面上的理解就是”针对微控制领域而设计的Linux系统”。<br>uCLinux主要是针对目标处理器<strong>没有存储管理单元</strong>MMU（Memory Management Unit）的嵌入式系统而设计的。它已经被成功地移植到了很多平台上。由于没有MMU，其多任务的实现需要一定技巧。</p>
<h1 id="ThreadX"><a href="#ThreadX" class="headerlink" title="ThreadX"></a>ThreadX</h1><p>ThreadX是小型RTOS的巅峰之作，通过了各行各业的安全认证，并且大部分都是<strong>最高安全标准</strong>，适用于深嵌入式应用中，具有规模小、实时性强、可靠性高、无产品版权费、易于使用等特点，并且支持大量的处理器和SoC<br>文件系统FileX、网络协议栈NetX十分优秀安全性突出</p>
<h1 id="QNX"><a href="#QNX" class="headerlink" title="QNX"></a>QNX</h1><p>QNX是一个分布式、嵌入式、可规模扩展的硬实时操作系统，是一种商用的遵从可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 <strong>POSIX</strong> ）规范的类Unix实时操作系统，在汽车领域，网络通信领域应用广泛在轨道交通、医疗器械、智能电网及航空航天中，都发挥着积极作用。</p>
<h1 id="OSE"><a href="#OSE" class="headerlink" title="OSE"></a>OSE</h1><p>Operating System Embedded是具有性能高、<strong>代码小</strong>和可确定性实时操作系统。<br>OSE专门针对移动计算应用进行了优化，支持从基于DSP的基带处理到RISC的应用处理<br>特点：极高的处理能力 支持复杂的分布式系统 强大的容错能力 丰富的功能模块 广泛的应用 严格的安全认证 强大的第三方支持。</p>
<h1 id="PalmOS"><a href="#PalmOS" class="headerlink" title="PalmOS"></a>PalmOS</h1><p>Palm OS是一种<strong>32 bit</strong>的嵌入式操作系统，广泛应用于移动终端设备特别是在<strong>PDA掌上电脑</strong>市场占据90%市场。<br>但随着掌上电脑市场的缩减也逐渐没落</p>
<h1 id="Symbian"><a href="#Symbian" class="headerlink" title="Symbian"></a>Symbian</h1><p>即塞班系统，是塞班公司为手机而设计的操作系统，也即曾经的诺基亚手机的主要操作系统.<br>2011年11月，塞班在全球的市场占有率降至22.1%，霸主地位已彻底被Android取代，中国市场占有率则降为23%。12月21日，诺基亚宣布放弃Symbian品牌。</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>寻址与指令</title>
    <url>/2021/09/15/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E8%AF%BE/%E5%AF%BB%E5%9D%80%E4%B8%8E%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h1><p>寻址方式是规定如何对地址字段作出解释,以找到操作数</p>
<ul>
<li>操作数的位置<ul>
<li>堆栈<ul>
<li>主存开辟（软堆栈）</li>
<li>CPU中的寄存器组组成（硬堆栈）</li>
</ul>
</li>
<li>寄存器<ul>
<li>CPU寄存器</li>
<li>外设寄存器</li>
</ul>
</li>
<li>存储器<ul>
<li>主存</li>
<li>外存<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086568.png" alt="enter description here"></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>CPU能够直接访问的操作数只能存放在主存储器或CPU内的寄存器中<br><a href="https://dyinjin.github.io/2021/09/17/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/5/">x86具体操作</a></p>
<ul>
<li>立即寻址<br>  操作码字段后面的部分是操作数本身</li>
<li>直接寻址类<ul>
<li>直接寻址（主存直接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086555.png" alt="enter description here"></li>
<li>寄存器寻址（寄存器直接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086556.png" alt="enter description here"></li>
</ul>
</li>
<li>间接寻址类<ul>
<li>间接寻址（主存间接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086557.png" alt="enter description here"></li>
<li>寄存器间接寻址方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086558.png" alt="enter description here"></li>
<li>自增、减型寄存器间址方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086559.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086560.png" alt="enter description here"></li>
<li>堆栈寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086561.png" alt="enter description here"></li>
<li>多重间接寻址（主存多重间接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086562.png" alt="enter description here"></li>
</ul>
</li>
<li>变址类<ul>
<li>变址寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086563.png" alt="enter description here"></li>
<li>基址寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086564.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086565.png" alt="comparison"></li>
<li>基址加变址方式<br>图略</li>
<li>相对寻址（浮动编址）<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086566.png" alt="enter description here"></li>
<li>页面寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086567.png" alt="enter description here"><h1 id="指令-未完"><a href="#指令-未完" class="headerlink" title="指令(未完)"></a>指令(未完)</h1></li>
</ul>
</li>
<li>传送类指令<ul>
<li>一般传送指令</li>
<li>堆栈指令</li>
<li>数据交换指令</li>
</ul>
</li>
<li>输入/输出(I/O)指令<ul>
<li>外围设备编址<br>  ① 对外围设备单独编址<ul>
<li>1）单独编址到设备级</li>
<li>2）单独编址到寄存器级：<br>② 外围设备与主存储器统一编址</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>期中佛脚</title>
    <url>/2021/11/01/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E8%AF%BE/%E6%9C%9F%E4%B8%AD%E4%BD%9B%E8%84%9A/</url>
    <content><![CDATA[<h2 id="CPU概述"><a href="#CPU概述" class="headerlink" title="CPU概述"></a>CPU概述</h2><p>CPU基本包含运算部件、缓存部件、寄存器组、微命令产生部件（控制部件）、时序系统、数据/控制通路<br>总体来看CPU的工作过程就是</p>
<ol>
<li>从主存(或缓存)中读取命令，</li>
<li>将指令放入指令寄存器(IR)，</li>
<li>然后对指令译码，把指令分解成一系列的微操作，</li>
<li>再发出各种相应的控制命令，控制各功能部件执行相关操作，<br>从而完成一条指令的执行，实现对应的功能。<h3 id="运算部件"><a href="#运算部件" class="headerlink" title="运算部件"></a>运算部件</h3>ALU(算术逻辑运算单元)是核心、主要由加法器构成<h3 id="缓存部件"><a href="#缓存部件" class="headerlink" title="缓存部件"></a>缓存部件</h3>为提高CPU处理主存数据的效率而设<h3 id="寄存器组"><a href="#寄存器组" class="headerlink" title="寄存器组"></a>寄存器组</h3>一般分为(8)</li>
</ol>
<ul>
<li>通用寄存器组</li>
<li>暂存器</li>
<li><strong>IR</strong>指令寄存器</li>
<li><strong>PC</strong>程序计数器</li>
<li><strong>PSW</strong>程序状态寄存器</li>
<li><strong>MAR</strong>地址寄存器</li>
<li><strong>MBR/MDR</strong>数据缓冲寄存器</li>
<li><strong>SP</strong>堆栈指针寄存器<h4 id="具体可见"><a href="#具体可见" class="headerlink" title="具体可见"></a>具体可见</h4><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536612.png"></li>
<li>可编程寄存器<br>  <strong>R0~R3</strong>通用寄存器(000,001,010,011)、<strong>SP</strong>(100)堆栈指针、<strong>PSW</strong>(101)程序状态寄存器、<strong>PC</strong>程序计数器</li>
<li>指令寄存器IR<br>用来存放现行运行指令，它的输出是产生微操作命令序列的主要逻辑依据。</li>
<li>暂存器<br>  <strong>C、D</strong>约定从主存中读<strong>源操作数</strong>、操作数地址时用<strong>C</strong>；从主存中取目的<strong>操作数</strong>、操作数地址或暂存时，用<strong>D</strong></li>
<li>主存接口寄存器MAR、MDR(MBR)<ul>
<li>地址寄存器<strong>MAR</strong><br>读取指令/存取操作数/操作数地址时，CPU先将地址信息送入MAR，再由MAR经地址总线送往主存M，找到相应的主存单元。</li>
<li>数据缓冲寄存器<strong>MBR(MDR)</strong><br>   由控制命令R/W决定传送方向。<br>   R：由主存单元-&gt;数据总线-&gt;MDR<br>   W：由MDR-&gt;数据总线-&gt;数据单元<h3 id="控制部件"><a href="#控制部件" class="headerlink" title="控制部件"></a>控制部件</h3>产生控制信号(微命令)<br>CPU可使用两种控制部件组合逻辑控制器(硬件)和微程序控制器(软件)<h3 id="时序系统"><a href="#时序系统" class="headerlink" title="时序系统"></a>时序系统</h3>协调工作要有周期和节拍</li>
</ul>
</li>
<li>节拍是执行一步的所需时间(一个周期可以由多个节拍)</li>
<li>时序控制方式：<ul>
<li>同步控制方式<br>所有操作用统一的时序信号，各操作不存在控制信号的交互</li>
<li>异步控制方式<br>不受统一的时钟周期的约束，各部件之间采用异步应答的方式<h3 id="数据通络和控制通路"><a href="#数据通络和控制通路" class="headerlink" title="数据通络和控制通路"></a>数据通络和控制通路</h3>简单的常有ALU总线，复杂一点的分数据总线和地址总线</li>
</ul>
</li>
</ul>
<hr>
<h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><p>指令集有CISC(复杂指令集计算机)RISC(精简指令集计算机)<br>按地址结构可分为：三地址指令、二地址指令、一地址指令、零地址指令<br>操作码结构多设为可变字长指令</p>
<h3 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a><a href="https://dyinjin.github.io/2021/09/15/%E8%AF%BE/%E5%AF%BB%E5%9D%80/">寻址</a></h3><h3 id="指令的功能和类型"><a href="#指令的功能和类型" class="headerlink" title="指令的功能和类型"></a>指令的功能和类型</h3><p>现在大部分微机将指令分为；</p>
<ul>
<li>传输类指令</li>
<li>访存指令</li>
<li>I/O指令</li>
<li>算术运算指令</li>
<li>逻辑运算指令</li>
<li>程序控制类指令</li>
<li>处理机控制类指令<h2 id="加法器与运算部件"><a href="#加法器与运算部件" class="headerlink" title="加法器与运算部件"></a>加法器与运算部件</h2><h3 id="加法器及其进位逻辑"><a href="#加法器及其进位逻辑" class="headerlink" title="加法器及其进位逻辑"></a>加法器及其进位逻辑</h3><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635852841593.png" alt="enter description here"><br>Σi =（Ai ⊕ Bi）⊕ Ci-1<br>Ci = Ai Bi +（Ai ⊕ Bi）Ci-1 </li>
<li>串行加法器：如果每步只求一位和，将n位加分成n步实现</li>
<li>并行加法器：如果用n位全加器一步实现n位相加，即n位同步相加<ol>
<li>串行进位链</li>
<li>并行进位链</li>
<li>组内并行组间串行的进位链<h3 id="算术逻辑运算单元"><a href="#算术逻辑运算单元" class="headerlink" title="算术逻辑运算单元"></a>算术逻辑运算单元</h3><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635853320294.png" alt="ALU运算功能对照"><h2 id="x86架构模型机CPU设计"><a href="#x86架构模型机CPU设计" class="headerlink" title="x86架构模型机CPU设计"></a>x86架构模型机CPU设计</h2><h3 id="指令流程与微命令"><a href="#指令流程与微命令" class="headerlink" title="指令流程与微命令"></a><strong>指令流程与微命令</strong></h3>信息传输操作两大类：内部数据通路操作和外部访存操作</li>
</ol>
</li>
<li>数据通路操作<ol>
<li>ALU输入选择</li>
<li>ALU功能选择</li>
<li>移位器功能选择</li>
<li>CPU内部总线结果分配控制信号</li>
</ol>
</li>
<li>访存操作相关控制信号<br><strong>EMAR</strong>地址使能<br><strong>R/W</strong>控制主存读写模式<br><strong>EMDR</strong>数据使能<br><strong>SMDR</strong>打入(把数据总线上的数据置入寄存器MDR)<br><strong>SIR</strong>读指令写入<br>(W和EMDR基本绑定)<br>又分四个基本执行阶段：取指令FT、源操作ST、目的操作DT、执行ET<h4 id="MOV指令重点"><a href="#MOV指令重点" class="headerlink" title="MOV指令重点"></a><strong>MOV指令</strong>重点</h4><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790783406.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790799739.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790825197.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790847773.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790869631.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790896974.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790917941.png" alt="enter description here"><h3 id="组合逻辑控制"><a href="#组合逻辑控制" class="headerlink" title="组合逻辑控制"></a>组合逻辑控制</h3></li>
</ul>
<p><kbd>insert</kbd>切换输入模式（鼠标光标横竖）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统</title>
    <url>/2022/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="操作系统引论"><a href="#操作系统引论" class="headerlink" title="操作系统引论"></a>操作系统引论</h1><h2 id="目标和作用"><a href="#目标和作用" class="headerlink" title="目标和作用"></a>目标和作用</h2><p>目标：方便性、有效性、可扩展性、开放性<br>作用</p>
<ol>
<li>作为用户与计算机硬件系统之间的接口</li>
<li>操作系统引论作为计算机系统资源的管理者</li>
<li>实现了对计算机资源的抽象</li>
</ol>
<h2 id="发展过程"><a href="#发展过程" class="headerlink" title="发展过程"></a>发展过程</h2><p>人工操作方式、脱机输入输出方式<br>单批道处理系统<br>多批道处理系统（资源利用率高，系统吞吐量大，平均周转时间长，无交互能力）<br>分时系统（多路性、独立性、及时性、交互性）<br>实时系统（多路性、独立性、及时性、交互性、可靠性）<br>微机操作系统（单用户多用户）</p>
<h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><ul>
<li>并发<pre><code>**并发性**是指两个或多个事件在同一时间间隔内发生，而**并行性**是指两个或多个事件在同一时刻发生。
</code></pre>
</li>
<li>共享<pre><code>**资源共享**是指系统中的资源可供内存中多个并发执行的进程共同使用。一段时间内只允许一个进程访问的资源称为**临界资源**一个进程访问结束并释放系统资源后才允许另一进程对该资源访问的方式称为**互斥访问**
</code></pre>
</li>
<li>虚拟<pre><code>通过**空分复用**或**时分复用**技术将一条物理信道变为若干条逻辑信道的技术
</code></pre>
</li>
<li>异步<pre><code>进程的执行本身具有异步性（不可预知完成时间与顺序）所以要设计同步机制
</code></pre>
</li>
</ul>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="处理机管理功能"><a href="#处理机管理功能" class="headerlink" title="处理机管理功能"></a>处理机管理功能</h3><ul>
<li>进程控制</li>
<li>进程同步</li>
<li>进程通信</li>
<li>调度</li>
</ul>
<h3 id="存储器管理功能"><a href="#存储器管理功能" class="headerlink" title="存储器管理功能"></a>存储器管理功能</h3><ul>
<li>内存分配</li>
<li>内存保护</li>
<li>地址映射</li>
<li>内存扩充</li>
</ul>
<h3 id="I-O-设备管理功能"><a href="#I-O-设备管理功能" class="headerlink" title="(I/O)设备管理功能"></a>(I/O)设备管理功能</h3><ul>
<li>缓冲管理</li>
<li>设备分配</li>
<li>设备处理</li>
</ul>
<h3 id="文件管理功能"><a href="#文件管理功能" class="headerlink" title="文件管理功能"></a>文件管理功能</h3><ul>
<li>文件存储空间管理</li>
<li>目录管理</li>
<li>文件读写管理与保护</li>
</ul>
<h3 id="操作系统与用户之间的接口"><a href="#操作系统与用户之间的接口" class="headerlink" title="操作系统与用户之间的接口"></a>操作系统与用户之间的接口</h3><ul>
<li>用户接口（联机用户接口、脱机用户接口、程序接口）</li>
<li>程序接口</li>
</ul>
<h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><h3 id="无结构"><a href="#无结构" class="headerlink" title="无结构"></a>无结构</h3><p>程序紧凑，高效利用内存<br>但是随着系统的不断扩大，所设计出的操作系统就会变得既庞大又杂乱。<br>一方面会使编制的程序错误很多给调试工作带来困难<br>另一方面也使程序难以阅读和理解，增加了维护负担</p>
<h3 id="模块化结构"><a href="#模块化结构" class="headerlink" title="模块化结构"></a>模块化结构</h3><p>模块化OS由程序设计的模块化设计思想演变而来<br>衡量模块化设计的两个标准：内聚性、耦合性<br>优点：</p>
<ol>
<li>提高OS设计的正确性、可理解性和可维护性。</li>
<li>增强OS的可适应性。</li>
<li>加速OS开发过程。<br>问题：</li>
<li>最初模块接口规定难以满足实际需求</li>
<li>无序设计</li>
</ol>
<h3 id="分层式结构"><a href="#分层式结构" class="headerlink" title="分层式结构"></a>分层式结构</h3><p>将模块接口法中对模块的设计顺序由无序变为有序，自底向上分层设计<br>优点：</p>
<ol>
<li>易保证系统的正确性</li>
<li>易扩充和易维护性<br>缺点：</li>
<li>系统效率降低：单向依赖的层次使得必须建立层次之间的通信机制增加通信开销<h3 id="文件管理功能-文件管理功能"><a href="#文件管理功能-文件管理功能" class="headerlink" title="文件管理功能### 文件管理功能"></a>文件管理功能### 文件管理功能</h3></li>
</ol>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>1、设计现代OS的主要目标是什么？<br>方便性、有效性、可扩展性、开放性</p>
<p>6、试说明推动分时系统形成和发展的主要动力是什么。<br>满足人机交互需求，实现共享主机</p>
<p>8、为什么要引入实时操作系统？<br>更好的满足实时控制实时信息处理领域对时间控制的需求</p>
<p>10、试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较。<br>交互性：实时系统的交互性不像分时系统为终端用户提供数据和资源共享服务，而限于特定专用服务程序<br>及时性：分时系统的响应时间间隔通常为人们所能接受的1~3秒，实时系统由截至时间所确定通常为秒级到毫秒级<br>可靠性：实时系统相比分时系统要求更高的可靠性，所以采取多级容错措施保障系统的安全性</p>
<p>11、OS有几大特征？最基本的特征是什么？<br>并发性、共享性、虚拟性、异步性；并发性最基本</p>
<p>15、处理机管理有哪些主要功能？其主要任务是什么？<br>进程控制、进程同步、进程通信、调度<br>创建进程结束进程控制正在运行的进程、使多个进程有序同步进行、交换进程任务的信息、选择作业分配资源运行的作业调度和选择进程分配处理器设置现场执行的进程调度</p>
<p>16、存储器有哪些主要功能？其主要任务是什么？<br>内存分配、内存保护、地址映射、内存扩充<br>为程序分配内存空间、确保程序运行空间不干扰、将逻辑地址映射为物理地址、实现调用置换等功能</p>
<p>17、设备管理有哪些主要功能？其主要任务是什么？<br>缓冲管理、设备分配、设备处理<br>完成用户IO请求分配所需IO设备执行IO操作、提高CPU和IO设备的利用率提高IO速度方便用户使用</p>
<p>18、文件管理有哪些主要功能？其主要任务是什么？<br>文件存储空间管理、目录管理、文件读写管理与保护<br>分配外存空间提高外存利用率、为文件建立目录加以有效组织、根据用户请求读写外存数据、防止文件被非法窃取和受到破坏保障文件安全性#</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperledger Fabric官方文档</title>
    <url>/2022/01/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/1/</url>
    <content><![CDATA[<h1 id="（概念）"><a href="#（概念）" class="headerlink" title="（概念）"></a>（概念）</h1><h2 id="排序服务"><a href="#排序服务" class="headerlink" title="排序服务"></a>排序服务</h2><p>每个Fabric网络还包括一个<strong>排序服务</strong>。 </p>
<p>排序服务允许对等节点专注于验证交易并将它们提交到账本。 排序节点从客户那里收到<strong>认可</strong>的交易后，他们就交易顺序达成共识，然后添加区块。 这些区块之后被分配给添加这些区块到账本的对等节点。 排序节点还可以操作<strong>定义Fabric网络的功能</strong>的<strong>系统通道</strong>， 系统通道定义了哪个组织是该联盟的成员。</p>
<p>该示例网络使用一个<strong>单节点Raft排序服务</strong>，该服务由排序组织运行。 您可以看到在您机器上正在运行的排序节点<code>orderer.example.com</code>。 虽然测试网络仅使用单节点排序服务，一个真实的网络将有多个排序节点，由一个或多个多个排序者组织操作。 不同的排序节点将使用Raft共识算法达成跨交易顺序的共识网络。</p>
<h2 id="智能合约与链码"><a href="#智能合约与链码" class="headerlink" title="智能合约与链码"></a>智能合约与链码</h2><p>在Fabric中，智能合约作为链码以软件包的形式部署在网络上。 链码安装在组织的对等节点上，然后部署到某个通道，然后可以在该通道中用于认可交易和区块链账本交互。 在将链码部署到通道前，该频道的成员需要就链码定义达成共识，建立链码治理。 何时达到要求数量的组织同意后，链码定义可以提交给通道，并且可以使用链码了。<br>链码通过应用提交的交易来初始化以及管理账本状态。<br>链码通常用来处理网络中成员共同接受的业务逻辑，所以它可以被认为是“智能合约”。</p>
<h2 id="Fabric-链码生命周期"><a href="#Fabric-链码生命周期" class="headerlink" title="Fabric 链码生命周期"></a><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode_lifecycle.html">Fabric 链码生命周期</a></h2><p>Fabric 链码生命周期是一个过程，它允许多个组织在使用一个链码之前就如何操作达成一致。网络操作者可以使用 Fabric 生命周期来展开以下的任务：</p>
<ul>
<li>  <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode_lifecycle.html#install-and-define-a-chaincode">安装和定义链码</a></li>
<li>  <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode_lifecycle.html#upgrade-a-chaincode">升级链码</a></li>
<li>  <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode_lifecycle.html#deployment-scenarios">部署场景</a></li>
<li>  <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode_lifecycle.html#migrate-to-the-new-fabric-lifecycle">迁移到新的 Fabric 生命周期</a></li>
</ul>
<h1 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h1><h2 id="启动测试网络test-network"><a href="#启动测试网络test-network" class="headerlink" title="启动测试网络test-network"></a>启动测试网络test-network</h2><p><code>./network.sh down</code>删除先前运行的所有容器或工程<br><code>./network.sh up</code><br>此命令创建一个由两个对等节点和一个排序节点组成的Fabric网络。 运行<code>./network.sh up</code>时没有创建任何channel， 虽然我们将在后面的步骤实现。 如果命令执行成功，您将看到已创建的节点的日志：<br><img src="/2022/01/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/1/1638011400957.png" alt="enter description here"></p>
<h2 id="使用例程创建通道"><a href="#使用例程创建通道" class="headerlink" title="使用例程创建通道"></a>使用例程创建通道</h2><p>您可以使用network.sh脚本在Org1和Org2之间创建通道并加入他们的对等节点。 运行以下命令以创建一个默认名称为“ mychannel”的通道：<br><code>./network.sh createChannel</code><br>您也可以使用channel标志创建具有自定义名称的通道。 作为一个例子，以下命令将创建一个名为channeljin的通道：<br><code>./network.sh createChannel -c channeljin</code></p>
<h2 id="在通道启动一个链码"><a href="#在通道启动一个链码" class="headerlink" title="在通道启动一个链码"></a>在通道启动一个链码</h2><p><code>./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-java -ccl java</code>或<br><code>./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go</code></p>
<h2 id="后面网络交互就照着做"><a href="#后面网络交互就照着做" class="headerlink" title="后面网络交互就照着做"></a><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/test_network.html">后面网络交互就照着做</a></h2><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>既然您已经使用测试网络在您的本地计算机上部署了Hyperledger Fabric，您可以使用教程来开始开发自己的解决方案：</p>
<ul>
<li>  使用<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/deploy_chaincode.html">将智能合约部署到通道</a> 教程了解如何来将自己的智能合约部署到测试网络。</li>
<li>  访问<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/write_first_app.html">编写您的第一个应用程序</a> 教程了解如何从您的客户端程序使用Fabric SDK提供的API调用智能合约。</li>
<li>  如果您准备将更复杂的智能合约部署到网络，请跟随<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/tutorial/commercial_paper.html">商业票据教程</a> 探索两个组织使用区块链网络进行商业票据交易的用例。</li>
</ul>
<p>您可以在<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/tutorials.html">教程</a>页上找到Fabric教程的完整列表。</p>
<h2 id="用CA建立网络"><a href="#用CA建立网络" class="headerlink" title="用CA建立网络"></a>用CA建立网络</h2><p>默认情况下，脚本使用cryptogen工具创建证书和密钥。(比如以上)<br>测试网络脚本还提供了使用证书颁发机构（CA）的网络的启动选项。 在产品网络中，每个组织操作一个CA（或多个中间CA）来创建属于他们的组织身份。 所有由该组织运行的CA创建的身份享有相同的组织信任根源。<br><code>./network.sh up -ca</code><br><img src="/2022/01/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/1/1638034821740.png" alt="enter description here"><br>测试网络使用Fabric CA客户端以每个组织的CA注册节点和用户身份。 之后这个脚本使用enroll命令为每个身份生成一个MSP文件夹。 MSP文件夹包含每个身份的证书和私钥，以及在运营CA的组织中建立身份的角色和成员身份。<br>检查Org1管理员用户的MSP文件夹：<code>tree organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/</code><br><img src="/2022/01/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/1/1638034943943.png" alt="enter description here"></p>
<h2 id="每次记得关闭docker容器"><a href="#每次记得关闭docker容器" class="headerlink" title="每次记得关闭docker容器"></a>每次记得关闭docker容器</h2><p>直接用<code>./network.sh down</code></p>
<h1 id="使用configtx-yaml创建通道配置"><a href="#使用configtx-yaml创建通道配置" class="headerlink" title="使用configtx.yaml创建通道配置"></a><a href="https://www.bilibili.com/video/BV1nK4y1K7s6">使用configtx.yaml创建通道配置</a></h1><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/cryptogen.html">cryptogen</a><br><code>cryptogen</code> 是用来生成 Hyperledger Fabric 密钥材料的工具。它为测试提供了一种预配置网络的工具。通常它不应使用在生产环境中。</p>
<p> 最后跑的命令2.2的示例<br><code>configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block -channelID fabric-channel  configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel  configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP  configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP</code><br>2.3的示例<br><code>configtxgen -profile TwoOrgsApplicationGenesis -outputBlock ./channel-artifacts/genesis.block -channelID fabric-channel</code></p>
<h1 id="部署节点"><a href="#部署节点" class="headerlink" title="部署节点"></a>部署节点</h1><p> 使用docker的话这些配置文件会有一个默认的内置在docker hyperledger fabric官方容器中<br> 即一般测试会写一个docker-compose.yaml的配置文件来用docker创建节点<br> 否则一般有：</p>
<h2 id="创建一个-peer-节点"><a href="#创建一个-peer-节点" class="headerlink" title="创建一个 peer 节点"></a>创建一个 peer 节点</h2><p>在创建 peer 节点之前，你需要为 peer 节点定制配置文件。在 Fabric 中，这个文件叫做 <code>core.yaml</code>。</p>
<h2 id="创建一个排序节点"><a href="#创建一个排序节点" class="headerlink" title="创建一个排序节点"></a>创建一个排序节点</h2><p>与创建 peer 节点不同，你将需要创建一个创世纪块（或者引用已经创建的块，如果将排序节点添加到现有的排序服务中），并在启动排序节点之前指定其路径。<br>在Fabric中，这个用于排序节点的配置文件称为 <code>orderer.yaml</code>。</p>
<h2 id="最后部署链码。。。"><a href="#最后部署链码。。。" class="headerlink" title="最后部署链码。。。"></a>最后部署链码。。。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># education程序解读</span><br><span class="line"> * chaincode文件存放链码及相关依赖</span><br><span class="line"> * fixtures文件存放docker的配置文件（docker-compose.yaml）通道配置文件（configtx.yaml）网络配置文件（crypto-config.yaml）</span><br><span class="line"> * img作者示例图片与网页资源图片</span><br><span class="line"> * sdkinit</span><br><span class="line"> * service</span><br><span class="line"> * web 基本的网页应用前后端</span><br></pre></td></tr></table></figure>
<h1 id="（记）"><a href="#（记）" class="headerlink" title="（记）"></a>（记）</h1><h2 id="docker-compose用docker启动节点"><a href="#docker-compose用docker启动节点" class="headerlink" title="docker compose用docker启动节点"></a>docker compose用docker启动节点</h2><p>在有docker-compose.yaml的地方<br><code>docker-compose up</code>即可</p>
<h2 id="删除container和image"><a href="#删除container和image" class="headerlink" title="删除container和image"></a><a href="https://www.cnblogs.com/laonicc/p/11143562.html">删除container和image</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls -a #查看所有container</span><br><span class="line">docker rm xxxxxxx #通过container id 删除container，container id可以不写全</span><br><span class="line">docker ps -a #通过docker提供的commands 可以做到manager commands的效果，还简便些。</span><br><span class="line">docker rm $(docker container ls -qa) #批量删除</span><br><span class="line"><span class="meta">#</span><span class="bash">删除前先要STOP</span></span><br><span class="line">docker stop xxxx</span><br><span class="line"></span><br><span class="line">docker image ls #查看所有image</span><br><span class="line">docker rmi xxxxxxx #通过image id 删除</span><br></pre></td></tr></table></figure>
<p><img src="/2022/01/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/1/1638034348459.png" alt="enter description here"><br><code> docker rm -f $(docker ps -aq)  docker rmi -f $(docker images -q)</code></p>
<h2 id="进入容器内bash"><a href="#进入容器内bash" class="headerlink" title="进入容器内bash"></a>进入容器内bash</h2><p> <code>docker exec -it cli1 bash</code></p>
<h2 id="go代理"><a href="#go代理" class="headerlink" title="go代理"></a>go代理</h2><p> <code>go env -w GOPROXY=https://goproxy.cn,direct</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言简易区块链数据结构</title>
    <url>/2021/10/10/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/C%E8%AF%AD%E8%A8%80%E7%AE%80%E6%98%93%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    <content><![CDATA[<h2 id="哈希简谈（sha-256）"><a href="#哈希简谈（sha-256）" class="headerlink" title="哈希简谈（sha_256）"></a>哈希简谈（sha_256）</h2><p>就是对任意长度字符数据都会生成唯一的长度为256bit长的哈希值，且不可逆的一种加密方式<br><code>哈希函数，又称散列算法，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（或哈希值）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。</code></p>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>主要参照：<a href="https://blog.csdn.net/weixin_44046447/article/details/111966999">简易区块链C语言实现</a><br>博主讲得很清楚，简洁易懂，适合初学区块链</p>
<h2 id="区块链数据结构"><a href="#区块链数据结构" class="headerlink" title="区块链数据结构"></a>区块链数据结构</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214586681.png" alt="1633843973844"><br>具体实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> byte[<span class="number">104</span>];<span class="comment">//与以下结构体等长，利用了联合的特性</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sha_all[<span class="number">32</span>];<span class="comment">//对本区块head、body进行SHA256运算（且最终保证满足前导0要求）的结果</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> nonce;<span class="comment">//随机数，目的是在不改变其它有意义数据的情况下使每次哈希结果改变直到最后能够生成满足要求前导0</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sha_prev[<span class="number">32</span>];<span class="comment">//保存上一个区块的sha_all</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sha_block[<span class="number">32</span>];<span class="comment">//对本区块body进行SHA256运算的结果，可视为经过不可逆加密后的数据</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;block_head;<span class="comment">//区块链核心，目的是保证不可篡改性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> body[<span class="number">1000</span>];</span><br><span class="line">&#125;block_body;<span class="comment">//实际数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    block_head head;</span><br><span class="line">    block_body body; </span><br><span class="line">&#125;block;</span><br></pre></td></tr></table></figure>
<p>总之HEAD是核心，nonce的意义就在满足前导0要求，而前导0（不一定要求为0）的位数某种程度上控制了哈希运算的加密难度（复杂度）（比特币要靠挖就是算这个费算力），正因为有此不定的数据存在，使得哈希运算次数不定，则即使哈希加密可逆也无法解密出整个区块链保存的数据。又由于sha_all关联于sha_prev与sha_block，则任意修改区块链中的body数据，会使得sha_block不同，进而sha_all不同，直接影响了sha_prev无法衔接，可轻易识别非法修改数据。</p>
<p>这里前导0只要求两位（不然算的慢）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_sha</span><span class="params">(BYTE text[<span class="number">32</span>])</span></span>&#123;  <span class="comment">// 检验是否为前导0</span></span><br><span class="line">    <span class="keyword">if</span>(text[<span class="number">0</span>]==<span class="number">0x00</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化程序"><a href="#初始化程序" class="headerlink" title="初始化程序"></a>初始化程序</h2><p>基本上掌握初始化原理就差不多弄得懂了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    block_head* gen=<span class="built_in">malloc</span>(<span class="number">104</span>);</span><br><span class="line">    block_body gbody;</span><br><span class="line">    <span class="built_in">strcpy</span>(gbody.body,<span class="string">&quot;helloworldjin&quot;</span>);<span class="comment">//创世信息，后面的区块就在此存数据了</span></span><br><span class="line">    <span class="built_in">memset</span>(gen-&gt;byte,<span class="number">0</span>,<span class="number">104</span>);<span class="comment">//初始化0</span></span><br><span class="line">    sha256_main(gbody.body,<span class="built_in">strlen</span>(gbody.body),gen-&gt;sha_block);<span class="comment">//将body信息哈希一次</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(gen-&gt;nonce&lt;<span class="number">0xffffffffffffffff</span>)&#123;<span class="comment">//一直哈希直到满足前导</span></span><br><span class="line">        BYTE text[<span class="number">10200</span>];<span class="comment">//暂存块头块体</span></span><br><span class="line">        read_head_body(text,gen,gbody);<span class="comment">//块头快体写入</span></span><br><span class="line"></span><br><span class="line">        BYTE buf[<span class="number">32</span>];<span class="comment">//暂存加密后的块头块体</span></span><br><span class="line">        <span class="keyword">size_t</span> textsize=<span class="number">104</span><span class="number">-32</span>+<span class="built_in">strlen</span>(gbody.body);<span class="comment">//(注意要减去32 sha_all)</span></span><br><span class="line">        sha256_main(text,textsize,buf);<span class="comment">//text存的块头快体一起哈希</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;当前nonce为: %lu     &quot;</span>,gen-&gt;nonce);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;前8bit为:%02x\n&quot;</span>,buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(check_sha(buf))&#123;<span class="comment">// 检查是否为前导0</span></span><br><span class="line">		<span class="comment">//成功则记录区块</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;创世块nonce为：%lu\n&quot;</span>,gen-&gt;nonce);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//文件写入处理</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span>* filename = <span class="string">&quot;genesis.block&quot;</span>;</span><br><span class="line">            FILE *fp = fopen(filename,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++) &#123;</span><br><span class="line">                gen-&gt;sha_all[i] = buf[i];<span class="comment">//加密后的块头块体哈希值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">104</span>;i++) &#123;   <span class="comment">// 写入区块头（包含加密后的本块块头块体哈希值，nonce随机数，sha_prev上个区块加密后的块头块体哈希值，sha_block本块数据哈希值）</span></span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%c&quot;</span>,gen-&gt;byte[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(gbody.body);i++) &#123;  <span class="comment">// 写入区块体（包含直接的数据）</span></span><br><span class="line">                <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%c&quot;</span>,gbody.body[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            fclose(fp);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        gen-&gt;nonce++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考虑加入时间戳是否就是在最后通过前导检测后，写入时多写一个时间关联数据，意义类似nonce随机数？</p>
<h2 id="再分析一个函数"><a href="#再分析一个函数" class="headerlink" title="再分析一个函数"></a>再分析一个函数</h2><p>找最后一个块的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">block <span class="title">find_last_block</span><span class="params">()</span></span>&#123;</span><br><span class="line">    block block_list[<span class="number">100</span>];<span class="comment">//这个可以随便扩</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filePath = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> size = read_dir_block(block_list,filePath);   <span class="comment">// 一共size个区块（简单根据文件名数），这里不只是算了个数字，还将每个文件数据导入到了block_list[i]</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no block file\n&quot;</span>);<span class="comment">//这个随便了</span></span><br><span class="line">        block tmp;</span><br><span class="line">        <span class="built_in">memset</span>(tmp.head.byte, <span class="number">0</span>, <span class="number">104</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 然后给所有区块弄一个拓扑排序</span></span><br><span class="line">    <span class="comment">// 先遍历找第一个 block</span></span><br><span class="line">    block topo[size];</span><br><span class="line">    BYTE hash[<span class="number">32</span>] = &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;<span class="comment">//创世区块的前导（这里如果确定中间某一个块的前导值也可以中途开找）</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;size;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = <span class="built_in">memcmp</span>(hash,block_list[i].head.sha_prev,<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmp == <span class="number">0</span>)&#123;   <span class="comment">// equal， this is the first block</span></span><br><span class="line">            copy(&amp;topo[<span class="number">0</span>],&amp;block_list[i]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">// topo[0] 为创世纪块</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//双循环链接区块</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;size;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;size;j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = <span class="built_in">memcmp</span>(topo[i<span class="number">-1</span>].head.sha_all,block_list[j].head.sha_prev,<span class="number">32</span>);</span><br><span class="line">            <span class="comment">// 遍历所有区块，prev == topo[i-1] 的便是对应 topo[i]</span></span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                copy(&amp;topo[i],&amp;block_list[j]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> topo[size<span class="number">-1</span>];<span class="comment">//返回最后一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自然可以简单修改为找对应需要数据区块的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">block <span class="title">find_block</span><span class="params">(<span class="keyword">char</span>* content)</span></span>&#123;        <span class="comment">// 读各个区块</span></span><br><span class="line">    block block_list[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filePath = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> size = read_dir_block(block_list,filePath);   <span class="comment">// 一共 size 个区块</span></span><br><span class="line">    <span class="comment">// 给所有区块弄一个拓扑排序</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no block file\n&quot;</span>);</span><br><span class="line">        block tmp;</span><br><span class="line">        <span class="built_in">memset</span>(tmp.head.byte, <span class="number">0</span>, <span class="number">104</span>);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先找第一个 block</span></span><br><span class="line">    block topo[size];</span><br><span class="line">    BYTE hash[<span class="number">32</span>] = &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;size;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = <span class="built_in">memcmp</span>(hash,block_list[i].head.sha_prev,<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmp == <span class="number">0</span>)&#123;   <span class="comment">// equal， this is the first block</span></span><br><span class="line">            copy(&amp;topo[<span class="number">0</span>],&amp;block_list[i]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// topo[0] 为创世纪块</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;size;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;size;j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = <span class="built_in">memcmp</span>(topo[i<span class="number">-1</span>].head.sha_all,block_list[j].head.sha_prev,<span class="number">32</span>);</span><br><span class="line">            <span class="comment">// 遍历所有区块，找到 prev == topo[i-1] 的，以此来确定 topo[i]</span></span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                copy(&amp;topo[i],&amp;block_list[j]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//从链接完的区块链topo排序中找</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start find *****************\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nbody:%s\n&quot;</span>,topo[i].body.body);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(topo[i].body.body,content))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n****finded****\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> topo[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可能复杂了，但是改的简单）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>DAY02视频</title>
    <url>/2022/01/23/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/DAY02%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h1 id="概念补充"><a href="#概念补充" class="headerlink" title="概念补充"></a>概念补充</h1><p>hyperleger fabric的三个重要角色</p>
<ul>
<li>client<br>客户端，用来发起transaction process（提案），可以是cli、node sdk或者Java sdk</li>
<li>peers<br>最常见的节点，维护了ledger的副本，记录验证同步数据</li>
<li>orderer<br>接收背书后的请求，排序生成区块，最后交给peer节点</li>
</ul>
<h2 id="共识的达成"><a href="#共识的达成" class="headerlink" title="共识的达成"></a>共识的达成</h2><p>fabric的共识达成通过三个步骤</p>
<ol>
<li>客户端发起提案，每个 peer 节点模拟执行，进行背书</li>
<li>orderer 节点进行排序</li>
<li>orderer 节点验证后生成区块交给 peer 节点去 apply<br>三个步骤保证了区块链数据的一致性和正确性<h2 id="transaction流程"><a href="#transaction流程" class="headerlink" title="transaction流程"></a>transaction流程</h2>1、sdk发起transaction proposal给peers进行背书(根据背书策略背书)<br>2、背书节点模拟执行，返回签名的执行结果读写集(RW sets)交还给cli，sdk根据背书策略确定请求是否合法<br>3、cli收集到读写集后给orderer节点进行线性排序<br>4、orderer验证、排序、生成区块，再给所有peers进行ledger数据更新<br>5、peers会验证orderer的读写集与当前世界状态是否一致来更新ledger，世界状态也随之变化<br>6、最后sdk收到peers世界状态改变后的返还信息确认账本更新完成<h2 id="orderer节点"><a href="#orderer节点" class="headerlink" title="orderer节点"></a>orderer节点</h2>解决双花问题（把并行事件线性排序）<br>hyperledger的orderer类似中心机构出票的机制，所以效率很高没有挖矿的概念（为什么不挖矿1#14:00）（orderer节点防挂1#16:50）<h2 id="排序机制"><a href="#排序机制" class="headerlink" title="排序机制"></a>排序机制</h2><h3 id="solo"><a href="#solo" class="headerlink" title="solo"></a>solo</h3>单一 orderer 节点用的玩具级别的排序服务，单一 orderer 服务器．采用 solo 方式<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3>卡夫卡是阿帕奇的开源流式消息处理服务平台．提供非拜占庭错误（故障错误）的容错性即挂掉的排序节点不会返回误导性数据<h3 id="SBFT"><a href="#SBFT" class="headerlink" title="SBFT"></a>SBFT</h3>简单拜占庭容错，容忍集群中的 orderer 节点有不超过1/3的错误<h2 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h2>通道相当于hyperledger的子网络，不同channels相互独立，可拥有不同的sdk/ledger/peers<br>orderer可以看到所有channel的数据<h2 id="state-db世界状态数据库"><a href="#state-db世界状态数据库" class="headerlink" title="state db世界状态数据库"></a>state db世界状态数据库</h2>世界状态被存储在状态数据库里面。chaincode执行后stub.putState(key, Bufer.from(value))这些信息都是被以 key,value 的形式存放到状态数据库中通过 stub.getState(key) 的方式读出来。<br>hyperledger fabric 支持两种模式的状态数据库：</li>
</ol>
<ul>
<li>levelDB 文件形式存储，不易查看管理．</li>
<li>couchDB 支持福查询，独立的容器数据库<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2>补充chaincode就是商业逻辑，任何更新账本的操作都智能通过智能合约来完成<h2 id="MSP-管理服务提供商"><a href="#MSP-管理服务提供商" class="headerlink" title="MSP(管理服务提供商)"></a>MSP(管理服务提供商)</h2>使用CA来颁发证书进行认证，默认fabric-ca api</li>
</ul>
<h1 id="实战-nodejs"><a href="#实战-nodejs" class="headerlink" title="实战(nodejs)"></a>实战(nodejs)</h1><h2 id="定义资产结构json"><a href="#定义资产结构json" class="headerlink" title="定义资产结构json"></a>定义资产结构json</h2><p>以下伪代码变量名直接使用中文</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var 一次成绩 = &#123;</span><br><span class="line">学生姓名: <span class="string">&quot; &quot;</span>,</span><br><span class="line">学生学号uuid: <span class="string">&quot; &quot;</span>,</span><br><span class="line">考试科目: <span class="string">&quot; &quot;</span>,</span><br><span class="line">考试号uuid:<span class="string">&quot; &quot;</span>,</span><br><span class="line">信息修改者(即阅卷人):<span class="string">&quot; &quot;</span>,</span><br><span class="line">阅卷者uuid:<span class="string">&quot;&quot;</span>,</span><br><span class="line">卷面总成绩: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">卷面详细成绩1:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">卷面详细成绩2:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">卷面详细成绩3:<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之类</p>
<h2 id="创建基本智能合约框架"><a href="#创建基本智能合约框架" class="headerlink" title="创建基本智能合约框架"></a>创建基本智能合约框架</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">const shim = require (&#x27; fabric-shim &#x27;);<span class="comment">//nodejs依赖</span></span><br><span class="line">const util = require (&#x27;util&#x27;);</span><br><span class="line">const Chaincode = class&#123;</span><br><span class="line">	<span class="comment">//初始化智能合约的方法</span></span><br><span class="line">	async Init (stub) &#123;</span><br><span class="line">		console.info (&#x27;Instantiated chaincode&#x27;);</span><br><span class="line"> 		return shim.success ();</span><br><span class="line">	&#125;</span><br><span class="line">	shim.start( new Chaincode ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="invoke-调用-函数"><a href="#invoke-调用-函数" class="headerlink" title="invoke(调用)函数"></a>invoke(调用)函数</h2><p>即如何调用函数的异常处理机制</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">async Invoke (stub)&#123;</span><br><span class="line">	let ret = stub.getFunctionAndParameters();<span class="comment">//获取函数和参数</span></span><br><span class="line">	console.info( ret );</span><br><span class="line">	let method = this [ ret.fcn ];</span><br><span class="line">	if (! method )&#123;</span><br><span class="line">		console.error(&#x27;找不到要调用的函数，函数名:’+ ret.fcn);</span><br><span class="line">		throw new Error(&#x27;找不到要调用的函数，函数名:’+ ret.fcn);</span><br><span class="line">	&#125;</span><br><span class="line">	fry &#123;</span><br><span class="line"> 		let payload = await method ( stub ,ret.params );<span class="comment">//直接调用函数，获取返回值 </span></span><br><span class="line">		return shim.success (payload );</span><br><span class="line">	&#125; catch (err)&#123; </span><br><span class="line">		console . log(err);</span><br><span class="line">		return shim.error(err);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="具体业务函数"><a href="#具体业务函数" class="headerlink" title="具体业务函数"></a>具体业务函数</h2><p>如：查找</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">async query(stub,args)&#123;</span><br><span class="line">	if (args.length!=1)&#123;</span><br><span class="line">	throw new Error(&#x27;错误调用参数&#x27;);</span><br><span class="line">	&#125;</span><br><span class="line">	let number = args[<span class="number">0</span>];</span><br><span class="line">	</span><br><span class="line">	let asBytes = await stub.getState(number);</span><br><span class="line">	if (!asBytes || asBytes.toString().length&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">	throw new Error(asBytes + &#x27;不存在&#x27;);</span><br><span class="line">	&#125;</span><br><span class="line">	console.log(asBytes.toString());</span><br><span class="line">	return asBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化账本initledger(单独写具体的init)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">async initLedger(stub,args)&#123;</span><br><span class="line">	console.info(&#x27;开始初始化账本&#x27;);</span><br><span class="line">	let grdes=[];</span><br><span class="line">	grades.push(&#123;</span><br><span class="line">		学生姓名: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">		考试科目: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">		卷面总成绩: <span class="string">&quot;0&quot;</span></span><br><span class="line">	&#125;);</span><br><span class="line">	grades.push(&#123;</span><br><span class="line">		学生姓名: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">		考试科目: <span class="string">&quot;456&quot;</span>,</span><br><span class="line">		卷面总成绩: <span class="string">&quot;0&quot;</span></span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	for (let i = <span class="number">0</span>;i &lt; grdes.lenth;i++)&#123;</span><br><span class="line">		await stub.putState(&#x27;GRADE&#x27; + i,Buffer.from(JSON.stringify(grades[i])));</span><br><span class="line">		console.info(&#x27;添加&#x27;,grades[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	console.info(&#x27;结束初始化&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">async recordGrade(stub,args)&#123;</span><br><span class="line">	console.info(&#x27;开始记录&#x27;);</span><br><span class="line">	if (args.length !=4)&#123;</span><br><span class="line">		throw new Error(&#x27;需要四个参数：ID,学生姓名,考试科目,卷面总成绩‘);</span><br><span class="line">	&#125;</span><br><span class="line">	var grade = &#123;</span><br><span class="line">		学生姓名: args[<span class="number">1</span>],</span><br><span class="line">		考试科目: args[<span class="number">2</span>],</span><br><span class="line">		卷面总成绩: args[<span class="number">3</span>]</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	await stub.putState(args[<span class="number">0</span>],Buffer.from(JSON.stringify(grade)));</span><br><span class="line">	console.info(&#x27;记录成功&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看所有：<br>修改：</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>fabric区块链开发正式记录</title>
    <url>/2022/03/26/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/fabric%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E6%AD%A3%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链简单成绩系统实现</title>
    <url>/2022/03/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/qkledu/</url>
    <content><![CDATA[<p>参考<br><a href="https://blog.csdn.net/qq_39200980?type=blog">从0到1：Hyperledger Fabric开发精要【最系统】</a><br><a href="https://blog.csdn.net/lvyibin890?type=blog">hubwiz私人博客</a><br><a href="http://blog.hubwiz.com/categories/Hyperledger-Fabric/">CSDN TLpigff博客</a><br><a href="https://www.chaindesk.cn/witbook/11/217">CSDN 烟火不完美博客</a></p>
<p><code>github.com/hyperledger/fabric/core/chaincode/shim</code><br><code>github.com/hyperledger/fabric/protos/peer</code><br>改为<br><code>github.com/hyperledger/fabric-chaincode-go/shim</code><br><code>github.com/hyperledger/fabric-protos-go/peer</code></p>
<p>报错：<code>undefined:discovery.ChaincodeCall</code><br>go.mod中<br><code>github.com/hyperledger/fabric-protos-go v0.0.0-20211006172752-14f4318ce71c</code><br>改为<br><code>github.com/hyperledger/fabric-protos-go v0.0.0-20200707132912-fee30f3ccd23</code></p>
<h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><p>以目录为检索结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│  config.yaml</span><br><span class="line">│  main.go//重点，执行入口</span><br><span class="line">│  </span><br><span class="line">├─chaincode</span><br><span class="line">│  │  edu.go//业务层重点</span><br><span class="line">│  │  go.mod</span><br><span class="line">│  │  go.sum</span><br><span class="line">│  └─vendor</span><br><span class="line">│</span><br><span class="line">├─fixtures</span><br><span class="line">│  │  configtx.yaml//网络层重点</span><br><span class="line">│  │  crypto-config.yaml//网络层重点</span><br><span class="line">│  │  docker-compose.yaml//网络层重点</span><br><span class="line">│  ├─channel-artifacts    </span><br><span class="line">│  └─crypto-config </span><br><span class="line">│</span><br><span class="line">├─sdkInit</span><br><span class="line">│      integration.go//重点</span><br><span class="line">│      sdkInfo.go//重点</span><br><span class="line">│      sdkSetting.go//重点</span><br><span class="line">│</span><br><span class="line">├─service</span><br><span class="line">│      domain.go//业务层重点</span><br><span class="line">│      eduService.go//业务层重点</span><br><span class="line">│</span><br><span class="line">└─web//常见go网页应用工程MVC模式</span><br><span class="line">    │  webServer.go//各种http.HandleFunc</span><br><span class="line">    ├─controller    </span><br><span class="line">    ├─static      </span><br><span class="line">    └─tpl</span><br></pre></td></tr></table></figure>

<h2 id="fixtures"><a href="#fixtures" class="headerlink" title="fixtures"></a>fixtures</h2><p>三种配置文件、根据配置文件生成的组织结构以及基础区块</p>
<h3 id="crypto-config-yaml"><a href="#crypto-config-yaml" class="headerlink" title="crypto-config.yaml"></a>crypto-config.yaml</h3><p>用于生成相关组织的私钥和证书<br>Fabric 中会有两种类型的公私钥和证书</p>
<ul>
<li>  给节点之间通讯安全而准备的TLS证书</li>
<li>  用户登录和权限控制的用户证书。</li>
</ul>
<p>配置参考<a href="https://blog.csdn.net/lvyibin890/article/details/106213960">crypto-config配置参考</a></p>
<h3 id="configtx-yaml"><a href="#configtx-yaml" class="headerlink" title="configtx.yaml"></a>configtx.yaml</h3><p>configtx.yaml主要用来配置fabric的组织结构，通道及锚节点的配置。它主要完成以下几个功能：</p>
<ul>
<li>生成启动 Orderer 需要的创世区块orderer.block(genesis.block)</li>
<li>创建应用通道所需的配置交易文件</li>
<li>生成组织锚节点更新配置交易文件</li>
</ul>
<p>配置参考<a href="https://blog.csdn.net/lvyibin890/article/details/106217716?spm=1001.2014.3001.5502">configtx配置参考</a><br>之后可以使用configtxgen进行生成操作</p>
<h3 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h3><p>用以配置fabric网络的相关容器<br>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。<br>fabric区块链中多使用docker来创建虚拟容器</p>
<h2 id="chaincode"><a href="#chaincode" class="headerlink" title="chaincode"></a>chaincode</h2><p>链码，合约，或者这里我们理解为接口API<br>是在可执行代码中定义不同组织之间业务规则的代码<br>是业务逻辑中需要的组织交互逻辑而不是全部业务逻辑</p>
<h2 id="sdkinit"><a href="#sdkinit" class="headerlink" title="sdkinit"></a>sdkinit</h2><p>这一块结合main.go主函数理解，主要用于初始化启动SDK</p>
<h2 id="按执行顺序"><a href="#按执行顺序" class="headerlink" title="按执行顺序"></a>按执行顺序</h2><p>.sh脚本内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker rm -f $(sudo docker ps -aq)</span><br><span class="line">sudo docker network prune</span><br><span class="line">sudo docker volume prune</span><br><span class="line">删除可能的网络与容器</span><br><span class="line">cd fixtures &amp;&amp; docker-compose up -d</span><br><span class="line">启动docker容器（按fixtures配置）</span><br><span class="line">cd ..</span><br><span class="line">sudo rm education</span><br><span class="line">go build</span><br><span class="line">编译主函数</span><br><span class="line">./education</span><br><span class="line">执行</span><br></pre></td></tr></table></figure>

<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>sdkInit.Setup<br>包含</p>
<ul>
<li>fabsdk.New</li>
<li>sdk.Context</li>
</ul>
<p>主要工作：初始化SDK</p>
<h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>sdkInit.CreateAndJoinChannel<br>包含</p>
<ul>
<li>createChannel</li>
<li>org.OrgResMgmt.JoinChannel</li>
</ul>
<p>主要工作：创建通道并将组织加入通道</p>
<h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>sdkInit.CreateCCLifecycle<br>分为：</p>
<ul>
<li>打包智能合约</li>
<li>安装智能合约</li>
<li>“认可”智能合约(Approve)</li>
<li>智能合约初始化</li>
</ul>
<p>主要工作：智能合约上链与初始化</p>
<h3 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h3><p>service.InitService<br>包含</p>
<ul>
<li>sdk.ChannelContext</li>
<li>channel.New</li>
</ul>
<p>主要功能：创建通道客户端实例。<br>通道客户端用于查询链码，执行链码，注册/取消特定通道上的链码事件。</p>
<h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>serviceSetup.SaveEdu<br>进行交易实验（添加信息）<br><strong>可跳过</strong></p>
<h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>serviceSetup.FindEduInfoByEntityID<br>进行交易实验（查询信息）<br><strong>可跳过</strong></p>
<h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(&quot;第七步&quot;)</span><br><span class="line">app := controller.Application&#123;</span><br><span class="line">	Setup: serviceSetup,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<h3 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(&quot;第八步&quot;)</span><br><span class="line">web.WebStart(app)</span><br></pre></td></tr></table></figure>
<p>建立服务网站</p>
<h3 id="怎么调用链码的"><a href="#怎么调用链码的" class="headerlink" title="怎么调用链码的"></a>怎么调用链码的</h3><p><code>req := channel.Request&#123;ChaincodeID: t.ChaincodeID, Fcn: &quot;addEdu&quot;, Args: [][]byte&#123;b, []byte(eventID)&#125;&#125;</code><br>用这种语句在GO中调用链码写入信息</p>
<h3 id="couchDB"><a href="#couchDB" class="headerlink" title="couchDB"></a>couchDB</h3><p>fabric支持的唯二数据库，是一个NoSQL文档存储数据库。<br>它使用JSON存储数据（文档），使用http协议为api访问文档，使用Web浏览器查询索引。</p>
<h3 id="问题：为什么老是运行的以前的链码？"><a href="#问题：为什么老是运行的以前的链码？" class="headerlink" title="问题：为什么老是运行的以前的链码？"></a>问题：为什么老是运行的以前的链码？</h3><p>太大意了！<br><img src="/2022/03/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/qkledu/1647281435396.png"><br>已经将文件命名为5edu了，却没有改对应路径QAQ</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链具体深入</title>
    <url>/2022/03/26/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B7%E4%BD%93%E6%B7%B1%E5%85%A5/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="链码事件"><a href="#链码事件" class="headerlink" title="链码事件"></a>链码事件</h2><p>Hyperledger Fabric采用异步通信的模式来进行开发，可以在链码里面定义某些事件，然后通过应用程序去监听，当某个事件被触发的时候，就可以执行预先设定好的回调函数了<br>具体体现在cc的invoke</p>
<h2 id="账本与通道"><a href="#账本与通道" class="headerlink" title="账本与通道"></a>账本与通道</h2><p>账本是通过通道（channel）进行隔离的，这种隔离不仅体现在逻辑上，在物理上也是进行分隔的。</p>
<h2 id="智能合约与交易的关系"><a href="#智能合约与交易的关系" class="headerlink" title="智能合约与交易的关系"></a>智能合约与交易的关系</h2><p>智能合约相当于函数的声明与定义，而交易相当于函数的一次调用</p>
<h2 id="身份"><a href="#身份" class="headerlink" title="身份"></a>身份</h2><p>Hyperledger Fabric利用的PKI体系（公钥架构，在网络中提供安全通信的技术，让HTTP变成HTTPS）和CA系统，提供了包括注册登录，身份认证等待功能。<strong>这里的注册登录是指能与区块链底层进行交互的一个身份的管理</strong>，一个应用程序可能只需要一个身份就可以完成所有与区块链底层交互的功能。<br>注册登记，客户端向CA机构表名自己的身份，然后从CA机构获取相应的证书，用于后续的操作，比如交易提案，交易提交等等（CA在区块链外，可以是一个第三方CA）</p>
<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>区块链这样的典型的分布式系统中，他保证每一个节点都有一份完整的数据，都可以对外提供完整的服务。因此区块链是弱化了一致性C，正因为区块链弱化了一致性，所以需要更好的共识算法保证一致性。</p>
<h2 id="PEER"><a href="#PEER" class="headerlink" title="PEER"></a>PEER</h2><p>Peer节点是一个统称，包含了Leader（主节点），Anchor（锚节点），Endorser（背书节点）以及Committer（记账节点）</p>
<p>Leader主节点连接到Orderer节点并与之通信并通知给组织内部的其他节点<br>Anchor锚节点是在通道上可以被所有其他Peer节点发现的节点</p>
<h2 id="Orderer"><a href="#Orderer" class="headerlink" title="Orderer"></a>Orderer</h2><p>从全网的客户端节点接收交易，然后将交易按照一定的规则进行排序<br>将排序好的交易按照固定的时间间隔打包成区块，然后分发给其他组织的主节点</p>
<p>有两种常用类型的排序方法：</p>
<ul>
<li>solo，整个网络中只有一个排序节点，它收到的交易的顺序就是整个网络中的排好序的交易顺序。整个模式仅仅适用于开发和测试时用，如果Orderer节点挂掉了，整个网络就是瘫痪的</li>
<li>kafka，将整个网络中的交易排序过程转交给了kafka集群，每一个Orderer节点都是kafka集群的生产者和消费者，生产者将从客户端节点接收到的交易转发给kafka集群，同时消费者中kafka集群里面获取交易，这样或得到的交易就已经是排好序的了</li>
</ul>
<p>————————————————<br>转自CSDN博主「TLpigff」的文章，遵循CC 4.0 BY-SA版权协议<br>原文链接：<a href="https://blog.csdn.net/lvyibin890/category_10008527.html">https://blog.csdn.net/lvyibin890/category_10008527.html</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链NFT</title>
    <url>/2022/03/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/%E5%8C%BA%E5%9D%97%E9%93%BENFT/</url>
    <content><![CDATA[<h1 id="ERC721"><a href="#ERC721" class="headerlink" title="ERC721"></a>ERC721</h1><p><a href="https://www.jianshu.com/p/41437f66afa8">《什么是ERC-721 代币？》</a><br><a href="https://zhuanlan.zhihu.com/p/393935101">《智能合约NFT之ERC721代币详解》</a></p>
<p>本质上说就是定义的函数接口标准</p>
<h2 id="ERC721标准"><a href="#ERC721标准" class="headerlink" title="ERC721标准"></a>ERC721标准</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface ERC721 &#123;</span><br><span class="line">    /// @dev 当任何NFT的所有权更改时（不管哪种方式），就会触发此事件。</span><br><span class="line">    ///  包括在创建时（`from` == 0）和销毁时(`to` == 0), 合约创建时除外。</span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);</span><br><span class="line"></span><br><span class="line">    /// @dev 当更改或确认NFT的授权地址时触发。</span><br><span class="line">    ///  零地址表示没有授权的地址。</span><br><span class="line">    ///  发生 `Transfer` 事件时，同样表示该NFT的授权地址（如果有）被重置为“无”（零地址）。</span><br><span class="line">    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);</span><br><span class="line"></span><br><span class="line">    /// @dev 所有者启用或禁用操作员时触发。（操作员可管理所有者所持有的NFTs）</span><br><span class="line">    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);</span><br><span class="line"></span><br><span class="line">    /// @notice 统计所持有的NFTs数量</span><br><span class="line">    /// @dev NFT 不能分配给零地址，查询零地址同样会异常</span><br><span class="line">    /// @param _owner ： 待查地址</span><br><span class="line">    /// @return 返回数量，也许是0</span><br><span class="line">    function balanceOf(address _owner) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    /// @notice 返回所有者</span><br><span class="line">    /// @dev NFT 不能分配给零地址，查询零地址抛出异常</span><br><span class="line">    /// @param _tokenId NFT 的id</span><br><span class="line">    /// @return 返回所有者地址</span><br><span class="line">    function ownerOf(uint256 _tokenId) external view returns (address);</span><br><span class="line"></span><br><span class="line">    /// @notice 将NFT的所有权从一个地址转移到另一个地址</span><br><span class="line">    /// @dev 如果`msg.sender` 不是当前的所有者（或授权者）抛出异常</span><br><span class="line">    /// 如果 `_from` 不是所有者、`_to` 是零地址、`_tokenId` 不是有效id 均抛出异常。</span><br><span class="line">    ///  当转移完成时，函数检查  `_to` 是否是合约，如果是，调用 `_to`的 `onERC721Received` 并且检查返回值是否是 `0x150b7a02` (即：`bytes4(keccak256(&quot;onERC721Received(address,address,uint256,bytes)&quot;))`)  如果不是抛出异常。</span><br><span class="line">    /// @param _from ：当前的所有者</span><br><span class="line">    /// @param _to ：新的所有者</span><br><span class="line">    /// @param _tokenId ：要转移的token id.</span><br><span class="line">    /// @param data : 附加额外的参数（没有指定格式），传递给接收者。</span><br><span class="line">    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;</span><br><span class="line"></span><br><span class="line">    /// @notice 将NFT的所有权从一个地址转移到另一个地址，功能同上，不带data参数。</span><br><span class="line">    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;</span><br><span class="line"></span><br><span class="line">    /// @notice 转移所有权 -- 调用者负责确认`_to`是否有能力接收NFTs，否则可能永久丢失。</span><br><span class="line">    /// @dev 如果`msg.sender` 不是当前的所有者（或授权者、操作员）抛出异常</span><br><span class="line">    /// 如果 `_from` 不是所有者、`_to` 是零地址、`_tokenId` 不是有效id 均抛出异常。</span><br><span class="line">    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;</span><br><span class="line"></span><br><span class="line">    /// @notice 更改或确认NFT的授权地址</span><br><span class="line">    /// @dev 零地址表示没有授权的地址。</span><br><span class="line">    ///  如果`msg.sender` 不是当前的所有者或操作员</span><br><span class="line">    /// @param _approved 新授权的控制者</span><br><span class="line">    /// @param _tokenId ： token id</span><br><span class="line">    function approve(address _approved, uint256 _tokenId) external payable;</span><br><span class="line"></span><br><span class="line">    /// @notice 启用或禁用第三方（操作员）管理 `msg.sender` 所有资产</span><br><span class="line">    /// @dev 触发 ApprovalForAll 事件，合约必须允许每个所有者可以有多个操作员。</span><br><span class="line">    /// @param _operator 要添加到授权操作员列表中的地址</span><br><span class="line">    /// @param _approved True 表示授权, false 表示撤销</span><br><span class="line">    function setApprovalForAll(address _operator, bool _approved) external;</span><br><span class="line"></span><br><span class="line">    /// @notice 获取单个NFT的授权地址</span><br><span class="line">    /// @dev 如果 `_tokenId` 无效，抛出异常。</span><br><span class="line">    /// @param _tokenId ：  token id</span><br><span class="line">    /// @return 返回授权地址， 零地址表示没有。</span><br><span class="line">    function getApproved(uint256 _tokenId) external view returns (address);</span><br><span class="line"></span><br><span class="line">    /// @notice 查询一个地址是否是另一个地址的授权操作员</span><br><span class="line">    /// @param _owner 所有者</span><br><span class="line">    /// @param _operator 代表所有者的授权操作员</span><br><span class="line">    function isApprovedForAll(address _owner, address _operator) external view returns (bool);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析与实现"><a href="#解析与实现" class="headerlink" title="解析与实现"></a>解析与实现</h2><h3 id="Transfer-event"><a href="#Transfer-event" class="headerlink" title="Transfer event"></a>Transfer event</h3><p>当任何NFT的所有权更改时（不管哪种方式），就会触发此事件，即成立为交易（包括创建，转让，销毁）</p>
<h3 id="Approval-event"><a href="#Approval-event" class="headerlink" title="Approval event"></a>Approval event</h3><p>当更改或确认NFT的<strong>授权</strong>地址时触发。</p>
<h3 id="ApprovalForAll-event"><a href="#ApprovalForAll-event" class="headerlink" title="ApprovalForAll event"></a>ApprovalForAll event</h3><p>所有者启用或禁用<strong>授权</strong>第三方（操作员）管理时触发。</p>
<h3 id="balanceOf"><a href="#balanceOf" class="headerlink" title="balanceOf*"></a>balanceOf*</h3><p>查找owner的资产数量，参数_owner，返回数量</p>
<h3 id="ownerOf"><a href="#ownerOf" class="headerlink" title="ownerOf*"></a>ownerOf*</h3><p>查找资产对应所有者，参数资产tokenid，返回拥有者</p>
<h3 id="safeTransferFrom"><a href="#safeTransferFrom" class="headerlink" title="safeTransferFrom"></a>safeTransferFrom</h3><p>安全的资产所有权转移（修改owner），参数当前所有者、目的所有者、资产tokenid、任意备注（可不带）</p>
<h3 id="transferFrom"><a href="#transferFrom" class="headerlink" title="transferFrom*"></a>transferFrom*</h3><p>资产所有权转移，相比safeTransferFrom参数一致</p>
<h3 id="approve"><a href="#approve" class="headerlink" title="approve*"></a>approve*</h3><p>更改或确认NFT的授权地址，参数新授权人、资产tokenid</p>
<h3 id="setApprovalForAll"><a href="#setApprovalForAll" class="headerlink" title="setApprovalForAll"></a>setApprovalForAll</h3><p>所有者启用或禁用授权第三方（操作员）管理，参数要授权的的操作员、启用/禁用布尔值</p>
<h3 id="getApproved"><a href="#getApproved" class="headerlink" title="getApproved*"></a>getApproved*</h3><p>获取资产授权地址，参数资产tokenid，返回授权地址</p>
<h3 id="isApprovedForAll"><a href="#isApprovedForAll" class="headerlink" title="isApprovedForAll"></a>isApprovedForAll</h3><p>查询一个操作员是否是一个所有者的授权操作员，参数所有者、操作员</p>
<h1 id="链码分析"><a href="#链码分析" class="headerlink" title="链码分析"></a>链码分析</h1><p>资产本身的信息是一组需要区块链记录的结构体，还有每次进行交易时希望对交易信息进行记录则交易信息也设定为一结构体（特殊类型定义为string 设置为宏定义方便转换用）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链概述</title>
    <url>/2021/09/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h1><p>区块链是一个信息技术领域的术语。从本质上讲，它是一个<strong>共享数据库</strong>，存储于其中的数据或信息，具有“不可伪造”“全程留痕”“可以追溯”“公开透明”“集体维护”等特征。基于这些特征，区块链技术奠定了坚实的“信任”基础，创造了可靠的“合作”机制，具有广阔的运用前景。</p>
<ul>
<li>去中心化。区块链技术不依赖额外的第三方管理机构或硬件设施，没有中心管制，除了自成一体的区块链本身，通过分布式核算和存储，各个节点实现了信息自我验证、传递和管理。去中心化是区块链最突出最本质的特征。</li>
<li>开放性。区块链技术基础是开源的，除了交易各方的私有信息被加密外，区块链的数据对所有人开放，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透。</li>
<li>独立性。基于协商一致的规范和协议(类似比特币采用的哈希算法等各种数学算法)，整个区块链系统不依赖其他第三方，所有节点能够在系统内自动安全地验证、交换数据，不需要任何人为的干预。</li>
<li>安全性。只要不能掌控全部数据节点的51%，就无法肆意操控修改网络数据，这使区块链本身变得相对安全，避免了主观人为的数据变更。</li>
<li>匿名性。除非有法律规范要求，单从技术上来讲，各区块节点的身份信息不需要公开或验证，信息传递可以匿名进行。<h1 id="实际实现"><a href="#实际实现" class="headerlink" title="实际实现"></a>实际实现</h1><h2 id="简易区块链"><a href="#简易区块链" class="headerlink" title="简易区块链"></a>简易区块链</h2>一个简易的区块链，必须有下面几个功能：</li>
<li>  生成创世纪块</li>
<li>  读取文件夹下的所有区块</li>
<li>  查找创世纪块</li>
<li>  查找区块链的最后一个区块</li>
<li>  在区块链的尾部追加区块</li>
<li>  对区块的SHA计算<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632124361597.png" alt="enter description here"><br>一个块Block一般有：</li>
<li>  index 块号</li>
<li>  previousHash 上一个区块的hash值</li>
<li>  timestamp 时间戳</li>
<li>  data 存放的数据</li>
<li>  hash 区块的hash值<br>我们每生成一个区块，我们都会给这个区块按照特定的hash算法，来得到一个hash值，一般来说，只要这个区块的index,previoushash,timestamp,data有改动，那么它所算出的hash值也会改变，所以当你想要篡改某个区块的数据时，你需要将后面所有的区块的previoushash都进行篡改。</li>
</ul>
<hr>
<p><a href="https://blog.csdn.net/TuxedoLinux/article/details/86764142">区块链的数据结构</a><br><a href="https://blog.csdn.net/qq_43289711/article/details/116082281">区块链的简单实现</a><br><a href="https://blog.csdn.net/weixin_44046447/article/details/111966999">简易区块链C语言实现</a><br><a href="https://blog.csdn.net/maxzero/article/details/81773443?spm=1001.2014.3001.5501">区块链学习</a><br><a href="https://blog.csdn.net/u011583927/article/details/80905740">SHA256算法原理详解</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链的加密与存储</title>
    <url>/2021/10/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>谈谈我的理解：关于数据存储，一般数据不都是在每个分机生成的区块中的，可以有单独数据库而区块链起到传输修改信息的作用（账本记录的就是入账出账信息，通过这些信息自然可得余额信息）；争对我们的课题网上的架构不一定适用，我觉得可以在每个患者挂号时，为每一个患者创立独立的<em>创世区块</em>且记入数据库，然后根据需要，在构想的手环分机中，开始生成子需要传输信息的区块，且分机每次在成功传输信息后，仅需储存上一个区块值；可以简单的把区块生成视作加密，那么区块链就仅起到加密信息传输的作用（这样已经可以保证无法通过分机得到患者信息）；所以我们还可以利用区块链分块储存的架构，将总数据库进行较大型的分布式储存。</p>
<p><em>以下文字为摘录</em></p>
<hr>
<h1 id="区块链-≠-分布式存储这篇强推"><a href="#区块链-≠-分布式存储这篇强推" class="headerlink" title="区块链 ≠ 分布式存储这篇强推"></a><a href="https://zhuanlan.zhihu.com/p/411768627">区块链 ≠ 分布式存储</a><em>这篇强推</em></h1><p>直观的角度来看，完整的区块链系统内部一定会包含一个「存储模块」，整体而言，区块链系统确实可以起到持久化数据的作用。<br>但是如果从这个角度出发，直接将区块链系统看作是一个数据库，这样的观点也是有待商榷的。<br>当我们站在区块链系统内部“数据存储”功能的角度看待“区块链系统”时，我们会发现，区块链系统具有确定性的系统架构、确定性的内部业务逻辑，以及一些通用的数据组织格式（比如：区块是一种append-only形式的数据、只有虚拟机执行指令的过程中会修改状态数据等）。区块链系统中的数据存储只需要满足这一套运转逻辑过程中的持久化需求即可，也就是说，<strong>区块链系统为其存储模块划定了比通用数据库更小的模块功能边界</strong>。</p>
<h1 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h1><p>Hash是一个把任意长度的数据映射成固定长度数据的函数。例如，对于数据完整性校验，最简单的方法是对整个数据做Hash运算得到固定长度的Hash值，然后把得到的Hash值公布在网上，这样用户下载到数据之后，对数据再次进行Hash运算，比较运算结果和网上公布的Hash值进行比较，如果两个Hash值相等，说明下载的数据没有损坏。可以这样做是因为输入数据的稍微改变就会引起Hash运算结果的面目全非，而且根据Hash值反推原始输入数据的特征是困难的。</p>
<h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><blockquote>
<p><strong>非对称加密技术在区块链的应用场景：</strong></p>
</blockquote>
<ol>
<li> <strong>信息加密场景</strong>：主要是由信息发送者(记为A)使用接受者(记为B)的公钥对信息加密后再发送给B，B利用自己的私钥对信息解密。比特币交易的加密即属于此场景。</li>
<li><strong>数字签名场景</strong>：由发送者A采用自己的私钥加密信息后发送给B，B使用A的公钥对信息解密、从而可确保信息是由A发送的。<br> 数字签名，可以保证收到的文件没有被篡改，也可以保证发送者的身份。因为私钥生产了数字签名，私钥是不公开的。</li>
<li><strong>登录认证场景</strong>：是由客户端使用私钥加密登录信息后发送给服务器，后者接收后采用该客户端的公钥解密并认证登录信息.</li>
</ol>
<p><strong>上述三种场景加密的不同之处主要在于：</strong></p>
<ul>
<li>  信息加密是公钥加密，私钥解密，确保信息的安全性；</li>
<li>  数字签名是私钥加密公钥解密，确保数字签名的归属性；</li>
<li>  登录认证私钥加密，公钥解密。</li>
</ul>
<h1 id="如何存储大型数据"><a href="#如何存储大型数据" class="headerlink" title="如何存储大型数据"></a>如何存储大型数据</h1><p>现在众多项目自称是基于区块链的，因为区块的数据大小，格式受限，其实是一些重要的信息，如账户信息，交易信息等放在区块里，其他的程序还是需要中心化的服务器执行，还有一些自身的需要存储的大数据，只是把其中的根节点HASH值，存入区块链。<br>大部分的的项目基于区块链是如下的一个思路，将需要用到区块链的部分抽离出来，逻辑上分成应用系统和区块链系统，用公链（如以太坊）实现区块链的功能，优点如下：</p>
<ol>
<li>应用系统，区块链系统分类，最大程度的用原有中心化服务器系统。</li>
<li>利用公有区块链的网络安全强大，不可篡改等特性保证区块链功能。<br>基于以太坊的应用场景解决方案，一些大量数据可以做如下操作：</li>
<li>在以太坊智能合约中维护自身区块链的头部信息； →网络安全、防篡改</li>
<li>自身区块链区块内容放在二级存储（安全的企业存储环境中）；→自身信息隐私保护，省钱</li>
<li>对于历史头信息进行剪裁；→省钱</li>
<li>关联以太坊地址和自身身份；→不可抵赖</li>
</ol>
<h1 id="IAM的架构模式"><a href="#IAM的架构模式" class="headerlink" title="IAM的架构模式"></a>IAM的架构模式</h1><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634318416611.png" alt="enter description here"><br>IAM环境中包括很多用户和服务提供商。IAM系统为每个用户分配 一个账户以及一组访问能力，用户基于其账户权限及访问能力访问提供商 的服务。可以采用以如下方式利用W3C的DID规范和W3C的可验证声明规范：<br>假设Alice需要一个身份（DID，唯一标识符）。如上图所示，为了创建一个 新的DID，Alice需要在区块链上创建一个数据项，该数据项中包含了随机 生成的标识符、指向其个人档案数据的链接、以及其个人档案数据的哈希。 档案数据中包含了公钥以及一组可验证的声明，所生成的随机标识符现在 成为Alice的DID，因为只有她持有与公钥对应的私钥。<br>可验证声明是由授权机构签名的通证，创建者同时也会在区块链上记录 声明数据的哈希，类似于DID的实现方式。<br>Alice首先前往权威机构获取可验证声明。例如，个人注册部可能是姓名、 地址、出生日期这些信息的负责机构。假设权威机构签发了可验证的声明， Alice首先展示其对DID的所有权，然后提交对可验证声明的请求。为了更新 其个人档案数据，Alice需要在区块链中添加一个新的数据项，其中包含 更新后的个人档案数据的新的哈希。<br>在验证Alice对DID的所有权时使用的挑战-应答协议，验证者会生成一个随机 种子，然后使用ALice的公钥进行加密，接下来Alice需要使用其私钥解密种子 以展示其确实持有公钥对应的私钥。<br>另一个希望识别Alice身份的用户或机构，例如Bob，首先会从Alice处接收到 DID，然后从区块链上读取所有该DID相关的数据并进行验证。Bob可以同样的 挑战-应答方式验证Alice的身份。</p>
<h1 id="联盟链"><a href="#联盟链" class="headerlink" title="联盟链"></a>联盟链</h1><p>联盟链，只针对特定某个群体的成员和有限的第三方，内部指定多个预选的节点为记账人，每个块的生成由所有的预选节点共同决定，其他接入节点可以参与交易，但不过问记账过程，其他第三方可以通过该区块链开放的API进行限定查询。为了获得更好的性能，联盟链对于共识或验证节点的配置和网络环境有一定要求。有了准入机制，可以使得交易性能更容易提高，避免由参次不齐的参与者产生的一些问题。</p>
<h1 id="区块链的数据到底什么时候是存储在链上，什么时候又储存在相应节点的数据库中间呢？"><a href="#区块链的数据到底什么时候是存储在链上，什么时候又储存在相应节点的数据库中间呢？" class="headerlink" title="区块链的数据到底什么时候是存储在链上，什么时候又储存在相应节点的数据库中间呢？"></a>区块链的数据到底什么时候是存储在链上，什么时候又储存在相应节点的数据库中间呢？</h1><p>我们必须了解清楚两个概念：</p>
<ol>
<li> 区块链数据；</li>
<li> 链上数据；<h2 id="首先：区块链数据-包括区块数据和状态数据两者"><a href="#首先：区块链数据-包括区块数据和状态数据两者" class="headerlink" title="首先：区块链数据(包括区块数据和状态数据两者)"></a>首先：区块链数据(包括区块数据和状态数据两者)</h2></li>
<li> 区块数据描述的实际是区块链上面发生的每一笔交易的记录（如小帅给小王转账了50元，小帅充值了20元之类的数据）</li>
<li> 而状态数据则是记录了每个账户和智能合约的当前状态（如小帅余额200元，小王20元）<br>而无论是区块数据还是状态数据都是由我们的区块链节点使用和储存的，区块链节点是一个<strong>程序</strong>，允许在我们的电脑，虚拟机等上，而多个节点通过网络的方式进行链接最终形成了完整的区块链网络。<br>而这其中区块链节点的数据存储最普遍的方式就是存入我们的磁盘中间，而我们的区块链不会直接的访问我们的磁盘，而是通过特定的数据库如LevelIDB，RocksDB，MySQL等独立和分布式的数据库来操作我们的数据（目前最重要的另外一个技术就是加入缓存区域，减少磁盘的寻道时间，加快区块链对磁盘数据的使用和存储），而相比于直接访问磁盘，用数据库作为中间媒介的<strong>特定数据访问模型对区块链节点更加的友好。</strong><br>所以数据存储的过程可以解释为<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634315188441.png" alt="enter description here"></li>
</ol>
<p><strong>而数据库分为独立和嵌入式：其最大的区别就是是否需要独立的部署，嵌入式的数据库和区块链节点整合在同一个进程中间，同动同停，基本感受不到独立的存在感。</strong></p>
<h2 id="其次：链上数据"><a href="#其次：链上数据" class="headerlink" title="其次：链上数据"></a>其次：链上数据</h2><p><strong>解释：链上数据是直接或者间接由区块链共识产生的数据；</strong></p>
<ol>
<li>而回到我们的问题，我们会发现区块链中间的区块数据和状态数据并不是凭空的产生的，区块中间的数据是因为不同节点之间的交易数据存储然后被广播到所有区块链节点的共识状态，所以区块数据也是因为共识而产生的数据之一；</li>
<li>而反观状态数据，由于交易的产生，共识的一致，最终会引起状态的改变，所以在此角度中间，状态数据也一样可以被认为是链上数据；</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>Java String.format 用法</title>
    <url>/2021/09/15/%E7%88%AA%E8%9B%99/Java%20String.format%20%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="对整数进行格式化"><a href="#对整数进行格式化" class="headerlink" title="对整数进行格式化"></a>对整数进行格式化</h1><p>%[index$][标识][最小宽度]转换方式</p>
<ul>
<li>index$<br>  格式化参数的索引  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.formart(<span class="string">&quot;%1$s %2$s&quot;</span>,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;北京&quot;</span>);<span class="comment">// &quot;中国 北京&quot;</span></span><br><span class="line">String.formart(<span class="string">&quot;%2$s %1$s&quot;</span>,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;北京&quot;</span>);<span class="comment">// &quot;北京 中国&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>标识<h2 id="‘-‘"><a href="#‘-‘" class="headerlink" title="‘-‘"></a>‘-‘</h2>  在最小宽度内左对齐，不可以与“用0填充”同时使用<h2 id="‘-’"><a href="#‘-’" class="headerlink" title="‘#’"></a>‘#’</h2>  只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x<h2 id="‘-’-1"><a href="#‘-’-1" class="headerlink" title="‘+’"></a>‘+’</h2>  结果总是包括一个符号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）<h2 id="‘-‘-1"><a href="#‘-‘-1" class="headerlink" title="‘ ‘"></a>‘ ‘</h2>  正值前加空格，负值前加负号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）<h2 id="‘0’"><a href="#‘0’" class="headerlink" title="‘0’"></a>‘0’</h2>  结果将用零来填充<br>  简单补零：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">&quot;%02d&quot;</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
  即01<br>  补零数据自然左对齐（不共用！）<h2 id="‘-’-2"><a href="#‘-’-2" class="headerlink" title="‘,’"></a>‘,’</h2>  只适用于10进制，每3位数字之间用“，”分隔<h2 id="‘-‘-2"><a href="#‘-‘-2" class="headerlink" title="‘(‘"></a>‘(‘</h2>  若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（同‘+’具有同样的限制）</li>
<li>转换方式<br>d 十进制   o 八进制   x/X 十六进制<br>例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">&quot;%1$,-9d|&quot;</span>, -<span class="number">1234</span>));</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%1$0(9d&quot;</span>, -<span class="number">12</span>));</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%1$0#5x&quot;</span>, <span class="number">34</span>));</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%2$02x %1$06X&quot;</span>, <span class="number">28</span>,<span class="number">29</span>));</span><br></pre></td></tr></table></figure>
OUT:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1,234   |</span><br><span class="line">(0000012)</span><br><span class="line">0x022</span><br><span class="line">1d 00001C</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="对浮点数进行格式化"><a href="#对浮点数进行格式化" class="headerlink" title="对浮点数进行格式化"></a>对浮点数进行格式化</h1><p>%[index$][标识][最少宽度][.精度]转换方式</p>
<ul>
<li>其中转换方式:<ul>
<li>e/E 带有效位数和指数的十进制数</li>
<li>f 普通浮点型</li>
<li>g/G 系统自动选择用普通表示方式还是科学计数法方式</li>
<li>a/A 带有效位数和指数的十六进制浮点数<h2 id="精度-即小数点后位数"><a href="#精度-即小数点后位数" class="headerlink" title=".精度 即小数点后位数"></a>.精度 即小数点后位数</h2></li>
</ul>
</li>
</ul>
<h1 id="对字符、字符串进行格式化"><a href="#对字符、字符串进行格式化" class="headerlink" title="对字符、字符串进行格式化"></a>对字符、字符串进行格式化</h1><p>%[index$][标识][最小宽度]c/s</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String test = <span class="string">&quot;hello word&quot;</span>;</span><br><span class="line">String str = String.format(<span class="string">&quot;|%-15s|&quot;</span>, test);</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> tamp = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">str = String.format(<span class="string">&quot;(%15c)&quot;</span>, tamp);</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>
<p>OUT:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|hello word     |</span><br><span class="line">(              h)</span><br></pre></td></tr></table></figure>
<h1 id="对日期类型进行格式化"><a href="#对日期类型进行格式化" class="headerlink" title="对日期类型进行格式化"></a>对日期类型进行格式化</h1><p>以下日期和时间转换的后缀字符是为 ‘t’ 和 ‘T’ 转换定义的</p>
<h2 id="以下转换字符用来格式化时间："><a href="#以下转换字符用来格式化时间：" class="headerlink" title="以下转换字符用来格式化时间："></a>以下转换字符用来格式化时间：</h2><ul>
<li>‘H’     24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。</li>
<li>‘I’     12 小时制的小时，被格式化为必要时带前导零的两位数，即 01 - 12。</li>
<li>‘k’     24 小时制的小时，即 0 - 23。</li>
<li>‘l’     12 小时制的小时，即 1 - 12。</li>
<li>‘M’     小时中的分钟，被格式化为必要时带前导零的两位数，即 00 - 59。</li>
<li>‘S’     分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60 （”60” 是支持闰秒所需的一个特殊值）。</li>
<li>‘L’     秒中的毫秒，被格式化为必要时带前导零的三位数，即 000 - 999。</li>
<li>‘N’     秒中的毫微秒，被格式化为必要时带前导零的九位数，即 000000000 - 999999999。</li>
<li>‘p’     特定于语言环境的 上午或下午 标记以小写形式表示，例如 “am” 或 “pm”。使用转换前缀 ‘T’ 可以强行将此输出转换为大写形式。</li>
<li>‘z’     相对于 GMT 的 RFC 822 格式的数字时区偏移量，例如 -0800。</li>
<li>‘Z’     表示时区缩写形式的字符串。Formatter 的语言环境将取代参数的语言环境（如果有）。</li>
<li>‘s’     自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的秒数，即 Long.MIN_VALUE/1000 与 Long.MAX_VALUE/1000 之间的差值。</li>
<li>‘Q’     自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的毫秒数，即 Long.MIN_VALUE 与 Long.MAX_VALUE 之间的差值。</li>
</ul>
<h2 id="以下转换字符用来格式化日期："><a href="#以下转换字符用来格式化日期：" class="headerlink" title="以下转换字符用来格式化日期："></a>以下转换字符用来格式化日期：</h2><ul>
<li>‘B’     特定于语言环境的月份全称，例如 “January” 和 “February”。</li>
<li>‘b’     特定于语言环境的月份简称，例如 “Jan” 和 “Feb”。</li>
<li>‘h’     与 ‘b’ 相同。</li>
<li>‘A’     特定于语言环境的星期几全称，例如 “Sunday” 和 “Monday”</li>
<li>‘a’     特定于语言环境的星期几简称，例如 “Sun” 和 “Mon”</li>
<li>‘C’     除以 100 的四位数表示的年份，被格式化为必要时带前导零的两位数，即 00 - 99</li>
<li>‘Y’     年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。</li>
<li>‘y’     年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。</li>
<li>‘j’     一年中的天数，被格式化为必要时带前导零的三位数，例如，对于格里高利历是 001 - 366。</li>
<li>‘m’     月份，被格式化为必要时带前导零的两位数，即 01 - 13。</li>
<li>‘d’     一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31</li>
<li>‘e’     一个月中的天数，被格式化为两位数，即 1 - 31。</li>
</ul>
<h2 id="以下转换字符用于格式化常见的日期-时间组合："><a href="#以下转换字符用于格式化常见的日期-时间组合：" class="headerlink" title="以下转换字符用于格式化常见的日期/时间组合："></a>以下转换字符用于格式化常见的日期/时间组合：</h2><ul>
<li>‘R’     24 小时制的时间，被格式化为 “%tH:%tM”</li>
<li>‘T’     24 小时制的时间，被格式化为 “%tH:%tM:%tS”。</li>
<li>‘r’     12 小时制的时间，被格式化为 “%tI:%tM:%tS %Tp”。上午或下午标记 (‘%Tp’) 的位置可能与语言环境有关。</li>
<li>‘D’     日期，被格式化为 “%tm/%td/%ty”。</li>
<li>‘F’     ISO 8601 格式的完整日期，被格式化为 “%tY-%tm-%td”。</li>
<li>‘c’     日期和时间，被格式化为 “%ta %tb %td %tT %tZ %tY”，例如 “Sun Jul 20 16:17:00 EDT 1969”。  <font size="2"><a href="https://blog.csdn.net/wahaha13168/article/details/83008576">参考博客</a></font></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>爪蛙</tag>
      </tags>
  </entry>
  <entry>
    <title>Java简单窗口操作</title>
    <url>/2021/09/28/%E7%88%AA%E8%9B%99/Java%E7%AE%80%E5%8D%95%E7%AA%97%E5%8F%A3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="其实就是学别人代码"><a href="#其实就是学别人代码" class="headerlink" title="其实就是学别人代码"></a>其实就是学别人代码</h1><h1 id="接口简述"><a href="#接口简述" class="headerlink" title="接口简述"></a>接口简述</h1><p>比如：People是一个接口，他里面有say这个方法。<br>接口的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;<span class="comment">//就是public abstract void say();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是接口没有方法体。只能通过一个具体的类去实现其中的方法体。<br>比如 Chinese这个类，就实现了People这个接口。<br>接口的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">implements</span> <span class="title">People</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 你好！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口的调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">People chinese = <span class="keyword">new</span> Chinese() ;</span><br><span class="line">chinese.say();</span><br></pre></td></tr></table></figure>

<h1 id="关于Awt"><a href="#关于Awt" class="headerlink" title="关于Awt"></a>关于Awt</h1><h2 id="关于-MouseListener接口"><a href="#关于-MouseListener接口" class="headerlink" title="关于 MouseListener接口"></a>关于 MouseListener接口</h2><ol>
<li><code>void mouseClicked(MouseEvent e)</code> 在组件上单击(按下并释放)鼠标按钮时调用。 </li>
<li><code>void mouseEntered(MouseEvent e)</code> 鼠标进入组件时调用 。</li>
<li><code>void mouseExited(MouseEvent e)</code> 鼠标退出组件时调用。</li>
<li><code>void mousePressed(MouseEvent e)</code> 在组件上按下鼠标按钮时调用。</li>
<li><code>void mouseReleased(MouseEvent e)</code> 在组件上释放鼠标按钮时调用。</li>
</ol>
<p>实验与结合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baton</span></span>&#123;</span><br><span class="line">	JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;frame窗口&quot;</span>);		</span><br><span class="line">	JMenuBar menuBar = <span class="keyword">new</span> JMenuBar();<span class="comment">//创建菜单栏</span></span><br><span class="line">	JMenu fileMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;DYJ&quot;</span>);</span><br><span class="line">	JMenuItem testMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">	JMenuItem exitMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;2&quot;</span>);<span class="comment">//子选项</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">view</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		f.setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">		f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">		f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class="comment">//叉号能关</span></span><br><span class="line"></span><br><span class="line">		menuBar.add(fileMenu);<span class="comment">//一级菜单的创建与添加</span></span><br><span class="line">		</span><br><span class="line">		fileMenu.add(testMenuItem);<span class="comment">//子选项添加</span></span><br><span class="line">		fileMenu.addSeparator();<span class="comment">//添加分割线</span></span><br><span class="line">		fileMenu.add(exitMenuItem);</span><br><span class="line">		</span><br><span class="line">		exitMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">		</span><br><span class="line">		f.setJMenuBar(menuBar);<span class="comment">//设置到窗口</span></span><br><span class="line">		f.setVisible(<span class="keyword">true</span>);<span class="comment">//设置开启显示</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">MouseListener</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> JTextArea jt = <span class="keyword">new</span> JTextArea();</span><br><span class="line">	<span class="keyword">private</span> JButton exit = <span class="keyword">new</span> JButton(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">	Baton baton=<span class="keyword">new</span> Baton();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		baton.view();</span><br><span class="line">		baton.testMenuItem.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">this</span>.add(jt, BorderLayout.CENTER);</span><br><span class="line">		<span class="keyword">this</span>.add(exit, BorderLayout.SOUTH);</span><br><span class="line">		<span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">		<span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">this</span>.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">		exit.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"> </span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">				System.exit(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> test1();</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;<span class="comment">// 单击鼠标时执行的操作</span></span><br><span class="line">		jt.append(<span class="string">&quot;鼠标单击了此文本区域\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;<span class="comment">// 鼠标进入组件时执行的操作</span></span><br><span class="line">		jt.append(<span class="string">&quot;鼠标进入了此文本区域\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;<span class="comment">// 鼠标离开组件时执行的操作</span></span><br><span class="line">		jt.append(<span class="string">&quot;鼠标离开了此文本区域\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;<span class="comment">// 鼠标在组件上按下时执行的操作</span></span><br><span class="line">		jt.append(<span class="string">&quot;在此文本区域你按下了鼠标\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;<span class="comment">// 鼠标释放时执行的操作</span></span><br><span class="line">		jt.append(<span class="string">&quot;鼠标按键释放了\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>混合使用：<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638674.png" alt="enter description here"><br>6. getX(),getY()：获取鼠标的坐标位置<br>7. getModifiers()：获取鼠标的左或右键<br>8. getClickCount()：获取鼠标被点击的次数<br>9. setCursor():控制鼠标指针的形状。如设置成漏斗：<code>setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR))</code></p>
<h2 id="关于-MouseMotionListener接口"><a href="#关于-MouseMotionListener接口" class="headerlink" title="关于 MouseMotionListener接口"></a>关于 MouseMotionListener接口</h2><ol>
<li><code>void mouseDragged(MouseEvent e)</code> 在组件上按下鼠标按钮然后拖动时调用。</li>
<li><code>void mouseMoved(MouseEvent e)</code> 将鼠标光标移动到组件但未按下任何按钮时调用。<br>简单例子：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> <span class="keyword">implements</span> <span class="title">MouseMotionListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	JFrame myframe; <span class="comment">// JFrame通常默认使用BorderLayout布局管理器的</span></span><br><span class="line">	TextArea tf;</span><br><span class="line">	JButton exitButton;</span><br><span class="line">	<span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Label label = <span class="keyword">new</span> Label(<span class="string">&quot;click and drag the mouse&quot;</span>);</span><br><span class="line">		myframe = <span class="keyword">new</span> JFrame(<span class="string">&quot;MyMouseMotionListener&quot;</span>);</span><br><span class="line">		tf = <span class="keyword">new</span> TextArea();</span><br><span class="line">		exitButton = <span class="keyword">new</span> JButton(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line"> </span><br><span class="line">		tf.addMouseMotionListener(<span class="keyword">this</span>);</span><br><span class="line">		exitButton.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"> </span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">				System.exit(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"> </span><br><span class="line">		myframe.add(label, BorderLayout.NORTH);</span><br><span class="line">		myframe.add(tf, BorderLayout.CENTER);</span><br><span class="line">		myframe.add(exitButton, BorderLayout.SOUTH);</span><br><span class="line">		myframe.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">		myframe.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> test2();</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">// 负责处理鼠标拖动事件</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//getX(),getY()：获取鼠标的坐标位置</span></span><br><span class="line">		String s = number++ + <span class="string">&quot;&quot;</span> + <span class="string">&quot;the mouse is draggered:x=&quot;</span> + e.getX()</span><br><span class="line">				+ <span class="string">&quot;y=&quot;</span> + e.getY() + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		tf.append(s);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">// 负责处理鼠标移动事件</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">		String s = number++ + <span class="string">&quot;&quot;</span> + <span class="string">&quot;the mouse is moving:x=&quot;</span> + e.getX() + <span class="string">&quot;y=&quot;</span></span><br><span class="line">				+ e.getY() + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		tf.append(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
效果：<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638670.png" alt="enter description here"></li>
</ol>
<h1 id="关于Swing"><a href="#关于Swing" class="headerlink" title="关于Swing"></a>关于Swing</h1><p>跨平台性的更丰富的图形界面<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638677.png" alt="enter description here"></p>
<h2 id="首先关于JFrame"><a href="#首先关于JFrame" class="headerlink" title="首先关于JFrame"></a>首先关于JFrame</h2><p>窗体容器，Swing组件的载体。继承自Frame类。<br>并且可直接使用<code>jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</code>关闭窗体</p>
<h2 id="关于JDialog"><a href="#关于JDialog" class="headerlink" title="关于JDialog"></a>关于JDialog</h2><p>对话框，继承自Dialog类，功能是从一个窗体钟弹出另一个窗体（类似子JFrame）<br>使用<code>public JDialog(Frame f, String title, boolean model)</code>创建一个指定窗体、标题和模式的对话框。</p>
<h2 id="关于JLabel"><a href="#关于JLabel" class="headerlink" title="关于JLabel"></a>关于JLabel</h2><p><code>JLabel</code>类可以显示文本或图像。通过在显示区域中设置垂直和水平对齐来对齐标签的内容。默认情况下，标签在显示区域中垂直居中。默认情况下，纯文本标签前沿对齐; 默认情况下，仅图像标签水平居中。<br>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JLabel(Icon image, <span class="keyword">int</span> horizontalAlignment);<span class="comment">//使用指定的图像和水平对齐创建JLabel实例。</span></span><br><span class="line">JLabel(String text, Icon icon, <span class="keyword">int</span> horizontalAlignment);<span class="comment">//使用指定的文本，图像和水平对齐创建JLabel实例。</span></span><br></pre></td></tr></table></figure>
<h2 id="中间容器JPanel"><a href="#中间容器JPanel" class="headerlink" title="中间容器JPanel"></a>中间容器JPanel</h2><p>中间性区域安排</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	JFrame jf=<span class="keyword">new</span> JFrame();</span><br><span class="line">    	jf.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    	JPanel jp=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    	JPanel jp1=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    	jp.add(<span class="keyword">new</span> JButton(<span class="string">&quot;11&quot;</span>));</span><br><span class="line">    	jp.add(<span class="keyword">new</span> JButton(<span class="string">&quot;22&quot;</span>));</span><br><span class="line">    	jp.add(<span class="keyword">new</span> JButton(<span class="string">&quot;33&quot;</span>));</span><br><span class="line">    	jp.setBackground(Color.green);</span><br><span class="line">    	jp1.add(<span class="keyword">new</span> JButton(<span class="string">&quot;111&quot;</span>));</span><br><span class="line">    	jp1.add(<span class="keyword">new</span> JButton(<span class="string">&quot;222&quot;</span>));</span><br><span class="line">    	jf.add(jp);</span><br><span class="line">    	jf.add(jp1);</span><br><span class="line">    	jf.setSize(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">    	jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638673.png" alt="enter description here"></p>
<h2 id="关于JScrollPane"><a href="#关于JScrollPane" class="headerlink" title="关于JScrollPane"></a>关于JScrollPane</h2><p>JScrollPane内只能添加一个组件，是一个带滚动条的面板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	JFrame jf=<span class="keyword">new</span> JFrame(<span class="string">&quot;DYJ&quot;</span>);</span><br><span class="line">    	JTextArea jta=<span class="keyword">new</span> JTextArea(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">    	jta.setText(<span class="string">&quot;test!!&quot;</span>);</span><br><span class="line">    	jf.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    	JPanel jp1=<span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    	jp1.add(<span class="keyword">new</span> JButton(<span class="string">&quot;111&quot;</span>));</span><br><span class="line">    	jp1.add(jta);</span><br><span class="line">    	JScrollPane jsp=<span class="keyword">new</span> JScrollPane(jp1);</span><br><span class="line">    	jf.add(jsp);</span><br><span class="line">    	jf.setSize(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">    	jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638675.png" alt="enter description here"><br>它在界面需要时才自动出现<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638690.png" alt="enter description here"></p>
<h2 id="关于JMenuBar"><a href="#关于JMenuBar" class="headerlink" title="关于JMenuBar"></a>关于JMenuBar</h2><p>JMenuBar，菜单栏。菜单栏组件添加到 JFrame 窗口后，在窗口的内容显示区域的顶部出现。实现一个菜单栏主要涉及三种类: </p>
<ol>
<li>JMenuBar 表示一个菜单栏。 </li>
<li>JMenu 表示菜单栏上的一个一级菜单。 </li>
<li>JMenuItem, JCheckBoxMenuItem, JRadioButtonMenuItem 表示一级菜单下的一个子菜单项，三者分别表示 普通的子菜单、带复选框的子菜单、带单选按钮的子菜单。<br>使用：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Batton</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">view</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		JFrame f = <span class="keyword">new</span> JFrame(<span class="string">&quot;frame窗口&quot;</span>);</span><br><span class="line">		f.setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">		f.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">		f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class="comment">//叉号能关</span></span><br><span class="line">		</span><br><span class="line">		JMenuBar menuBar = <span class="keyword">new</span> JMenuBar();<span class="comment">//创建菜单栏</span></span><br><span class="line">		</span><br><span class="line">		JMenu fileMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;DYJ&quot;</span>);</span><br><span class="line">		menuBar.add(fileMenu);<span class="comment">//一级菜单的创建与添加</span></span><br><span class="line">		</span><br><span class="line">		JMenuItem testMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">		JMenuItem exitMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;2&quot;</span>);<span class="comment">//子选项</span></span><br><span class="line">		</span><br><span class="line">		fileMenu.add(testMenuItem);<span class="comment">//子选项添加</span></span><br><span class="line">		fileMenu.addSeparator();<span class="comment">//添加分割线</span></span><br><span class="line">		fileMenu.add(exitMenuItem);</span><br><span class="line">		</span><br><span class="line">		exitMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">		</span><br><span class="line">		f.setJMenuBar(menuBar);<span class="comment">//设置到窗口</span></span><br><span class="line">		f.setVisible(<span class="keyword">true</span>);<span class="comment">//设置开启显示</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
效果：<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1634214638676.png" alt="enter description here"><br>默认功能：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jRMItemEasy.setSelected(<span class="keyword">true</span>);<span class="comment">// 默认按钮选择</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>爪蛙</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链概念部分</title>
    <url>/2021/11/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/%E9%A2%98/</url>
    <content><![CDATA[<h1 id="0"><a href="#0" class="headerlink" title="0"></a>0</h1><ol>
<li>（背书）是指特定节点执行链码交易并返回一个提案响应给客户端应用的过程。</li>
<li>（系统通道）配置和每个应用通道配置部分提供了排序组织对哪些组织是联盟成员、区块如何分发到通道以及排序服务节点使用的共识机制的控制。</li>
<li>（Peer节点）是网络的基本元素，因为他们存储了账本和智能合约。</li>
<li>（Peer 节点）是账本及链码的宿主，应用程序及管理员如果想要访问这些资源，他们必须要和（Peer 节点）进行交互。这就是为什么（Peer 节点）被认为是 Hyperledger Fabric 网络最基本的组成模块。</li>
<li>（背书）指明了区块链网络中哪些组织必须对一个给定的智能合约所生成的交易进行签名，以此来宣布该交易有效。</li>
<li>程序通常需要对象的当前值，如果遍历整个区块链来计算对象的当前值会很麻烦——从（世界状态）中可以直接获取当前值。</li>
<li>一个智能合约中可定义一个或多个链码。（X可以将智能合约看成交易的管理者，而链码则管理着如何将智能合约打包以便用于部署。一个智能合约定义在一个链码中。而多个智能合约也可以定义在同一个链码中。当一个链码部署完毕，该链码中的所有智能合约都可供应用程序使用。）</li>
<li>Hyperledger Fabric 中的账本由“世界状态“和”区块链“这两部分组成，世界状态是交易日志，区块链是数据库。（X世界状态是一个数据库，它存储了一组账本状态的当前值；区块链是交易日志，它记录了促成当前世界状态的所有改变。）</li>
<li>一个 Peer 节点可以维护多个账本。（V）</li>
</ol>
<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><ol>
<li>许多分布式区块链，如以太坊（Ethereum）和比特币（Bitcoin），都是<code>非</code>许可的，这意味着任何节点都可以参与共识过程，在共识过程中，交易被排序并打包成区块。因此，这些系统依靠<code>概率共识算法</code>最终保证账本一致性高的概率，但仍容易受到不同的账本（有时也称为一个账本“分叉”），在网络中不同的参与者对于交易顺序有不同的观点。</li>
<li>Hyperledger Fabric 的工作方式与许多分布式区块链<code>不同</code>。它有一种称为排序节点的节点使交易有序，并与其他排序节点一起形成一个排序服务。因为 Fabric 的设计依赖于<code>确定性</code>的共识算法，所以 Peer 节点所验证的区块都是最终的和正确的。</li>
<li>拜占庭将军问题：多个拜占庭将军要如何在可能有叛徒、信使可能被策反或者暗杀的情况下达成是否要进攻的一致性决定？；Raft共识算法(fabric2.X特点)的举例：假设将军中<code>没有</code>叛军，信使的信息<code>可靠</code>但<code>有</code>可能被暗杀的情况下，将军们如何达成一致性决定？（多看看拜占庭将军问题即解决方案，使用raft为理想的实验情况）</li>
<li>CA是什么，MSP是什么(数字证书是一种由权威机构颁发的、用于在网络上证明用户身份的证明文件，颁发数字证书的过程也可以称为认证授权 (Certification Authority，简称CA)过程。;MSP是Membership Service Provider的缩写，直译为 成员关系服务提供者 。)</li>
<li>然后去搜一下SDK开发相关吧</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>java速记</title>
    <url>/2021/09/23/%E7%88%AA%E8%9B%99/java%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><p>关于后缀</p>
<ul>
<li>long/int<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> x=<span class="number">9999999999L</span>;<span class="comment">//超出2^31必须加L/l</span></span><br></pre></td></tr></table></figure></li>
<li>double/float<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> x=<span class="number">10.0F</span>;<span class="comment">//不加F/f将丢失精度，默认double型</span></span><br></pre></td></tr></table></figure>
关于转换</li>
<li>自动转换<br>数值型数据的转换：byte→short→int→long→float→double<br>字符型转换为整型：char→int<br>实例程序：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PrimitiveOverloading.java, 拓宽类型的方法过载</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimitiveOverloading</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 布尔类型不能自动转换</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prt</span><span class="params">(String s)</span> </span>&#123;System.out.println(s);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;prt(<span class="string">&quot;f1(char)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">byte</span> x)</span> </span>&#123;prt(<span class="string">&quot;f1(byte)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">short</span> x)</span> </span>&#123;prt(<span class="string">&quot;f1(short)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;prt(<span class="string">&quot;f1(int)&quot;</span>);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123;prt(<span class="string">&quot;f1(long)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;prt(<span class="string">&quot;f1(float)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f1(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">byte</span> x)</span> </span>&#123; prt(<span class="string">&quot;f2(byte)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">short</span> x)</span> </span>&#123; prt(<span class="string">&quot;f2(short)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; prt(<span class="string">&quot;f2(int)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123; prt(<span class="string">&quot;f2(long)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123; prt(<span class="string">&quot;f2(float)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f2(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">short</span> x)</span> </span>&#123; prt(<span class="string">&quot;f3(short)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; prt(<span class="string">&quot;f3(int)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123; prt(<span class="string">&quot;f3(long)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123; prt(<span class="string">&quot;f3(float)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f3(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; prt(<span class="string">&quot;f4(int)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123; prt(<span class="string">&quot;f4(long)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123; prt(<span class="string">&quot;f4(float)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f4(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123; prt(<span class="string">&quot;f5(long)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123; prt(<span class="string">&quot;f5(float)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f5(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f6</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123; prt(<span class="string">&quot;f6(float)&quot;</span>); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f6</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f6(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f7</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; prt(<span class="string">&quot;f7(double)&quot;</span>); &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testConstVal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		prt(<span class="string">&quot;Testing with 5&quot;</span>);</span><br><span class="line">		f1(<span class="number">5</span>); f2(<span class="number">5</span>);f3(<span class="number">5</span>);f4(<span class="number">5</span>); <span class="comment">//java中常数的默认类型是int型，调用void fx(int x) &#123; prt(&quot;fx(int)&quot;); &#125;</span></span><br><span class="line">                f5(<span class="number">5</span>);<span class="comment">//5为int型，f5无int参数，向上转换为f5(long x) &#123; prt(&quot;f5(long)&quot;); &#125;</span></span><br><span class="line">                f6(<span class="number">5</span>);  <span class="comment">//5为int型，f6无int、long参数方法，向上转换为void f6(float x) &#123; prt(&quot;f6(float)&quot;); &#125;</span></span><br><span class="line">                f7(<span class="number">5</span>);<span class="comment">//5为int型，f7无int、long、float参数方法，向上转换为void f7(double x) &#123; prt(&quot;f7(double)&quot;); &#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span> x = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">		prt(<span class="string">&quot;char argument:&quot;</span>);</span><br><span class="line">		f1(x); <span class="comment">//自动匹配void f1(char x) &#123;prt(&quot;f1(char)&quot;); &#125;</span></span><br><span class="line">                f2(x);f3(x);f4(x);  <span class="comment">//&#x27;x&#x27;为char类型，向上转换为void fx(int x) &#123; prt(&quot;fx(int)&quot;); &#125;</span></span><br><span class="line">                f5(x);<span class="comment">//&#x27;x&#x27;为char类型，f5无char、int型，向上转换为f5(long x) &#123; prt(&quot;f5(long)&quot;); &#125;</span></span><br><span class="line">                f6(x);<span class="comment">//&#x27;x&#x27;为char类型，f6无char、int、long型，向上转换为void f6(float x) &#123; prt(&quot;f6(float)&quot;); &#125;</span></span><br><span class="line">                f7(x);<span class="comment">//&#x27;x&#x27;为char类型，f7无char、int、long、float型，向上转换为void f7(double x) &#123; prt(&quot;f7(double)&quot;); &#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> x = <span class="number">0</span>;</span><br><span class="line">		prt(<span class="string">&quot;byte argument:&quot;</span>);</span><br><span class="line">		f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">short</span> x = <span class="number">0</span>;</span><br><span class="line">		prt(<span class="string">&quot;short argument:&quot;</span>);</span><br><span class="line">		f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">		prt(<span class="string">&quot;int argument:&quot;</span>);</span><br><span class="line">		f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">		prt(<span class="string">&quot;long argument:&quot;</span>);</span><br><span class="line">		f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testFloat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> x = <span class="number">0</span>;</span><br><span class="line">		prt(<span class="string">&quot;float argument:&quot;</span>);</span><br><span class="line">		f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">testDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> x = <span class="number">0</span>;</span><br><span class="line">		prt(<span class="string">&quot;double argument:&quot;</span>);</span><br><span class="line">		f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		PrimitiveOverloading p = <span class="keyword">new</span> PrimitiveOverloading();</span><br><span class="line">		p.testConstVal();</span><br><span class="line">		p.testChar();</span><br><span class="line">		p.testByte();</span><br><span class="line">		p.testShort();</span><br><span class="line">		p.testInt();</span><br><span class="line">		p.testLong();</span><br><span class="line">		p.testFloat();</span><br><span class="line">		p.testDouble();</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li>变量声明作用域在一个块内（一对大括号内）</li>
<li>当两个类创建在同一个项目下，同一个包下则可以不使用import，就可以直接调用另一个类<h1 id="例"><a href="#例" class="headerlink" title="例"></a>例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	<span class="keyword">int</span> month;</span><br><span class="line">	<span class="keyword">int</span> day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateTest</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		MyDate date = <span class="keyword">new</span> MyDate();</span><br><span class="line">		date.year = <span class="number">2021</span>;</span><br><span class="line">		date.month = <span class="number">9</span>;</span><br><span class="line">		date.day = <span class="number">22</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;The day is &quot;</span> + date.year </span><br><span class="line">					  + <span class="string">&quot;-&quot;</span>+ date.month + <span class="string">&quot;-&quot;</span>+ date.day);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
就是打印字符串，只是使用类来做了数据储存，类似结构体<br>下面看一个复杂一点的：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=-<span class="number">1</span>, b=-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	Point() &#123;</span><br><span class="line">		x = <span class="number">20</span>;</span><br><span class="line">		y = <span class="number">30</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(<span class="keyword">int</span> xValue, <span class="keyword">int</span> yValue)</span> </span>&#123;</span><br><span class="line">		xValue = <span class="number">100</span>;</span><br><span class="line">		yValue = <span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getLocation</span><span class="params">(Location locRef)</span> </span>&#123;</span><br><span class="line">		locRef.a = x;<span class="comment">//就是20</span></span><br><span class="line">		locRef.b = y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test0</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Point p = <span class="keyword">new</span> Point();</span><br><span class="line">		System.out.println(<span class="string">&quot;Object p’s value:&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;p.x = &quot;</span> + p.x +<span class="string">&quot;  p.y = &quot;</span> + p.y);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> xVal = -<span class="number">1</span>, yVal = -<span class="number">1</span>;</span><br><span class="line">		p.getData(xVal,yVal);<span class="comment">//传参不改变原值</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Pass by value:&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;xVal = &quot;</span> + xVal +<span class="string">&quot;  yVal = &quot;</span> + yVal);</span><br><span class="line">		</span><br><span class="line">		Location loc = <span class="keyword">new</span> Location();</span><br><span class="line">		p.getLocation(loc);<span class="comment">//引用可改变值</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Pass by reference:&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;xVal = &quot;</span> + loc.a + <span class="string">&quot;  yVal = &quot;</span> +loc.b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
再看一个带返回值的：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReturnValue</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> testScore = input.nextInt();</span><br><span class="line">		printGrade(testScore) ; <span class="comment">//调用返回类型Void方法</span></span><br><span class="line">		<span class="keyword">char</span> ret=getGrade(testScore);  <span class="comment">//调用返回类型非Void方法</span></span><br><span class="line">        System.out.println(ret);</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">printGrade</span><span class="params">(<span class="keyword">double</span> testscore)</span></span>&#123;  <span class="comment">//返回类型为void，可以有return，但是不能带表示式。</span></span><br><span class="line">                                  <span class="keyword">if</span> (testscore&lt;<span class="number">0</span> || testscore&gt;<span class="number">100</span>)&#123;</span><br><span class="line">                                          System.out.println(<span class="string">&quot;成绩输入错误&quot;</span>);</span><br><span class="line">                                          <span class="keyword">return</span>;  <span class="comment">//中断程序，该方法后面语句不会被执行，可以试一下，如果注释掉该行的执行情况</span></span><br><span class="line">                                  &#125;</span><br><span class="line">                                  <span class="keyword">if</span> (testscore&gt;=<span class="number">90.0</span>)&#123;</span><br><span class="line">                                          System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(testscore&gt;=<span class="number">80.0</span>)&#123;</span><br><span class="line">                                          System.out.println(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(testscore&gt;=<span class="number">70.0</span>)&#123;</span><br><span class="line">                                          System.out.println(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(testscore&gt;=<span class="number">60.0</span>)&#123;</span><br><span class="line">                                          System.out.println(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">                                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                          System.out.println(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">                                 &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>  <span class="title">getGrade</span><span class="params">(<span class="keyword">double</span> testscore)</span></span>&#123;  <span class="comment">//返回类型非void，则需要return+表示式。</span></span><br><span class="line">                                  </span><br><span class="line">                                  <span class="keyword">if</span> (testscore&lt;<span class="number">0</span> || testscore&gt;<span class="number">100</span>)&#123;</span><br><span class="line">                                          <span class="keyword">return</span> <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (testscore&gt;=<span class="number">90.0</span>)&#123;</span><br><span class="line">                                          <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(testscore&gt;=<span class="number">80.0</span>)&#123;</span><br><span class="line">                                           <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(testscore&gt;=<span class="number">70.0</span>)&#123;</span><br><span class="line">                                           <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">                                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(testscore&gt;=<span class="number">60.0</span>)&#123;</span><br><span class="line">                                           <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">                                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                          <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">                                 &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
基本和C一样</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>爪蛙</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构内存对齐TEST</title>
    <url>/2022/03/23/%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90TEST/</url>
    <content><![CDATA[<h1 id="win64-or-linux64"><a href="#win64-or-linux64" class="headerlink" title="win64 or linux64"></a>win64 or linux64</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    struct &#123;char a;int b;char c;&#125;X2;//1+3+4+1+3=12</span><br><span class="line">    struct &#123;int a;char b;&#125;X3;//4+1+3=8</span><br><span class="line">    struct &#123;char a;short b;&#125;X4;//1+1+2=4</span><br><span class="line">    struct &#123;char a;short b;char c;&#125;X5;//1+1+2+1+1=6</span><br><span class="line">    struct &#123;char a;long b;&#125;X6;//1+3+4=8 or 1+7+8=16</span><br><span class="line">    struct &#123;char a;long b;char c;&#125;X7;//1+3+4+1+3=12 or 1+7+8+1+7=24</span><br><span class="line">    struct &#123;char a;long long b;&#125;X8;//1+7+8=16</span><br><span class="line">    struct &#123;char a;long long b;char c;&#125;X9;//1+7+8+1+7=24</span><br><span class="line">    struct &#123;char a;int b;short c;&#125;X10;//1+3+4+2+2=12</span><br><span class="line">    struct &#123;char a;short b;char c;int d;&#125;X11;//1+1+2+1+3+4=12</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X2));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X3));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X4));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X5));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X6));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X7));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X8));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X9));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X10));</span><br><span class="line">    printf(&quot;%ld\n&quot;,sizeof(X11));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>网络概述</title>
    <url>/2022/03/01/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h1><ul>
<li>从<strong>网络实体视角</strong>观察：计算机终端设备、数据转发设备、数据传输链路</li>
<li>从<strong>网络架构视角</strong>观察：网络边缘、接入网、网络核心</li>
</ul>
<h2 id="网络核心两大功能"><a href="#网络核心两大功能" class="headerlink" title="网络核心两大功能"></a>网络核心两大功能</h2><ul>
<li>路由(routing)：决定转发策略（转发路径）</li>
<li>转发(forwarding)：作出转发行为</li>
</ul>
<h1 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h1><h2 id="按覆盖区域"><a href="#按覆盖区域" class="headerlink" title="按覆盖区域"></a>按覆盖区域</h2><p>局域网、园区网、城域网、广域网、空天网</p>
<h2 id="按应用场景"><a href="#按应用场景" class="headerlink" title="按应用场景"></a>按应用场景</h2><p>家庭网络、公司/机构网络、无线移动网络、运营商网络、天地一体化信息网络</p>
<h1 id="什么是互联网-internet"><a href="#什么是互联网-internet" class="headerlink" title="什么是互联网(internet)"></a>什么是互联网(internet)</h1><h2 id="从服务视角"><a href="#从服务视角" class="headerlink" title="从服务视角"></a>从服务视角</h2><ul>
<li>作为基础设施为应用提供服务</li>
<li>以提供编程接口方式提供服务</li>
</ul>
<h2 id="从结构角度"><a href="#从结构角度" class="headerlink" title="从结构角度"></a>从结构角度</h2><p>互联网：网络的网络<br>即：多级ISP分层网络<br><img src="/2022/03/01/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/1646125882244.png" alt="enter description here"></p>
<h1 id="网络数据传输方式"><a href="#网络数据传输方式" class="headerlink" title="网络数据传输方式"></a>网络数据传输方式</h1><ul>
<li>电路交换</li>
<li>分组交换<br>（P15~P22）<br>共同特点：<br>  多路复用</li>
</ul>
<p>不同之处：<br>    电路交换：预留带宽、独占资源<br>    分组交换：存储 转发、数据包形式(共享带宽、竞争资源)</p>
<h1 id="网络性能评价指标"><a href="#网络性能评价指标" class="headerlink" title="网络性能评价指标"></a>网络性能评价指标</h1><p>延迟、丢包、带宽、吞吐量<br>流量强度<img src="/2022/03/01/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/1646126512221.png" alt="流量强调计算"><br>瓶颈链路（水桶短板）如：<img src="/2022/03/01/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/1646126837274.png" alt="enter description here"></p>
<h2 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h2><ul>
<li>节点处理延迟</li>
<li>排队延迟</li>
<li>传输延迟(发送延迟)</li>
<li>传播延迟<br>（P25~P27）</li>
</ul>
<h2 id="丢包"><a href="#丢包" class="headerlink" title="丢包"></a>丢包</h2><ul>
<li>排队缓冲队列溢出</li>
<li>物理链路截断</li>
</ul>
<h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>单位bps<br>即物理链路理论上能承载的最大吞吐量</p>
<h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>单位bps/pps</p>
<ul>
<li>瞬时吞吐量(信息传输速率)</li>
<li>平均吞吐量(信息传输速度)</li>
</ul>
<h1 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h1><p>通信需要规则，协议建立规则（信息内容组织格式、信息交互顺序逻辑、信息收发处理逻辑）<br>互联网协议由Internet标准化组织定义<br>如：</p>
<ul>
<li>IEEE 电气与电子工程师协会（Institute of Electrical and Electronics Engineers）<pre><code>的IEEE 802.3(局域网标准)等
</code></pre>
</li>
<li>IETF 国际互联网工程任务组（The Internet Engineering Task Force)<pre><code>RFC 791(IP)
</code></pre>
</li>
</ul>
<h1 id="网络协议分层参考模型"><a href="#网络协议分层参考模型" class="headerlink" title="网络协议分层参考模型"></a>网络协议分层参考模型</h1><p><img src="/2022/03/01/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/1646127830631.png" alt="enter description here"></p>
<h2 id="为什么要分层"><a href="#为什么要分层" class="headerlink" title="为什么要分层"></a>为什么要分层</h2><ul>
<li>处理复杂系统明确结构关系</li>
<li>模块化便于系统维护和更新</li>
<li>网络本身具有复杂异构性</li>
<li>网络技术在高速更新迭代</li>
</ul>
<h2 id="模型的价值"><a href="#模型的价值" class="headerlink" title="模型的价值"></a>模型的价值</h2><ul>
<li>网络体系结构清晰,各个层级功能明确</li>
<li>层次之间接口明确,方便层内技术演进</li>
<li>层次内部协议统一,支持厂商互联互通</li>
</ul>
<h1 id="攻击威胁下的网络"><a href="#攻击威胁下的网络" class="headerlink" title="攻击威胁下的网络"></a>攻击威胁下的网络</h1><h2 id="常见攻击方式"><a href="#常见攻击方式" class="headerlink" title="常见攻击方式"></a>常见攻击方式</h2><ul>
<li>植入恶意软件（专门用于 损坏、破坏、窃取数据、主机或网络 或 对数据、主机或网络进行非法操作 的代码或软件，如病毒、蠕虫、特洛伊木马）</li>
<li>攻击服务器和网络基础设施</li>
<li>嗅探分组</li>
<li>伪装</li>
<li>修改或删除报文</li>
</ul>
<p>更多见第八章</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>SRWE 1-4</title>
    <url>/2022/03/08/%E7%BD%91%E7%BB%9C/SRWE1-4/</url>
    <content><![CDATA[<p>交换、路由和无线基础</p>
<h1 id="基本设备配置"><a href="#基本设备配置" class="headerlink" title="基本设备配置"></a>基本设备配置</h1><h2 id="使用初始设置配置交换机"><a href="#使用初始设置配置交换机" class="headerlink" title="使用初始设置配置交换机"></a>使用初始设置配置交换机</h2><p>在一台思科交换机开机之后，会经过五步启动顺序：</p>
<ul>
<li>步骤 1: 首先，交换机会加载一个存储在ROM中的上电<strong>自检 (POST) 程序</strong>。POST 会校验CPU子系统。它会测试 CPU、DRAM 以及构成 Flash 文件系统的闪存设备部分。</li>
<li>步骤 2: 接下来，交换机加载<strong>启动加载程序</strong>软件。启动加载程序是存储在 ROM 中并在 POST 成功完成后立即运行的小程序。</li>
<li>步骤 3: 启动加载程序执行<strong>低级 CPU 初始化</strong>。启动加载程序初始化 CPU 寄存器，寄存器控制物理内存的映射位置、内存量以及内存速度。</li>
<li>步骤 4: 启动加载程序<strong>初始化</strong>系统主板上的 <strong>Flash 文件系统</strong>。</li>
<li>步骤 5: 最后，启动加载程序找到并将默认的 <strong>IOS 操作系统</strong>软件映像<strong>加载到内存</strong>，并将对交换机的控制权转交给 IOS。</li>
</ul>
<h3 id="boot-system-命令"><a href="#boot-system-命令" class="headerlink" title="boot system 命令"></a>boot system 命令</h3><p>使用 boot system 全局配置模式命令来设置 BOOT 环境变量。<br>如：<code>boot system flash:/c2960-lanbasek9-mz.150-2.SE/c2960-lanbasek9-mz.150-2.SE.bin</code><br>| 命令 | 定义 |<br>| — | — |<br>| boot system| 主命令。 |<br>| flash:| 存储设备 |<br>| c2960-lanbasek9-mz.150-2.SE/| 文件系统的路径 |<br>| c2960-lanbasek9-mz.150-2.SE.bin| IOS 文件名称 |</p>
<h3 id="交换机-LED-指示灯"><a href="#交换机-LED-指示灯" class="headerlink" title="交换机 LED 指示灯"></a>交换机 LED 指示灯</h3><ul>
<li><strong>SYST</strong> - 系统LED</li>
<li><strong>RPS</strong> - 冗余电源系统LED</li>
<li><strong>STAT</strong> - 端口状态LED</li>
<li><strong>DUPLX</strong> - 端口双工模式LED</li>
<li><strong>SPEED</strong> - 端口速率LED</li>
<li><strong>POE</strong> - 以太网端口供电LED</li>
</ul>
<h3 id="从系统崩溃中恢复"><a href="#从系统崩溃中恢复" class="headerlink" title="从系统崩溃中恢复"></a>从系统崩溃中恢复</h3><h2 id="配置交换机端口"><a href="#配置交换机端口" class="headerlink" title="配置交换机端口"></a>配置交换机端口</h2><h2 id="安全远程访问"><a href="#安全远程访问" class="headerlink" title="安全远程访问"></a>安全远程访问</h2><h2 id="路由器基本配置"><a href="#路由器基本配置" class="headerlink" title="路由器基本配置"></a>路由器基本配置</h2><h2 id="验证直连网络"><a href="#验证直连网络" class="headerlink" title="验证直连网络"></a>验证直连网络</h2><h1 id="交换的概念"><a href="#交换的概念" class="headerlink" title="交换的概念"></a>交换的概念</h1><h2 id="帧转发"><a href="#帧转发" class="headerlink" title="帧转发"></a>帧转发</h2><h2 id="交换域"><a href="#交换域" class="headerlink" title="交换域"></a>交换域</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>寻址</title>
    <url>/2021/11/17/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E5%AF%BB%E5%9D%80%E4%B8%8E%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h1><p>寻址方式是规定如何对地址字段作出解释,以找到操作数</p>
<ul>
<li>操作数的位置<ul>
<li>堆栈<ul>
<li>主存开辟（软堆栈）</li>
<li>CPU中的寄存器组组成（硬堆栈）</li>
</ul>
</li>
<li>寄存器<ul>
<li>CPU寄存器</li>
<li>外设寄存器</li>
</ul>
</li>
<li>存储器<ul>
<li>主存</li>
<li>外存<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086568.png" alt="enter description here"></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>CPU能够直接访问的操作数只能存放在主存储器或CPU内的寄存器中<br><a href="https://dyinjin.github.io/2021/09/18/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%965/">x86具体操作</a></p>
<hr>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635790186316.png" alt="enter description here"></p>
<ul>
<li>立即寻址<br>  操作码字段后面的部分是操作数本身</li>
<li>直接寻址类<ul>
<li>直接寻址（主存直接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086555.png" alt="enter description here"></li>
<li>寄存器寻址（寄存器直接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086556.png" alt="enter description here"></li>
</ul>
</li>
<li>间接寻址类<ul>
<li>间接寻址（主存间接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086557.png" alt="enter description here"></li>
<li>寄存器间接寻址方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086558.png" alt="enter description here"></li>
<li>自增、减型寄存器间址方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086559.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086560.png" alt="enter description here"></li>
<li>堆栈寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086561.png" alt="enter description here"></li>
<li>多重间接寻址（主存多重间接寻址）方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086562.png" alt="enter description here"></li>
</ul>
</li>
<li>变址类<ul>
<li>变址寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086563.png" alt="enter description here"></li>
<li>基址寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086564.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086565.png" alt="comparison"></li>
<li>基址加变址方式<br>图略</li>
<li>相对寻址（浮动编址）<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086566.png" alt="enter description here"></li>
<li>页面寻址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631711086567.png" alt="enter description here"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编1（B站小甲鱼）</title>
    <url>/2021/09/14/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%961%EF%BC%88B%E7%AB%99%E5%B0%8F%E7%94%B2%E9%B1%BC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,b  //寄存器，数据</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">ax</span> //寄存器，寄存器</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>]//寄存器，内存单元</span><br><span class="line"><span class="keyword">mov</span> [<span class="built_in">bx</span>],<span class="built_in">ax</span>//内存单元，寄存器(这里注意编译器中不能写<span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="number">0</span>]会当作 <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span> 但debug中可以)</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span> //段寄存器，寄存器</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>，<span class="built_in">ds</span>//寄存器，段寄存器</span><br></pre></td></tr></table></figure>

<h2 id="add-sub"><a href="#add-sub" class="headerlink" title="add sub"></a>add sub</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span>/<span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="number">8H</span></span><br><span class="line"><span class="keyword">add</span>/<span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="built_in">bx</span></span><br><span class="line"><span class="keyword">add</span>/<span class="keyword">sub</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>]</span><br><span class="line"><span class="keyword">add</span>/<span class="keyword">sub</span> [<span class="built_in">bx</span>],<span class="built_in">ax</span></span><br></pre></td></tr></table></figure>
<p>add ds,ax;错误，不能直接操作ds（数据段寄存器）</p>
<h3 id="累加数据段中前三个字型数据"><a href="#累加数据段中前三个字型数据" class="headerlink" title="累加数据段中前三个字型数据"></a>累加数据段中前三个字型数据</h3><p>将123B0H~123BAH的内存单元定义为数据段</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">123BH</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span>//默认了<span class="built_in">ds</span>中的<span class="number">123BH</span>段地址</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">ax</span>,[<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>一个字型为两个字节型</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>寄存器CS和IP中存放着当前<strong>指令</strong>的段地址和偏移地址<br>同样 有段寄存器SS 用来存放栈顶的段地址<br>寄存器SP 存放栈顶的偏移地址<br>则：SS:SP 指向栈顶元素</p>
<h3 id="PUSH-POP"><a href="#PUSH-POP" class="headerlink" title="PUSH POP"></a>PUSH POP</h3><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ds</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">es</span></span><br></pre></td></tr></table></figure>
<p>以字为单元进行<br>则PUSH在存放数据时 SP先减二再取数据<br>POP 先拿数据再SP加二<br>没有溢出、出界检测</p>
<p>使用 sub ax,ax较mov ax,0进行清零操作更短（两个字节、三个字节）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2266H</span></span><br><span class="line"><span class="keyword">mov</span> [<span class="number">0</span>],<span class="built_in">ax</span>   <span class="comment">;与以下等效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1000H</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2266H</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br></pre></td></tr></table></figure>

<h1 id="开写"><a href="#开写" class="headerlink" title="开写"></a>开写</h1><p>参考<a href="https://www.cnblogs.com/dgwblog/p/11865850.html">Win10(64位)安装汇编环境(MASM)</a><br>配置一下这个“DOSBox 0.74 Options.bat”最后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[autoexec]</span><br><span class="line"># Lines in this section will be run at startup.</span><br><span class="line"># You can put your MOUNT lines here.</span><br><span class="line">mount d: d:\DOSBox\masm</span><br><span class="line">d:</span><br><span class="line">dir</span><br></pre></td></tr></table></figure>
<p>然后<br>masm name.asm;  (加分号！)<br>link name.obj;<br>name.exe<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631618692182.png"></p>
<h1 id="debug使用"><a href="#debug使用" class="headerlink" title="debug使用"></a>debug使用</h1><ul>
<li>r(register)寄存器操作<ul>
<li>只输入“r”来显示寄存器内容</li>
<li>“r ax”再输入值，可指定改变某个1寄存器值</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>d(dump)查看内存中的信息<ul>
<li>用“d 段地址:段偏移地址”显示从指定内存单元开始的128个单元的内容</li>
<li>接着使用“d”命令，可列出后续的内容</li>
<li>查看指定范围，用“d 段起始地址：起始偏移地址 结尾偏移地址”<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">d <span class="number">1000</span>:<span class="number">0</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>e(edit)改写内存中的内容<ul>
<li>用“e 起始地址(段地址:段偏移地址) 数据 数据…”来修改从起始地址开始的内存中的内容</li>
<li>也可以用e命令以提问的方式来逐个地修改从某一地址开始的内存单元中的内容，以从1000:10单元开始为例，步骤如下：<ul>
<li>输入e 1000:10，按enter键</li>
<li>debug显示起始地址1000:0010，和第一个单元的原始内容：00，然后光标停在“.”后面提示输入想要写入的数据，此时有两种选择：一是输入数据，然后按空格键，即输入数据修改当前的内存单元；二位不输入数据，直接按空格键，则不对当前内存单元进行改写。</li>
<li>当前单元处理完后（不论改写或者没有改写，只要按了空格键，就表示处理完成），debug将显示下一个内存单元的原始内容，并提示修改。</li>
<li>所以希望改写的内存单元改写完成后，按enter键，e命令操作结束。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631618692185.png"></p>
<hr>
<ul>
<li>u(un-assembly)反汇编机器码<ul>
<li>“u 段起始地址:起始偏移地址 结尾偏移地址 ”</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>t(trace)单步调试命令<ul>
<li>老规矩，一步一步走</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>a(assembly)以汇编指令形式写指令到内存中<ul>
<li>代替e命令的机器码指令，直接用汇编码写入</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>p执行汇编程序，单步跟踪。<ul>
<li>执行 int 21</li>
<li>t p区别<ul>
<li>单步跟踪命令（单步进入(step in)）：t命令是单步执行，是真的单步执行，碰到任何地方，都会一步步执行，遇到子程序，也会进入里面一步步执行再返回</li>
<li>单步执行命令（单步通过(step over)）：p命令，大多数情况与t一样，只有当遇到call调用子程序的时候，p命令直接执行完这个程序，而t命令会进入里面一步步执行。</li>
</ul>
</li>
<li>结束debug一般”p”+”q”+”exit”</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>g执行汇编指令<ul>
<li>使用方法是：g [=起始地址] [断点地址]，从起始地址开始执行到断点地址。如果不设置断点，则程序一直运行到中止指令停止；如果不设置起始地址，则会向下运行到断点地址</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编0MOOC笔记</title>
    <url>/2021/09/14/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%960MOOC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><font size="1" color="gray"><del>这个MOOC不得行啊</del></font><br><font size="1">后面还是看的B站orz</font><br>回头来看，还是MOOC讲的系统</p>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631551561772.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561773.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561774.png" width="600/">

<h2 id="补码运算"><a href="#补码运算" class="headerlink" title="补码运算"></a>补码运算</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562085.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562479.png" width="600/">

<h1 id="CPU基本结构"><a href="#CPU基本结构" class="headerlink" title="CPU基本结构"></a>CPU基本结构</h1><hr>
<p>两种执行方式及特点<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561884.png" width="600/"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561926.png" width="600/"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561928.png" width="600/"></p>
<h2 id="8086CPU结构"><a href="#8086CPU结构" class="headerlink" title="8086CPU结构"></a>8086CPU结构</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561929.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561930.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561931.png" width="600/">

<h2 id="8086CPU寄存器"><a href="#8086CPU寄存器" class="headerlink" title="8086CPU寄存器"></a>8086CPU寄存器</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561954.png" width="600/">

<hr>
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562012.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561955.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561956.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561885.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561923.png" width="600/">

<hr>
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561957.png" width="600/">

<hr>
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561958.png" width="600/">

<hr>
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551561959.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562144.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562170.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562116.png" width="600/">

<p>注意AF、OF区别<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562142.png" width="600/"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562173.png" width="600/"></p>
<hr>
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562204.png" width="600/">

<h1 id="堆栈及操作"><a href="#堆栈及操作" class="headerlink" title="堆栈及操作"></a>堆栈及操作</h1><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562335.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562336.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562171.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562476.png" width="600/">
<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631551562172.png" width="600/">

<h1 id="HEXO技巧"><a href="#HEXO技巧" class="headerlink" title="HEXO技巧"></a>HEXO技巧</h1><p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;XXX&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;</span><br><span class="line">&lt;img src=&quot;XXX&quot; width=256 height=256 /&gt;</span><br></pre></td></tr></table></figure>
<p>进行可控插入图片</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编2</title>
    <url>/2021/09/15/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%962/</url>
    <content><![CDATA[<p>又换了个人<a href="https://www.bilibili.com/video/BV1CJ411D7yD?p=6">看</a><br>玉涵大大</p>
<h1 id="inc"><a href="#inc" class="headerlink" title="inc"></a>inc</h1><p>等于“++”</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inc</span> <span class="built_in">ax</span></span><br></pre></td></tr></table></figure>

<h1 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h1><p>循环<br>先看例子：计算2<sup>12</sup></p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codee</span><br><span class="line"></span><br><span class="line">codee <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line">	start：<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">2</span></span><br><span class="line">				<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">11</span></span><br><span class="line"><span class="symbol">				s:</span> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line">				<span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">				 <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">				<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">codee ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>cx(计数寄存器)存放为循环次数，s为标识指令地址（即从哪里开始循环）<br>先向cx存次数，标号：执行循环语句，最后loop+标记<br>本质上是指令指针(IP)的移动，先(cx)减一，再判断其值若不为0则转至s标号处，为0则执行下一条</p>
<h2 id="汇编中-ffffh-编译器认为是标识符-要写为-0ffffh"><a href="#汇编中-ffffh-编译器认为是标识符-要写为-0ffffh" class="headerlink" title="汇编中 ffffh 编译器认为是标识符,要写为 0ffffh"></a>汇编中 ffffh 编译器认为是标识符,要写为 0ffffh</h2><h2 id="将ffff-0-ffff-b单元的数据的和，结果储存在dx中"><a href="#将ffff-0-ffff-b单元的数据的和，结果储存在dx中" class="headerlink" title="将ffff;0~ffff:b单元的数据的和，结果储存在dx中"></a>将ffff;0~ffff:b单元的数据的和，结果储存在dx中</h2><p>先将8位数据赋值到另一个16位寄存器bx中，再作加:</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0ffffh</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">12</span></span><br><span class="line"><span class="symbol">		</span></span><br><span class="line"><span class="symbol">s:</span>	  <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">ds</span>:[<span class="built_in">bx</span>]</span><br><span class="line">		   <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">0</span></span><br><span class="line">		   <span class="keyword">add</span> <span class="built_in">dx</span>,<span class="built_in">ax</span></span><br><span class="line">		   <span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">		<span class="keyword">loop</span> s</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">		<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h1 id="段的应用"><a href="#段的应用" class="headerlink" title="段的应用"></a>段的应用</h1><p>下两例：不将数据段栈段和代码段分开<br>技术算以下8个数据的和，结果放在ax中</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">		<span class="built_in">dw</span> <span class="number">0001h</span>,<span class="number">0002h</span>,<span class="number">0003h</span>,<span class="number">0010h</span>,<span class="number">0020h</span>,<span class="number">0030h</span>,<span class="number">0100h</span>,<span class="number">0200h</span><span class="comment">;写单位数据</span></span><br><span class="line"><span class="symbol">		</span></span><br><span class="line"><span class="symbol">start:</span>	<span class="comment">;指定开始执行正确代码</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span><span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">cs</span>:[<span class="built_in">bx</span>]<span class="comment">;代码段的偏移地址为0、1、2、3的东西即目标数据</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>栈段<br>倒置数据</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">		<span class="built_in">dw</span> <span class="number">0001h</span>,<span class="number">0002h</span>,<span class="number">0003h</span>,<span class="number">0004h</span>,<span class="number">0005h</span>,<span class="number">0006h</span>,<span class="number">0007h</span>,<span class="number">0008h</span><span class="comment">;写单位数据</span></span><br><span class="line">		<span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span><span class="comment">;sp指向的最后一个零</span></span><br><span class="line"><span class="symbol">		</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span><span class="comment">;指令段-》栈段</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">30h</span><span class="comment">;48即（8+16）*2最后一个零</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span><span class="keyword">push</span> <span class="built_in">cs</span>:[<span class="built_in">bx</span>]<span class="comment">;目标数据入栈</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">z:</span><span class="keyword">pop</span> <span class="built_in">cx</span>:[<span class="built_in">bx</span>]</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> z</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631812845760.png"><br>这两段代码认真debug看一下每一步</p>
<hr>
<p>当然一般是分开的：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg,<span class="built_in">ds</span>:datasg,<span class="built_in">ss</span>:stacksg</span><br><span class="line">datasg <span class="meta">segment</span></span><br><span class="line">		<span class="built_in">dw</span> <span class="number">0001h</span>,<span class="number">0002h</span>,<span class="number">0003h</span>,<span class="number">0004h</span>,<span class="number">0005h</span>,<span class="number">0006h</span>,<span class="number">0007h</span>,<span class="number">0008h</span><span class="comment">;写单位数据</span></span><br><span class="line">datasg ends</span><br><span class="line"></span><br><span class="line">stacksg <span class="meta">segment</span></span><br><span class="line">		<span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span><span class="comment">;sp指向的最后一个零</span></span><br><span class="line">stacksg ends</span><br><span class="line"></span><br><span class="line">codesg <span class="meta">segment</span></span><br><span class="line"><span class="symbol">		</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,stacksg<span class="comment">;不能直接写mov ss,stacksg</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span><span class="comment">;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">20h</span><span class="comment">;48即（8+16）*2最后一个零</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,datasg</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span><span class="keyword">push</span> [<span class="built_in">bx</span>]<span class="comment">;即ds:[bx]代替了cs:[bx]</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">z:</span><span class="keyword">pop</span> [<span class="built_in">bx</span>]</span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> z</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631812845755.png" alt="入栈"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631812845756.png" alt="出栈"></p>
<h1 id="其它一些"><a href="#其它一些" class="headerlink" title="其它一些"></a>其它一些</h1><p>debug中数据查看是每位反向的<br>debug默认输入16进制，编译时默认10进制</p>
<ul>
<li>and<br>常用<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">10111111b</span></span><br></pre></td></tr></table></figure>
对指定位置0</li>
<li>or<br>常用<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="built_in">al</span>,<span class="number">10111111b</span></span><br></pre></td></tr></table></figure>
对指定位置1</li>
<li>xor(异或)<br>常用<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">xor</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br></pre></td></tr></table></figure>
对寄存器置零</li>
<li>inc自增</li>
<li>dec自减</li>
<li>小写字符=大写字符+20h</li>
</ul>
<h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2><ul>
<li>dw定义字类型变量，一个字数据占2个字节(16位)单元，读完一个，偏移量加2</li>
<li>db定义字节类型变量，一个字节数据占1个字节(8位)单元，读完一个，偏移量加1</li>
<li>dd定义双字类型变量，一个双字数据占4个字节(32位)单元，读完一个，偏移量加4<br>伪指令db、dw、dd都可以定义字符串，但最多的是用db来定义字符串，第一个原因是dw、dd定义的字符串到了内存中排序是相反的。</li>
<li>dup是一个操作符，在汇编语言中同db、dw、dd等一样，也是由编译器识别处理的符号。它是和db、dw、dd等数据定义伪指令配合使用的，用来进行数据的重复。<br>dup的使用格式如下：<br>db 重复的次数 dup (重复的字节型数据)。<br>dw 重复的次数 dup (重复的字型数据)。<br>dd 重复的次数 dup (重复的双字数据)。<br>dup是一个十分有用的操作符，比如我们要定义一个容量为200个字节的栈段，如果不用dup，则需要大量的代码来进行定义。如果用dup的话：<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">stack <span class="meta">segment</span></span><br><span class="line"><span class="built_in">db</span> <span class="number">200</span> dup (<span class="number">0</span>)</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编3</title>
    <url>/2021/09/17/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%963/</url>
    <content><![CDATA[<h1 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h1><p> bx（基址寄存器）bp（基址指针）si（源变址寄存器）di（目的变址寄存器）<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631812796811.png" alt="enter description here"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">cx</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">ax</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">dx</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">ds</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>+<span class="built_in">bp</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">si</span>+<span class="built_in">di</span>]</span><br></pre></td></tr></table></figure>
<p>全错:(<br>其它寄存器不能用于寻址，不能基址+基址或变址+变址</p>
<h2 id="注意bp"><a href="#注意bp" class="headerlink" title="注意bp"></a>注意bp</h2><p>bp默认段寄存器为ss(栈段)，且bp+ 的段寄存器也为ss</p>
<hr>
<p>可单独使用</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">si</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">di</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bp</span>]</span><br></pre></td></tr></table></figure>
<p>可基址搭配变址</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>+<span class="built_in">si</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>+<span class="built_in">di</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bp</span>+<span class="built_in">si</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bp</span>+<span class="built_in">di</span>]</span><br></pre></td></tr></table></figure>
<p>加上立即数(idata)等等，详细分类以下</p>
<h2 id="可见"><a href="#可见" class="headerlink" title="可见"></a><a href="https://dyinjin.github.io/2021/09/15/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/4/">可见</a></h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631812796912.png" alt="enter description here"></p>
<h2 id="ptr"><a href="#ptr" class="headerlink" title="ptr"></a>ptr</h2><p>byte ptr或word ptr指明内存单元长度</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>],<span class="number">1</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">bx</span>]<span class="comment">;否则是将由地址bx和地址bx+1组成的一个字加一</span></span><br></pre></td></tr></table></figure>
<p>push、pop一定针对字型(16)</p>
<h1 id="div"><a href="#div" class="headerlink" title="div"></a>div</h1><p>其中<br>除数：8位和16位两种<br>被除数：默认放在 ax 或 dx和ax 中(dx存放高16位，ax存放低16位)<br>如果除数为8位，则ax中al存储商ah存储余数；如果除数为16位，则ax存储商dx存储余数</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">div</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>即： (al)=(ax)/((ds)*16+0)    之商<br>        (ah)=(ax)/((ds)*16+0)  之余</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">div</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>即： (ax)=[(dx)*10000h+(ax)]/((ds)*16+0)    之商<br>        (dx)=[(dx)*10000h+(ax)]/((ds)*16+0)  之余</p>
<h1 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h1><p>即修改cs、ip的指令<br>段内转移：只修改ip，比如jmp ax<br>段间转移：同时修改cs:ip，比如jmp 1000:0<br>短转移：IP的修改范围为-128字节～127字节（2的8次方，8位）<br>近转移：IP的修改范围为-32768字节～32767字节（2的16次方，16位）</p>
<h2 id="JMP标号转移"><a href="#JMP标号转移" class="headerlink" title="JMP标号转移"></a>JMP标号转移</h2><h3 id="jmp-short-s"><a href="#jmp-short-s" class="headerlink" title="jmp short s"></a>jmp short s</h3><p>转到标号处执行命令<br>段内短转移<br>范围-128～127</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jmp</span> short s</span><br><span class="line"><span class="symbol">s:</span> ....</span><br></pre></td></tr></table></figure>

<h3 id="jmp-near-ptr-s"><a href="#jmp-near-ptr-s" class="headerlink" title="jmp near ptr s"></a>jmp near ptr s</h3><p>转到标号处执行命令<br>段内近转移<br>范围-32768～32767</p>
<h3 id="jmp-far-ptr-s"><a href="#jmp-far-ptr-s" class="headerlink" title="jmp far ptr s"></a>jmp far ptr s</h3><p>转到标号处执行命令<br>段间转移，同时修改CS和IP</p>
<h2 id="JMP地址转移"><a href="#JMP地址转移" class="headerlink" title="JMP地址转移"></a>JMP地址转移</h2><h3 id="jmp-16位寄存器"><a href="#jmp-16位寄存器" class="headerlink" title="jmp [16位寄存器]"></a>jmp [16位寄存器]</h3><h3 id="jmp-word-ptr-段寄存器-偏移"><a href="#jmp-word-ptr-段寄存器-偏移" class="headerlink" title="jmp word ptr 段寄存器:[偏移]"></a>jmp word ptr 段寄存器:[偏移]</h3><p>段内转移<br>从内存单元地址出开始存放着一个字，是转移的目的偏移地址，改变IP</p>
<h3 id="jmp-dword-ptr-段寄存器-偏移"><a href="#jmp-dword-ptr-段寄存器-偏移" class="headerlink" title="jmp dword ptr 段寄存器:[偏移]"></a>jmp dword ptr 段寄存器:[偏移]</h3><p>段间转移<br>从内存单元地址处开始存放着两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址，同时改变CS、IP</p>
<h2 id="JCXZ条件转移"><a href="#JCXZ条件转移" class="headerlink" title="JCXZ条件转移"></a>JCXZ条件转移</h2><p>短转移</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((cx)==0) jmp short 标号;</span><br></pre></td></tr></table></figure>
<p>这么个意思</p>
<h2 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h2><p>循环，本质也是转移指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(cx)--;</span><br><span class="line">if((cx)!=0)jmp short 标号;</span><br></pre></td></tr></table></figure>

<h2 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a>NOP</h2><p>啥也不是，填充</p>
<h2 id="OFFSET"><a href="#OFFSET" class="headerlink" title="OFFSET"></a>OFFSET</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">di</span>,offect s</span><br><span class="line"><span class="symbol">s:</span> ...</span><br></pre></td></tr></table></figure>
<p>取标号地址</p>
<hr>
<p>使用到栈时，单步debug(t)会覆盖栈ss，而(g)的结果正确<br>涉及单步debug时的中断原理</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编5</title>
    <url>/2021/09/18/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%965/</url>
    <content><![CDATA[<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><h2 id="FLAGS"><a href="#FLAGS" class="headerlink" title="FLAGS"></a>FLAGS</h2><p>作用</p>
<ol>
<li>用来存储相关指令的某些执行结果</li>
<li>用来为CPU执行相关指令提供行为依据</li>
<li>用来控制CPU的相关工作方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631971457417.png" alt="enter description here"><br>空位为未定义保留位</li>
</ol>
<h3 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h3><ol>
<li>flag的第六位是ZF，<strong>零标志位</strong>。</li>
<li>它记录相关指令执行后，其结果是否为0。</li>
<li>如果结果为0，那么zf=1；如果结果不为0，那么zf=0。    </li>
</ol>
<h3 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h3><ol>
<li>flag的第2位是PF，<strong>奇偶标志位</strong>。</li>
<li>记录相关指令执行后，结果的所有bit位中1的个数是否是偶数。</li>
<li>如果结果bit位中有 偶数个1，则pf=1，奇数个1，pf=0。</li>
</ol>
<h3 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h3><ol>
<li>flag的第7位是 SF（symbol flag），<strong>符号标志位</strong>。</li>
<li>它记录相关指令执行后，结果是否为负。</li>
<li>如果为负，sf=1；非负，则sf=0。</li>
</ol>
<h3 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h3><ol>
<li>flag的第0位是CF，<strong>进位标志位</strong>。 </li>
<li>一般情况下，在进行<strong>无符号数运算</strong>的时候，它记录了运算结果的最高有效位向更高位的进位值，或从更高位的借位值。</li>
</ol>
<h3 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h3><ol>
<li>flag的第11位是OF，<strong>溢出标志位</strong>。</li>
<li>OF记录了<strong>有符号数运算</strong>结果是否溢出。</li>
<li>如果溢出，OF=1，没有则OF=0。</li>
</ol>
<h2 id="adc"><a href="#adc" class="headerlink" title="adc"></a>adc</h2><p>adc是带进位加法指令，它利用了CF位上的记录的进位值。<br>类add但带了CF<br>功能：对象1=对象1+对象2+CF</p>
<h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><p>很明显，之前有了带进位加法adc，这个就是带借位减法。<br>类sub但带了CF<br>功能：对象1=对象1-对象2-CF<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631971457489.png" alt="enter description here"></p>
<h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><p>cmp是比较指令，cmp的功能相当于减法指令，但是不保存结果<br>功能：对象1-对象2，但不保存结果，不改变对象，只对标志寄存器进行重置<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631971457633.png" alt="enter description here"></p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>Test命令将两个操作数进行逻辑与运算，并根据运算结果设置相关的标志位。但是，Test命令的两个操作数不会被改变。</p>
<h1 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h1><h2 id="je-equl"><a href="#je-equl" class="headerlink" title="je(equl)"></a>je(equl)</h2><p>cmp后等于则转移（zf=1）</p>
<h2 id="jne"><a href="#jne" class="headerlink" title="jne"></a>jne</h2><p>cmp后不等于则转移（zf=0）</p>
<hr>
<p>相对于无符号数</p>
<h2 id="jb-below"><a href="#jb-below" class="headerlink" title="jb(below)"></a>jb(below)</h2><p>cmp后低于则转移（cf=1）</p>
<h2 id="jnb"><a href="#jnb" class="headerlink" title="jnb"></a>jnb</h2><p>cmp后不低于则转移（cf=0）</p>
<h2 id="ja-above"><a href="#ja-above" class="headerlink" title="ja(above)"></a>ja(above)</h2><p>cmp后高于则转移（cf=0&amp;&amp;zf=0）</p>
<h2 id="jna"><a href="#jna" class="headerlink" title="jna"></a>jna</h2><p>cmp不高于则转移（cf=1&amp;&amp;zf=1）</p>
<hr>
<p>相对于有符号数</p>
<h2 id="jl-less"><a href="#jl-less" class="headerlink" title="jl(less)"></a>jl(less)</h2><p>cmp后小于则转移</p>
<h2 id="jnl"><a href="#jnl" class="headerlink" title="jnl"></a>jnl</h2><p>cmp后不小于则转移</p>
<h2 id="jg-greater"><a href="#jg-greater" class="headerlink" title="jg(greater)"></a>jg(greater)</h2><p>cmp后大于则转移</p>
<h2 id="jng"><a href="#jng" class="headerlink" title="jng"></a>jng</h2><p>cmp后不大于则转移</p>
<h1 id="DF-definition-flag-和串传送"><a href="#DF-definition-flag-和串传送" class="headerlink" title="DF(definition flag)和串传送"></a>DF(definition flag)和串传送</h1><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>也是flag之一<br>df=0 每次操作后si di递增<br>df=1 每次操作后si di递减<br>唯一可修改的标志位</p>
<h3 id="cld"><a href="#cld" class="headerlink" title="cld"></a>cld</h3><p>df清零</p>
<h3 id="std"><a href="#std" class="headerlink" title="std"></a>std</h3><p>df置1</p>
<h2 id="rep"><a href="#rep" class="headerlink" title="rep"></a>rep</h2><p>rep movsb<br>相当于：<br>s:<br>    movsb<br>    loop s<br>(循环则需预先设置cx)</p>
<h2 id="movsb"><a href="#movsb" class="headerlink" title="movsb"></a>movsb</h2><p>1、((es)*16+(di))=((ds)*16+(si))<br>2、如果df=0 则:<br>inc si<br>inc di<br> 如果df=1 则:<br> dec si<br> dec di</p>
<h2 id="movsw"><a href="#movsw" class="headerlink" title="movsw"></a>movsw</h2><p>按字操作，di和si增减单位为2字节<br>mov es:[di],word ptr ds:[si]<br>如果df=0 则:<br>add si,2<br>add di,2<br> 如果df=1 则:<br>sub si,2<br>sub di,2</p>
<h1 id="题"><a href="#题" class="headerlink" title="题"></a>题</h1><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631971457533.png" alt="enter description here"></p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span><span class="comment">;指向W</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">16</span><span class="comment">;指向第一个0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">16</span></span><br><span class="line">	<span class="keyword">cld</span></span><br><span class="line">	<span class="keyword">rep</span> <span class="keyword">movsb</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h1 id="pushf和popf"><a href="#pushf和popf" class="headerlink" title="pushf和popf"></a>pushf和popf</h1><p>pushf的功能是将标志寄存器的值压栈，而popf就是将其出栈，扔入flag。<br>用于中断保护“现场”<br>popf可用于修改标志位</p>
<h1 id="debug中显示的标志位"><a href="#debug中显示的标志位" class="headerlink" title="debug中显示的标志位"></a>debug中显示的标志位</h1><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631971457630.png" alt="enter description here"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编4</title>
    <url>/2021/09/17/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%964/</url>
    <content><![CDATA[<h1 id="题"><a href="#题" class="headerlink" title="题"></a>题</h1><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:codesg</span><br><span class="line">codesg <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"><span class="symbol">s:</span></span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">di</span>,offect s</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,offect s2</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span>:[<span class="built_in">si</span>]</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cs</span>:[<span class="built_in">di</span>],<span class="built_in">ax</span></span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">s0:</span></span><br><span class="line">	jump short s</span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">s1:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">s2:</span></span><br><span class="line">	<span class="keyword">jmp</span> short s1</span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>这段代码首先用<br>    mov di,offect s<br>    mov si,offect s2<br>    mov ax,cs:[si]<br>    mov cs:[di],ax<br>将s2处代码写到s处<br>然后接着执行s0,跳到s,执行被写入的<strong>jmp short s1</strong><br>关键来了<br>汇编中jmp short X的本质是由编译器计算出当前地址举例要跳转标号的偏移值<br>再进行相对偏移；<br>所以<strong>jmp short s1</strong>实际是向前跳8个字节的意思（mov ax,0    int 21h    mov   ax,0这三条指令长8个字节）到原来的s1<br>但现在这句话被简单拷贝在了s处，电脑则也只是向前跳8个字节（不管前面到哪里），所以ip指针会向前执行到mov ax,4c00h处（mov ax,4c00h    int 21h       mov ax,0也是8个字节长）最后结束</p>
<hr>
<hr>
<p>另一个实用的程序<br>属性字节格式：</p>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1631889385422.png" alt="enter description here"><br>（二进制）<br>16*16=256=2^8</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code,<span class="built_in">ds</span>:data</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"><span class="built_in">dw</span> <span class="number">1920</span>,<span class="number">2080</span>,<span class="number">2240</span>,<span class="number">64</span><span class="comment">;位置 共2*4=8</span></span><br><span class="line"><span class="built_in">db</span> <span class="string">&#x27;welcome to dyinj&#x27;</span><span class="comment">;显示字符 共16</span></span><br><span class="line"><span class="built_in">db</span> <span class="number">82h</span>,<span class="number">0ach</span>,<span class="number">0f9h</span><span class="comment">;属性字节（不能字母开头）</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span><span class="comment">;数据段该去哪去哪</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0B800h</span><span class="comment">;从此处开始的二维数组来代表屏幕显示（显存）</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span><span class="comment">;附加段存字符显示段位置</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">3</span><span class="comment">;三行</span></span><br><span class="line">	<span class="keyword">xor</span> <span class="built_in">di</span>,<span class="built_in">di</span></span><br><span class="line">	<span class="keyword">xor</span> <span class="built_in">si</span>,<span class="built_in">si</span></span><br><span class="line"><span class="symbol">s1:</span></span><br><span class="line"><span class="comment">;控制属性和位置的行循环</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">di</span><span class="comment">;ds:di行位置1920，+2=2080，+4=2240</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">div</span> <span class="built_in">bl</span><span class="comment">;将ax除二</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>,[<span class="built_in">si</span>+<span class="number">24</span>]<span class="comment">;24+二分之di为属性字符开始82h,0ach,0f9h 即属性码</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,<span class="built_in">ds</span>:[<span class="number">6</span>]<span class="comment">;列位置64</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bp</span>,[<span class="built_in">di</span>]<span class="comment">;行位置1920，2080，2240</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="built_in">cx</span><span class="comment">;保存cx</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">16</span></span><br><span class="line"><span class="symbol">	s2:</span></span><br><span class="line">	<span class="comment">;控制显示字符的列循环</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">bx</span>+<span class="number">8</span>]<span class="comment">;welcome的w开始 即字符码</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bp</span>+<span class="built_in">si</span>],<span class="built_in">al</span><span class="comment">;存入16位单字符码到显存低字节</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bp</span>+<span class="built_in">si</span>+<span class="number">1</span>],<span class="number">ah</span><span class="comment">;存入16位属性码到显存高字节</span></span><br><span class="line">		<span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">		<span class="keyword">add</span> <span class="built_in">si</span>,<span class="number">2</span></span><br><span class="line">		<span class="keyword">loop</span> s2</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">dx</span><span class="comment">;还原保存的cx</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s1</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h1 id="ret-retf"><a href="#ret-retf" class="headerlink" title="ret/retf"></a>ret/retf</h1><p>和上一章不同在于用的是栈<br>pop栈中数据给指令指针<br>回忆：PUSH在存放数据时 SP先减二再取数据；POP 先拿数据再SP加二</p>
<h2 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h2><p>指令用栈中的数据，修改IP的内容，从而实现近转移</p>
<ol>
<li>(IP) = ((ss)*16 + (sp))</li>
<li>(SP) = (sp) + 2</li>
</ol>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line">    <span class="built_in">db</span> <span class="number">16</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">            <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"><span class="symbol">    start:</span>  </span><br><span class="line">			<span class="keyword">mov</span> <span class="built_in">ax</span>, stack</span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span><span class="comment">;注此时不在栈中</span></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">ret</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h2 id="retf"><a href="#retf" class="headerlink" title="retf"></a>retf</h2><p>指令用栈中的数据，修改CS和IP的内容，从而实现远转移</p>
<ol>
<li>(IP) = ((ss) * 16 + (sp))</li>
<li>(SP) = (sp) + 2</li>
<li>(CS) = ((ss) * 16 + (sp))</li>
<li>(SP) = (sp) + 2</li>
</ol>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line">    <span class="built_in">db</span> <span class="number">16</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">            <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"><span class="symbol">    start:</span>  </span><br><span class="line">			<span class="keyword">mov</span> <span class="built_in">ax</span>, stack</span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ss</span>, <span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">sp</span>, <span class="number">16</span></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">push</span> <span class="built_in">cs</span></span><br><span class="line">            <span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">bx</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">retf</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h1 id="call"><a href="#call" class="headerlink" title="call"></a>call</h1><p>call</p>
<ol>
<li>将当前的ip或cs和ip压入栈中</li>
<li>转移</li>
</ol>
<p>比jmp多了压栈</p>
<h2 id="call-s-标号"><a href="#call-s-标号" class="headerlink" title="call s(标号)"></a>call s(标号)</h2><p>(sp)=(sp)-2<br>((ss)*16+(sp))=ip<br>(ip)=(ip)+16位位移</p>
<p>16位位移=标号处地址-call指令后第一个字节的地址<br>范围-32768~332767</p>
<h2 id="call-far-ptr-s-标号"><a href="#call-far-ptr-s-标号" class="headerlink" title="call far ptr s(标号)"></a>call far ptr s(标号)</h2><p>(sp)=(sp)-2<br>((ss)*16+(sp))=(cs)<br>(sp)=(sp)-2<br>((ss)*16+(sp))=(ip)<br>(cs)=标号所在段地址<br>(ip)=标号所在段中的偏移地址</p>
<p>先压的是cs后压ip</p>
<h2 id="call-reg-16位寄存器"><a href="#call-reg-16位寄存器" class="headerlink" title="call reg(16位寄存器)"></a>call reg(16位寄存器)</h2><p>(sp)=(sp)-2<br>((ss)*16+(sp))=(ip)<br>(ip)=(16位寄存器)</p>
<h2 id="call-word-ptr-s-标号-call-dword-ptr-s-标号"><a href="#call-word-ptr-s-标号-call-dword-ptr-s-标号" class="headerlink" title="call word ptr s(标号)/call dword ptr s(标号)"></a>call word ptr s(标号)/call dword ptr s(标号)</h2><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>call和ret组合使用<br>求2的3次方存入bx</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">    start:</span>  </span><br><span class="line">			<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1</span></span><br><span class="line">			<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">3</span></span><br><span class="line">			<span class="keyword">call</span> s</span><br><span class="line">			<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">ax</span></span><br><span class="line">			</span><br><span class="line">            <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">4c00h</span></span><br><span class="line">            <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"><span class="symbol">s:</span></span><br><span class="line">			<span class="keyword">add</span> <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line">			<span class="keyword">loop</span> s</span><br><span class="line">			<span class="keyword">ret</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>n的三次方</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">cube:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mul</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mul</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">ret</span></span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span><span class="comment">;单字节长</span></span><br><span class="line">	<span class="built_in">dd</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span><span class="comment">;双字节长</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span><span class="comment">;123开始</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">16</span><span class="comment">;000开始</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">s:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,[<span class="built_in">si</span>]<span class="comment">;参数bx填入</span></span><br><span class="line">	<span class="keyword">call</span> cube</span><br><span class="line">	<span class="keyword">mov</span> [<span class="built_in">di</span>],<span class="built_in">ax</span><span class="comment">;得到返回值ax</span></span><br><span class="line">	<span class="keyword">mov</span> [<span class="built_in">di</span>+<span class="number">2</span>],<span class="built_in">dx</span><span class="comment">;返回值dx（如果是16位乘法，结果高位默认在dx中存放，低位在ax中存放。见下）</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">si</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">4</span> </span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">cube:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mul</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mul</span> <span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>


<h1 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h1><ol>
<li>两个相乘的数：要么都是8位，要么都是16位。如果是8位，一个默认放在al中，另一个放在8位reg或内存字节单元中；如果是16位，一个在AX中，另一个在16位reg或内存字单元中。</li>
<li>结果，如果是8位乘法，结果默认放在ax中；如果是16位乘法，结果高位默认在dx中存放，低位在ax中存放。</li>
</ol>
<p>格式：mul reg或mul 内存单元</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">5h</span><span class="comment">;AX = 0005h</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bl</span>, <span class="number">10h</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">bl</span><span class="comment">; AX = 0050h</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2022/03/04/%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="数据库及其系统概念"><a href="#数据库及其系统概念" class="headerlink" title="数据库及其系统概念"></a>数据库及其系统概念</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据(Data)是数据库中存储的基本对象</p>
<ul>
<li>数据的定义<br>  描述事物的符号记录</li>
<li>数据的种类<br>  文字、图形、图象、声音</li>
<li>数据的特点<br>  数据与其语义是不可分的</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库的<strong>定义</strong>：<br>数据库(Database,简称DB)是长期储存在计算机内、有组织的、可共享的大量数据的集合。<br>数据库的基本<strong>特征</strong>：</p>
<ul>
<li>数据按一定的数据模型组织、描述和储存</li>
<li>可为各种用户共享</li>
<li>冗余度较小</li>
<li>数据独立性较高</li>
<li>易扩展<br>概括地讲，数据库具有永久存储、有组织、可共享三个基本特点。</li>
</ul>
<h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2><ul>
<li>什么是DBMS：<br>  数据库管理系统（Database Management System，简称DBMS）是位于用户与操作系统之间的一层数据管理软件。</li>
<li>DBMS的用途：<br>  科学地组织和存储数据、高效地获取和维护数据<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3></li>
<li><strong>数据定义功能</strong><br>  提供数据定义语言(DDL) 定义数据库中的数据对象</li>
<li><strong>数据组织、存储和管理</strong><br>  分类组织、存储和管理各种数据<br>  确定组织数据的文件结构和存取方式<br>  实现数据之间的联系<br>  提供多种存取方法提高存取效率</li>
<li><strong>数据操纵功能</strong><br>  提供数据操纵语言(DML)<br>  实现对数据库的基本操作 (查询、插入、删除和修改)</li>
<li><strong>数据库的事务管理和运行管理</strong><br>  数据库在建立、运行和维护时由DBMS统一管理和控制 保证数据的安全性、完整性、多用户对数据的并发使用 发生故障后的系统恢复</li>
<li><strong>数据库的建立和维护功能</strong>(实用程序)<br>  数据库初始数据装载转换<br>  数据库转储<br>  介质故障恢复<br>  数据库的重组织<br>  性能监视分析等</li>
<li><strong>其它功能</strong><br>  DBMS与网络中其它软件系统的通信<br>  两个DBMS系统的数据转换<br>  异构数据库之间的互访和互操作</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>数据模型是指描述事物对象的数据结构组成、数据语义联系、数据约束的抽象结构及其说明</p>
<ol>
<li><strong>数据结构</strong>: 用于描述事物对象的静态特征，包括事物对象的数据组成、数据类型、数据性质等。</li>
<li><strong>数据操作</strong>:用于描述事物对象的动态特征，包括数据的插入、修改、删除和查询等访问操作。</li>
<li><strong>数据约束</strong>：用于描述数据结构中数据之间的语义联系、数据之间的制约和依存关系，以及数据动态变化的规则等。<br>有：</li>
</ol>
<p><strong>层次</strong>数据模型、<strong>网状</strong>数据模型、<strong>关系</strong>数据模型、其它数据模型（如对象数据模型、键值对数据模型、列式数据模型、文档数据模型、图形数据模型等）</p>
<h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><p>数据库系统（Database Systems）是一类基于数据库进行数据管理与信息服务的软件系统。数据库系统由用户、数据库应用程序、数据库管理系统和数据库<strong>四个部分组成</strong>。</p>
<h3 id="关系数据库中数据内容"><a href="#关系数据库中数据内容" class="headerlink" title="关系数据库中数据内容"></a>关系数据库中数据内容</h3><p>在关系数据库中，除了存储和管理应用的<strong>用户数据</strong>外，还需要存储与管理数据库本身的<strong>元数据</strong>、<strong>索引数据</strong>、<strong>运行数据</strong>等系统数据。</p>
<h2 id="数据库系统应用结构"><a href="#数据库系统应用结构" class="headerlink" title="数据库系统应用结构"></a>数据库系统应用结构</h2><p>单机用户结构、单机用户结构、客户/服务器结构、分布式结构</p>
<h2 id="数据库应用系统生命周期"><a href="#数据库应用系统生命周期" class="headerlink" title="数据库应用系统生命周期"></a>数据库应用系统生命周期</h2><p>需求分析、系统设计、系统实现、系统测试、系统运行与维护</p>
<h2 id="典型数据库管理系统"><a href="#典型数据库管理系统" class="headerlink" title="典型数据库管理系统"></a>典型数据库管理系统</h2><p>ACCESS——微软公司推出的桌面数据库管理系统<br> SQL SERVER——微软公司推出的商用数据库管理系统<br> Oracle Database——甲骨文公司推出的企业级数据库管理系统<br> IBM DB2——IBM公司推出的企业级数据库管理系统<br> Sybase ASE——Sybase公司推出的企业级数据库管理系统<br> MySql——应用广泛的开源关系数据库管理系统<br> PostgreSQL——技术领先的开源对象-关系数据库管理系统<br> Sybase SQL Anywhere——Sybase推出的移动计算数据库管理系统<br> SQLite——开源的轻量级嵌入式数据库管理系统</p>
<h1 id="关系及其相关概念"><a href="#关系及其相关概念" class="headerlink" title="关系及其相关概念"></a>关系及其相关概念</h1><h2 id="关系、实体"><a href="#关系、实体" class="headerlink" title="关系、实体"></a>关系、实体</h2><p><strong>实体</strong>（entity）——是指包含有数据特征的事物对象在概念模型世界中的抽象名称。<br><strong>关系</strong>（relation）——是指具有关系特征、用于存放实体数据的二维表。关系也常被称为关系表。</p>
<h2 id="关系键"><a href="#关系键" class="headerlink" title="关系键"></a>关系键</h2><p>在关系中，可以用来唯一标识元组的属性列，称为键（Key），其它属性列都为非键列。</p>
<ul>
<li><strong>复合键</strong>（Compound Key）——是指关系中用来唯一标识元组的多列作为键。</li>
<li><strong>候选键</strong>（Candidate Key）——关系中可能有多个列均适合作为键，将其中每个都称为候选键。</li>
<li><strong>主键</strong>（Primary key）是关系表中最有代表性的一个候选键，每个关系表中只能定义一个主键。<br>  主键作用：<ul>
<li>唯一标识关系表的每行（元组）</li>
<li>与关联表的外键建立联系，实现关系表之间连接</li>
<li>数据库文件使用主键值来组织关系表的数据存储</li>
<li>数据库使用主键索引快速检索数据</li>
</ul>
</li>
<li><strong>代理键</strong>——采用DBMS自动生成的数字序列作为关系表的主键。</li>
</ul>
<h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p><strong>关系模型</strong>（Relation Model）——是一种基于二维表结构存储数据实体及实体间联系的数据模型。<br>由数据结构、数据操作方式、数据关系约束组成。</p>
<h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><h3 id="关系模型完整性"><a href="#关系模型完整性" class="headerlink" title="关系模型完整性"></a>关系模型完整性</h3><p>关系模型完整性是指在关系数据模型中对关系实施的完整性约束。<br>完整性约束作用：</p>
<ul>
<li>消除关系表的元组重复存储</li>
<li>保持关联表的数据一致性</li>
<li>实现业务数据规则</li>
</ul>
<p>关系模型完整性约束组成：</p>
<ul>
<li>实体完整性约束</li>
<li>参照完整性约束</li>
<li>用户自定义完整性约束</li>
</ul>
<h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><p>实体完整性是指在关系表中实施的主键取值约束，以保证关系表中的每个元组可以被唯一标识。<br>实体完整性<strong>约束规则</strong>：</p>
<ul>
<li>每个关系表中的主键属性列都不允许为空值（NULL），否则就不可能标识实体。</li>
<li>现实世界中的实体是靠主键来标识，主键取值应该唯一，并区分关系表中的每个元组。</li>
</ul>
<h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><p>参照完整性是指关系表之间需要遵守的数据约束，以保证关系之间关联列的数据一致性。<br>参照完整性<strong>约束规则</strong>：若关系R中的外键F与关系S中的主键K相关联，则R中外键F值必须与S中主键K值一致。</p>
<p><strong>外键</strong>（Foreign key）——在关联的两个关系中，它们具有一个或多个相同属性。若关联列在第一个关系中作为主键，则在第二个关系中作为外键。</p>
<h3 id="用户自定义完整性"><a href="#用户自定义完整性" class="headerlink" title="用户自定义完整性"></a>用户自定义完整性</h3><p>用户自定义完整性是指用户根据具体业务对数据处理规则要求所定义的数据约束。<br>用户可以定义如下类型的完整性约束：</p>
<ul>
<li>定义列的数据类型与取值范围</li>
<li>定义列的缺省值</li>
<li>定义列是否允许取空值</li>
<li>定义列取值唯一性</li>
<li>定义列之间的数据依赖性</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编6</title>
    <url>/2021/09/19/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%966/</url>
    <content><![CDATA[<h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><p>CPU有这样一种功能：在执行完当前指令后，检测到cpu外部发送过来的或内部产生的一种特殊信息，且可以立即对接收到信息进行处理，这种信息呢，就叫中断信息。</p>
<h2 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h2><p>当CPU内部有什么事情发生的时候，将产生需要马上处理的中断信息呢？对于8086来说，当cpu内部有下面的情况发生时，产生相应中断； </p>
<ol>
<li>除法错误，比如，执行div指令产生的除法溢出; </li>
<li>单步执行； </li>
<li>执行into指令； </li>
<li>执行int指令。<br>上面的四种中断源，在8086中中断类型码如下。 </li>
<li>除法错误：0 </li>
<li>单步执行：1 </li>
<li>执行into指令：4 </li>
<li>执行int指令，该指令的格式为int n,指令中的n为字节型立即数，是提供给CPU的中断类型码。<br>cpu收到中断信息后，需要对中断信息进行处理，需要对不同的中断信息编写不同的处理程序。<br>若要定位中断处理程序，需要知道它的段地址和偏移地址<br>中断向量表就是中断向量的列表，中断向量就是中断处理程序的入口。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632045782048.png" alt="enter description here"></li>
</ol>
<h3 id="中断过程："><a href="#中断过程：" class="headerlink" title="中断过程："></a><font size="4">中断过程：</font></h3><p>中断类型码-&gt;中断向量表-&gt;修改CS:IP-&gt;中断处理程序</p>
<ol>
<li>（从中断信息中）取得中断信息码； </li>
<li>标志寄存器的值入栈（因为在中断过程中要改变标志寄存器的值，所以先将其保存在栈中）； </li>
<li>设置标志寄存器的第8位TF和第9位IF的值为0（以后解释） </li>
<li>CS的内容入栈； </li>
<li>IP的内容入栈； </li>
<li>从内存地址位中断类型码*4 和中断类型码*4+2的两个字单元中读取中断处理程序入口地址设置IP和CS。</li>
</ol>
<h3 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a><font size="4">中断处理程序</font></h3><p>中断信息可能随时被检测到，所以中断处理程序必须一直存储在内存某段空间之中。中断处理程序入口地址，即中断向量，必须存储在对应表项中。 </p>
<ol>
<li>保存用到的寄存器；</li>
<li> 处理中断 </li>
<li> 恢复用到的寄存器</li>
<li> 用iret指令返回。<br>iret:<br>pop ip<br>pop cs<br>popf</li>
</ol>
<h3 id="经典除法中断（0号中断）"><a href="#经典除法中断（0号中断）" class="headerlink" title="经典除法中断（0号中断）"></a>经典除法中断（0号中断）</h3><p>再实现</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,offset do0<span class="comment">;要存的中断处理程序</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">200h</span><span class="comment">;存放地址(这里随便放在了中断表的后面空闲位置中)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,offset do0end-offset do0<span class="comment">;存放的量(编译器可以进行简单运算)</span></span><br><span class="line">	<span class="keyword">cld</span><span class="comment">; cld是来控制重复移动时候的si 和di的递增方式即+1(用std是-1)。</span></span><br><span class="line">	<span class="keyword">rep</span> <span class="keyword">movsb</span><span class="comment">;逐字节移动复制</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">0</span>*<span class="number">4</span>],<span class="number">200h</span><span class="comment">;写入中断向量表入口地址ip</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">0</span>*<span class="number">4</span>+<span class="number">2</span>],<span class="number">0</span><span class="comment">;cs</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span><span class="comment">;这只是将中断处理程序写入的结束</span></span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">do0:</span></span><br><span class="line">	<span class="keyword">jmp</span> short do0start</span><br><span class="line">	<span class="built_in">db</span> <span class="string">&quot;overflow!!!&quot;</span></span><br><span class="line">	<span class="built_in">db</span> <span class="number">0ach</span></span><br><span class="line"><span class="symbol">do0start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">201h</span><span class="comment">;o开始处</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0b800h</span><span class="comment">;老规矩的显存修改</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">12</span>*<span class="number">160</span>+<span class="number">36</span>*<span class="number">2</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,[<span class="built_in">si</span>+<span class="number">24</span>]</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">12</span></span><br><span class="line"><span class="symbol">s:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">si</span>]</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">1</span>],<span class="number">ah</span></span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">loop</span> s</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span><span class="comment">;中断处理结束</span></span><br><span class="line"><span class="symbol">	</span></span><br><span class="line"><span class="symbol">do0end:</span></span><br><span class="line">	<span class="keyword">nop</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632045782042.png" alt="enter description here"></p>
<h2 id="int"><a href="#int" class="headerlink" title="int"></a>int</h2><p>int n ;引发中断过程 过程：</p>
<ol>
<li>取中断类型码n</li>
<li>标志寄存器入栈，TF=0，IF=0</li>
<li>CS、IP入栈</li>
<li>(IP)=(n*4),(CS)=(n*4+2)</li>
<li>执行中断处理程序<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[aaaa*<span class="number">4</span>],<span class="number">200h</span><span class="comment">;写入中断向量表入口地址ip</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[aaaa*<span class="number">4</span>+<span class="number">2</span>],<span class="number">0</span><span class="comment">;cs</span></span><br></pre></td></tr></table></figure>
aaaa是多少就是int多少</li>
</ol>
<h2 id="BIOS-DOS提供的中断例程"><a href="#BIOS-DOS提供的中断例程" class="headerlink" title="BIOS/DOS提供的中断例程"></a>BIOS/DOS提供的中断例程</h2><p>在系统的ROM中存放着一套程序，称为BIOS，主要有： </p>
<ol>
<li>硬件系统的检测和初始化程序； </li>
<li>外部中断和内部中断的中断例程； </li>
<li>用于对硬件设备进行I/O操作的中断例程； </li>
<li>其他和硬件系统相关的中断例程。<br>DOS中也提供了中断例程，DOS的中断例程就是操作系统向程序员提供的编程资源。</li>
</ol>
<h3 id="BIOS中断例程应用"><a href="#BIOS中断例程应用" class="headerlink" title="BIOS中断例程应用"></a>BIOS中断例程应用</h3><p>int 10h的使用</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="number">bh</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="number">dh</span>,<span class="number">5</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">12</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">10h</span><span class="comment">;解释：ah=2表示调用第10h号中断例程的2号子程序，功能为设置光标位置可以提供光标所在的行号、列号和页号作为参数。bh=0,dh=5,dl=12，设置光标到第0页，第5行，第12列。</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">9</span><span class="comment">;在光标位置显示字符</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">al</span>,<span class="string">&#x27;a&#x27;</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">11001010b</span><span class="comment">;同显存设置颜色属性</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="number">bh</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">3</span><span class="comment">;字符重复个数</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">10h</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632045782053.png" alt="enter description here"></p>
<h3 id="DOS中断例程应用"><a href="#DOS中断例程应用" class="headerlink" title="DOS中断例程应用"></a>DOS中断例程应用</h3><p>经典：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br></pre></td></tr></table></figure>
<p>int 21h ;    DOS提供的中断例程，包含了很多子程序<br>我们使用4ch号功能，即程序返回功能</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">4ch</span><span class="comment">;程序返回功能号</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">0</span><span class="comment">;返回值</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br></pre></td></tr></table></figure>
<p>又如：<br>在屏幕的5行12列显示字符串“Welcome to cloud”<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632045782052.png" alt="enter description here"></p>
<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>在访问端口的时候，cpu通过端口地址来定位端口。因为端口所在的芯片和cpu通过总线相连，所以，端口地址和内存地址一样，通过地址总线来传送。在pc系统中，cpu最多可以定位64KB个不同的端口。则端口地址的范围为0~65535。</p>
<p>对端口的读写不能用mov,push,pop等内存读写指令。只能用<strong>in</strong>和<strong>out</strong>这两条，分别用于从端口读取数据和向写入数据。</p>
<p>在in和out指令中，<strong>只能使用ax或al</strong>来存放从端口中读入的数据或要发送到端口中的数据。<strong>访问8位端口时用al，访问16位端口时用ax</strong>。</p>
<p>对0~255以内的端口读写：<br>in al,20h<br>out 20h,al</p>
<p>对256~65535端口读写,<strong>端口号放在dx中</strong>：<br>mov dx,3f8h<br>in al,dx<br>out dx,al</p>
<h2 id="CMOS-RAM"><a href="#CMOS-RAM" class="headerlink" title="CMOS-RAM"></a>CMOS-RAM</h2><p>PC机中，有一个CMOS RAM芯片，一般简称位CMOS。特征如下：</p>
<ol>
<li>含一个实时钟和一个有128个存储单元的RAM存储器（早期为64个字节）。</li>
<li>该芯片靠电池供电。所以关机后其内部的实时钟仍可正常工作，RAM中的信息不丢失。</li>
<li>128个字节的RAM中内部实时钟占用0~0dh单元保存信息，其余大部分单元用于保存系统配置信息，供系统启动时BIOS程序读取。BIOS也提供了相关的程序，使我们可以再开机的时候配置CMOS RAM中的系统信息。</li>
<li>该芯片内部有两个端口，端口地址为70h和71h。CPU通过这两个端口来读写CMOS RAM。</li>
<li><strong>70h为地址端口</strong>，存放要访问的CMOS RAM单元的地址；<strong>71h为数据端口</strong>，存放从选定的CMOS RAM单元中读取的数据，或要写入到其中的数据。可见，CPU对CMOS RAM的读写分两步进行，比如，读CMOS RAM的2号单元：<ol>
<li>将2送入端口70h；</li>
<li>从端口71h读出2号单元的内容。</li>
</ol>
</li>
</ol>
<h1 id="shl-shr"><a href="#shl-shr" class="headerlink" title="shl/shr"></a>shl/shr</h1><p>shr和shl是逻辑移位指令<br>shl逻辑左移</p>
<ol>
<li>将一个寄存器或内部单元中的数据向左位移；</li>
<li>将最后移出的一位写入CF中；</li>
<li>最低位用0补充；</li>
<li>如果移动位数大于1时，必须将移动位数放在cl中。<br>shr是逻辑右移指令，与shl相反。</li>
<li>将一个寄存器或内存单元的数据向右移位。</li>
<li>将最后移出的一位写入CF。</li>
<li>最高位用0补充。<br>用法与shl一致。</li>
</ol>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632049621983.png" alt="enter description here"><br>在屏幕中间显示当前月份</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">8</span></span><br><span class="line">	<span class="keyword">out</span> <span class="number">70h</span>,<span class="built_in">al</span></span><br><span class="line">	<span class="keyword">in</span> <span class="built_in">al</span>,<span class="number">71h</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>,<span class="built_in">al</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">4</span></span><br><span class="line">	<span class="keyword">shr</span> <span class="number">ah</span>,<span class="built_in">al</span><span class="comment">;取前4位BCD码</span></span><br><span class="line">	<span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">00001111b</span><span class="comment">;取后4位BCD码</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">add</span> <span class="number">ah</span>,<span class="number">30h</span></span><br><span class="line">	<span class="keyword">add</span> <span class="built_in">al</span>,<span class="number">30h</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0b800h</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">bx</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">160</span>*<span class="number">12</span>+<span class="number">40</span>*<span class="number">2</span>],<span class="number">ah</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">160</span>*<span class="number">12</span>+<span class="number">40</span>*<span class="number">2</span>+<span class="number">2</span>],<span class="built_in">al</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632049621982.png" alt="enter description here"></p>
<h1 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h1><ul>
<li>可屏蔽中断<br>  sti：IF置为1，响应中断<br>  cli：IF置为0，不响应可屏蔽中断</li>
<li>不可屏蔽中断<br>  8086CPU，不可屏蔽中断的中断类型码固定为2<br>还是in，out</li>
</ul>
<h1 id="…"><a href="#…" class="headerlink" title="…"></a>…</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组修改0.6</title>
    <url>/2021/11/02/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A80.6/</url>
    <content><![CDATA[<h1 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h1><p>【结构】AwesomeDungeonForge-1.16.5-1.1.1.jar<br>【装备】饰品？Alterlands+1.2+P2+Beta+v1.jar###已弃用<br>【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar</p>
<h1 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h1><p>【结构】更多结构repurposed_structures_forge-3.4.0+1.16.5.jar<br>【前置4】cavebiomeapi-1.16.5-1.4.1.jar<br>【群系】【前置4】cavesandcliffs-1.16.5-7.0.jar</p>
<h1 id="ABANDON"><a href="#ABANDON" class="headerlink" title="ABANDON"></a>ABANDON</h1><p>【结构】（墙壁宝石快）Forgotten+Treasures+V12+1.16.5.jar<br>原因详见<a href="https://dyinjin.github.io/2021/09/26/MC/debugfile/">debugfile</a><br>【生物】史前动物(以维度的形式添加)Prehistoric+Fauna+2.1.1.jar<br>不喜欢增加维度</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>模组选用详述</title>
    <url>/2022/01/13/MC/modslists/%E6%A8%A1%E7%BB%84%E9%80%89%E7%94%A8%E8%AF%A6%E8%BF%B0/</url>
    <content><![CDATA[<p>模组文件命名规则：【大类】【功能】【如果是前置+编号】（提示说明）原文件名.jar </p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>此类即笔者认为的本整合包基础模组，<strong>除夸克</strong>外对原版本质没有影响如添加物品。夸克将其中辅助性功能定为基础（如Z键换栏，Q键投掷力度，边沿搭建辅助，背包箱子整理等）<br>所以<strong>Quark</strong>还添加了SCB中的(PS夸克添加了原版生物贴图如黄色鸡黑色猪)</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quark:big_dungeon</span><br></pre></td></tr></table></figure>

<h2 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">螃蟹</span><br><span class="line">柴犬</span><br><span class="line">石精灵</span><br><span class="line">青蛙</span><br><span class="line">乌龟</span><br><span class="line">游魂</span><br><span class="line">遗忘者</span><br><span class="line">裹尸</span><br><span class="line">猎狐犬</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改日期	文件大小（KB）	文件名称</span><br><span class="line">2022/01/01  13:40            30,160 【基础】【便捷】jei找东西findme-1.16.3-2.2.1.0.jar</span><br><span class="line">2021/04/09  23:51           123,705 【基础】【便捷】【1】边拿边走InvMove-1.16.3-0.4.6.jar</span><br><span class="line">2021/04/09  22:58           281,216 【基础】【便捷】区域挖掘OreExcavation-1.8.157.jar</span><br><span class="line">2021/12/26  18:09           322,836 【基础】【便捷】搬箱子carryon-1.16.5-1.15.5.22.jar</span><br><span class="line">2021/12/24  15:43            17,627 【基础】【便捷】树叶快速掉落RapidLeafDecay-1.16.5-2.0.0.jar</span><br><span class="line">2021/04/11  16:07            22,624 【基础】【便捷】物品堆叠upsizer-mc1.16.4-6.1.1.jar</span><br><span class="line">2021/05/04  07:49            22,955 【基础】【便捷】穿草swingthroughgrass-1.16.4-1.5.3.jar</span><br><span class="line">2022/01/07  02:15           245,533 【基础】【修复】合成冲突化解polymorph-forge-1.16.5-0.38.jar</span><br><span class="line">2022/01/12  14:44           827,088 【基础】【前置0】jei-1.16.5-7.7.1.144.jar</span><br><span class="line">2021/07/19  19:35         1,337,675 【基础】【前置1】cloth-config-4.11.26-forge.jar</span><br><span class="line">2021/07/19  19:19            57,279 【基础】【前置2】AutoRegLib-1.6-49.jar</span><br><span class="line">2021/10/26  10:58           106,058 【基础】【前置3】YungsApi-1.16.4-Forge-13.jar</span><br><span class="line">2021/12/03  22:46           145,933 【基础】【前置4】Placebo-1.16.5-4.6.1.jar</span><br><span class="line">2022/01/12  14:44           515,600 【基础】【地图】世界地图XaerosWorldMap_1.19.1_Forge_1.16.5.jar</span><br><span class="line">2022/01/12  23:34         1,152,576 【基础】【地图】（小地图与信息提示）XaerosBetterPvP_21.23.1_Forge_1.16.5.jar</span><br><span class="line">2021/07/19  18:33            98,900 【基础】【性能】内存加载ferritecore-2.0.5-forge.jar</span><br><span class="line">2021/07/19  14:56            60,714 【基础】【性能】实体剔除EntityCulling-1.16.5-2.1.6.jar</span><br><span class="line">2021/04/10  00:04            84,744 【基础】【性能】平滑加载smoothboot-forge-1.16.4-1.2.2.jar</span><br><span class="line">2021/05/04  07:33            13,677 【基础】【性能】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar</span><br><span class="line">2022/01/09  16:43           234,733 【基础】【性能】生物加载performant-1.16.2-5-3.82m.jar</span><br><span class="line">2021/10/26  10:58           270,250 【基础】【汉化】【0】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar</span><br><span class="line">2021/12/03  22:46             8,537 【基础】【汉化】汉化i18nupdatemod-1.16.5.jar</span><br><span class="line">2021/12/03  22:47         8,797,129 【基础】【玩法】【便捷】【2】Quark-r2.4-321.jar</span><br><span class="line">2021/10/26  09:26             8,837 【基础】【玩法】爆头headshot-1.3.0.jar</span><br><span class="line">2021/10/26  10:58            28,518 【基础】【界面】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar</span><br><span class="line">2021/11/05  23:53           540,313 【基础】【界面】【定制】【4】菜单PackMenu-1.16.5-2.5.0.jar</span><br><span class="line">2021/04/25  03:14            14,660 【基础】【界面】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar</span><br><span class="line">2021/04/24  15:37            42,604 【基础】【界面】拾取通知PickUpNotifier-v1.2-1.16.3.jar</span><br><span class="line">2021/11/25  01:50            97,273 【基础】【界面】模组目录catalogue-1.5.0-1.16.5.jar</span><br><span class="line">2021/12/03  22:46           136,584 【基础】【界面】模组设置configured-1.5.1-1.16.5.jar</span><br><span class="line">2021/11/05  14:28            46,203 【基础】【界面】饱和度状态栏appleskin-forge-mc1.16.x-2.2.0.jar</span><br><span class="line">2022/01/12  23:38            96,334 【基础】【调试工具】【便捷】游戏内模组设置GameMenuModOption-1.16.4-1.8.2.jar</span><br><span class="line">2021/09/20  22:39            33,125 【基础】【调试工具】【定制】SpawnBalanceUtility-1.36.0.11.jar</span><br></pre></td></tr></table></figure>

<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><p>此部分包括了对游戏内容进行修改了的，且笔者认为是整合包添加的核心玩法的各种模组。介于核心与拓展的衡量，笔者将添加元素丰富的（如既有生物又有结构还有对应装备之类的），在游戏中戏份较大的，或有较多联动的模组归为核心，其余放入拓展系列。</p>
<h2 id="charm"><a href="#charm" class="headerlink" title="charm"></a>charm</h2><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p>原版村庄补充</p>
<h3 id="生物-1"><a href="#生物-1" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">珊瑚鱿鱼</span><br></pre></td></tr></table></figure>

<h2 id="alex’s-mobs"><a href="#alex’s-mobs" class="headerlink" title="alex’s mobs"></a>alex’s mobs</h2><h3 id="生物-2"><a href="#生物-2" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">骨蟒</span><br><span class="line">太阳鸟</span><br><span class="line">绯红蚊子</span><br><span class="line">末影缓步兽</span><br><span class="line">洞穴蜈蚣</span><br><span class="line">诡异蟾蜍</span><br><span class="line">复刻怪</span><br><span class="line">灵魂鹫</span><br><span class="line">灵翼</span><br><span class="line">蘑菇君</span><br><span class="line">悬熊</span><br><span class="line">沙风怪</span><br><span class="line">跨座兽</span><br><span class="line">跨座蝌蚪</span><br><span class="line">诡异蚊鬼</span><br><span class="line">末影噬菌体</span><br><span class="line">虚空蠕虫</span><br><span class="line">灰熊</span><br><span class="line">走鹃</span><br><span class="line">瞪羚</span><br><span class="line">鳄鱼</span><br><span class="line">苍蝇</span><br><span class="line">蜂鸟</span><br><span class="line">虎鲸</span><br><span class="line">大猩猩</span><br><span class="line">响尾蛇</span><br><span class="line">锤头鲨</span><br><span class="line">龙虾</span><br><span class="line">科莫多巨蜥</span><br><span class="line">卷尾猴</span><br><span class="line">驼鹿</span><br><span class="line">浣熊</span><br><span class="line">水滴鱼</span><br><span class="line">海豹</span><br><span class="line">蟑螂</span><br><span class="line">鲸头鹳</span><br><span class="line">乌鸦</span><br><span class="line">大象</span><br><span class="line">雪豹</span><br><span class="line">大鳄龟</span><br><span class="line">鸸鹋</span><br><span class="line">袋鼠</span><br><span class="line">螳螂虾</span><br><span class="line">鸭嘴兽</span><br><span class="line">袋獾</span><br><span class="line">抹香鲸</span><br><span class="line">切叶蚁</span><br><span class="line">老虎</span><br><span class="line">白头海雕</span><br><span class="line">沙漠蛛蜂</span><br><span class="line">皱鳃鲨</span><br><span class="line">拟态章鱼</span><br><span class="line">海鸥</span><br></pre></td></tr></table></figure>
<h2 id="YUNG’s"><a href="#YUNG’s" class="headerlink" title="YUNG’s"></a>YUNG’s</h2><p>代表一系列此作者的模组，添加、改变或优化了结构，特别是洞穴生成逻辑</p>
<h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>明面上的添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">betterdungeons:skeleton_dungeon</span><br><span class="line">betterdungeons:small_dungeon</span><br><span class="line">betterdungeons:spider_dungeon</span><br><span class="line">betterdungeons:zombie_dungeon</span><br><span class="line">bettermineshafts:mineshaft</span><br><span class="line">betterstrongholds:stronghol</span><br></pre></td></tr></table></figure>
<h2 id="eidolon"><a href="#eidolon" class="headerlink" title="eidolon"></a>eidolon</h2><p>魔法</p>
<h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eidolon:catacomb</span><br><span class="line">eidolon:lab</span><br><span class="line">eidolon:stray_tower</span><br></pre></td></tr></table></figure>
<h3 id="生物-3"><a href="#生物-3" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">僵尸暴君</span><br><span class="line">幽魂</span><br><span class="line">亡灵巫师</span><br></pre></td></tr></table></figure>
<h3 id="hexblades-eidolon扩展"><a href="#hexblades-eidolon扩展" class="headerlink" title="hexblades(eidolon扩展)"></a>hexblades(eidolon扩展)</h3><h4 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexblades:fire_temple</span><br></pre></td></tr></table></figure>
<h4 id="生物-4"><a href="#生物-4" class="headerlink" title="生物"></a>生物</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">火焰元素</span><br></pre></td></tr></table></figure>
<h2 id="ice-and-fire"><a href="#ice-and-fire" class="headerlink" title="ice and fire"></a>ice and fire</h2><h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iceandfire:gorgon_temple</span><br><span class="line">iceandfire:graveyard</span><br><span class="line">iceandfire:mausoleum</span><br></pre></td></tr></table></figure>
<h3 id="生物-5"><a href="#生物-5" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">雪地村民</span><br><span class="line">悚怖尸巫</span><br><span class="line">(悚怖尸奴</span><br><span class="line">悚怖尸兽</span><br><span class="line">悚怖食尸鬼</span><br><span class="line">悚怖劫蛛)</span><br><span class="line">悚怖尸骑</span><br><span class="line">悚怖战马</span><br><span class="line">火龙</span><br><span class="line">冰龙</span><br><span class="line">骏鹰</span><br><span class="line">小精灵</span><br><span class="line">翼蚺</span><br><span class="line">海马</span><br><span class="line">死亡蠕虫</span><br><span class="line">鸡蛇	</span><br><span class="line">蛇发女妖</span><br><span class="line">独眼巨人</span><br><span class="line">塞壬</span><br><span class="line">铜羽泽鹗</span><br><span class="line">食人妖</span><br><span class="line">恐蚁</span><br><span class="line">(恐蚁劳工</span><br><span class="line">恐蚁军士</span><br><span class="line">恐蚁斥候</span><br><span class="line">恐蚁皇族</span><br><span class="line">恐蚁女皇</span><br><span class="line">恐蚁蛋</span><br><span class="line">恐蜂蚁)</span><br><span class="line">海蟒</span><br><span class="line">九头蛇	</span><br></pre></td></tr></table></figure>
<h2 id="wyrmroost"><a href="#wyrmroost" class="headerlink" title="wyrmroost"></a>wyrmroost</h2><h3 id="生物-6"><a href="#生物-6" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">蝶型利维坦</span><br><span class="line">遨空银翼</span><br><span class="line">高山飞龙</span><br><span class="line">加那利飞龙</span><br><span class="line">火龙果幼龙</span><br><span class="line">游沙龙</span><br><span class="line">主世界幼龙</span><br><span class="line">屋栖盗客</span><br><span class="line">皇室血红</span><br><span class="line">金币小龙</span><br></pre></td></tr></table></figure>
<h2 id="dungeon-gear-mobs"><a href="#dungeon-gear-mobs" class="headerlink" title="dungeon gear/mobs"></a>dungeon gear/mobs</h2><p>特指the_infamous_1的两个模组</p>
<h3 id="生物-7"><a href="#生物-7" class="headerlink" title="生物"></a>生物</h3><p>地下城生物不再赘述</p>
<h2 id="hexerei"><a href="#hexerei" class="headerlink" title="hexerei"></a>hexerei</h2><p>巫术</p>
<h3 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexerei:dark_coven</span><br><span class="line">hexerei:mangrove_tree</span><br><span class="line">hexerei:witch_hut</span><br></pre></td></tr></table></figure>
<h2 id="Paraglider"><a href="#Paraglider" class="headerlink" title="Paraglider"></a>Paraglider</h2><p>滑翔伞</p>
<h3 id="结构-7"><a href="#结构-7" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paraglider:nether_horned_statue</span><br><span class="line">paraglider:tarrey_town_goddess_statue</span><br><span class="line">paraglider:underground_horned_statue</span><br></pre></td></tr></table></figure>
<h2 id="Druidcraft"><a href="#Druidcraft" class="headerlink" title="Druidcraft??"></a>Druidcraft??</h2><p>德鲁伊工艺</p>
<h3 id="生物-8"><a href="#生物-8" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">蓝甲虫</span><br><span class="line">畏怖之鱼</span><br><span class="line">月光蛾</span><br></pre></td></tr></table></figure>
<h2 id="abnormals系列"><a href="#abnormals系列" class="headerlink" title="abnormals系列"></a>abnormals系列</h2><p>一个核心，但有很多模组依赖它且模组之间联动较多</p>
<h3 id="结构-8"><a href="#结构-8" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">atmospheric:arid_shrine</span><br><span class="line">autumnity:maple_witch_hut</span><br><span class="line">outer_end:catacombs</span><br><span class="line">outer_end:end_tower</span><br></pre></td></tr></table></figure>
<h3 id="生物-9"><a href="#生物-9" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">蜗牛</span><br><span class="line">火鸡</span><br><span class="line">灰熊</span><br><span class="line">哞花</span><br><span class="line">鹿</span><br><span class="line">鸭</span><br><span class="line">锦鲤</span><br><span class="line">板鱼</span><br><span class="line">耗牛</span><br><span class="line">黑猩猩</span><br><span class="line">芭蕉蜘蛛</span><br><span class="line">刽子手</span><br><span class="line">破坏者</span><br><span class="line">冰术师</span><br><span class="line">骷髅村民</span><br><span class="line">诡术师</span><br><span class="line">浮跃牛蛙</span><br><span class="line">泡泡虫</span><br><span class="line">紫颂鱿鱼</span><br><span class="line">被埋葬者</span><br><span class="line">天蓝怪</span><br><span class="line">紫珀傀儡</span><br><span class="line">幽灵蜂</span><br><span class="line">追猎者</span><br><span class="line">耀翼</span><br><span class="line">发光鱿鱼</span><br><span class="line">鹅</span><br><span class="line">巨型长尾鲨</span><br><span class="line">长尾鲨</span><br><span class="line">蓑鲉</span><br><span class="line">鹦鹉螺</span><br><span class="line">狗鱼</span><br><span class="line">鲈鱼</span><br><span class="line">水母</span><br></pre></td></tr></table></figure>
<h3 id="群系"><a href="#群系" class="headerlink" title="群系"></a>群系</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abundance:lavender_fields</span><br><span class="line">abundance:lavender_forest</span><br><span class="line">abundance:nemophila_fields</span><br><span class="line">atmospheric:dunes</span><br><span class="line">atmospheric:dunes_hills</span><br><span class="line">atmospheric:flourishing_dunes</span><br><span class="line">atmospheric:petrified_dunes</span><br><span class="line">atmospheric:rainforest</span><br><span class="line">atmospheric:rainforest_basin</span><br><span class="line">atmospheric:rainforest_mountains</span><br><span class="line">atmospheric:rainforest_plateau</span><br><span class="line">atmospheric:rocky_dunes</span><br><span class="line">atmospheric:rocky_dunes_hills</span><br><span class="line">atmospheric:sparse_rainforest_basin</span><br><span class="line">atmospheric:hot_springs</span><br><span class="line">autumnity:maple_forest</span><br><span class="line">autumnity:maple_forest_hills</span><br><span class="line">autumnity:orange_spotted_dark_forest</span><br><span class="line">autumnity:pumpkin_fields</span><br><span class="line">autumnity:red_spotted_taiga</span><br><span class="line">autumnity:yellow_spotted_forest</span><br><span class="line">bayou_blues:bayou</span><br><span class="line">bayou_blues:bayou_hills</span><br><span class="line">endergetic:poise_forest</span><br><span class="line">environmental:blossom_highlands</span><br><span class="line">environmental:blossom_hills</span><br><span class="line">environmental:blossom_valleys</span><br><span class="line">environmental:blossom_woods</span><br><span class="line">environmental:marsh</span><br><span class="line">environmental:mushroom_marsh</span><br><span class="line">outer_end:azure_forest</span><br><span class="line">outer_end:crystal_crag</span><br></pre></td></tr></table></figure>
<h2 id="stalwart-dungeons"><a href="#stalwart-dungeons" class="headerlink" title="stalwart dungeons"></a>stalwart dungeons</h2><h3 id="结构-9"><a href="#结构-9" class="headerlink" title="结构"></a>结构</h3><p>locate无法检索文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sheltrerer_dungeons.nbt</span><br><span class="line">keeping_castle_spawn.nbt</span><br><span class="line">keeping_castle.nbt</span><br><span class="line">awful_dungeon_spawn.nbt</span><br><span class="line">awful_dungeon.nbt</span><br></pre></td></tr></table></figure>
<h3 id="生物-10"><a href="#生物-10" class="headerlink" title="生物"></a>生物</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">惊骇恶魂</span><br><span class="line">下界守卫</span><br><span class="line">惑目烈焰人</span><br><span class="line">残缺凋零</span><br><span class="line">装甲烈焰人</span><br></pre></td></tr></table></figure>
<h3 id="群系-1"><a href="#群系-1" class="headerlink" title="群系"></a>群系</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stalwart_dungeons:poubelle</span><br></pre></td></tr></table></figure>

<h2 id="Storage-Drawers"><a href="#Storage-Drawers" class="headerlink" title="Storage Drawers??"></a>Storage Drawers??</h2><p>储物抽屉，好用至极</p>
<h2 id="Farmers-Delight"><a href="#Farmers-Delight" class="headerlink" title="Farmers Delight??"></a>Farmers Delight??</h2><p>制作食物方式独特且与abnormals系列联动非常多的食物模组，自己也有拓展</p>
<h2 id="terraqueous"><a href="#terraqueous" class="headerlink" title="terraqueous??"></a>terraqueous??</h2><h2 id="project-vibrant-journeys"><a href="#project-vibrant-journeys" class="headerlink" title="project vibrant journeys??"></a>project vibrant journeys??</h2><h2 id="MagmaFurnaceDungeonUpdate"><a href="#MagmaFurnaceDungeonUpdate" class="headerlink" title="MagmaFurnaceDungeonUpdate??"></a>MagmaFurnaceDungeonUpdate??</h2><h2 id="NeverNeededOrWanted"><a href="#NeverNeededOrWanted" class="headerlink" title="NeverNeededOrWanted??"></a>NeverNeededOrWanted??</h2><h2 id="SimpleOres"><a href="#SimpleOres" class="headerlink" title="SimpleOres??"></a>SimpleOres??</h2><h1 id="食物拓展"><a href="#食物拓展" class="headerlink" title="食物拓展"></a>食物拓展</h1><h2 id="FD"><a href="#FD" class="headerlink" title="FD"></a>FD</h2><h2 id="ND"><a href="#ND" class="headerlink" title="ND"></a>ND</h2><h2 id="PAM"><a href="#PAM" class="headerlink" title="PAM"></a>PAM</h2><h1 id="质量提升"><a href="#质量提升" class="headerlink" title="质量提升"></a>质量提升</h1><p>此部分包含对游戏内容本质没有改变的，而是一些图形美化、丰富音效和显示效果的模组。与基础的区别在于：若感到性能有限，想提升帧率时可视情况删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021/12/30  23:29            19,648 【质量提升】【5】物品品质框ItemBorders-1.16.5-1.1.6.jar</span><br><span class="line">2021/12/24  17:05            23,045 【质量提升】【5】物品边框LegendaryTooltips-1.16.5-1.1.5.jar</span><br><span class="line">2022/01/01  13:40            61,161 【质量提升】【前置5】Iceberg-1.16.5-1.0.34.jar</span><br><span class="line">2021/07/19  15:14            47,260 【质量提升】【显示】【7】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar</span><br><span class="line">2021/10/26  10:59        14,746,751 【质量提升】【视听】#debug#含物理音效DynamicSurroundings-1.16.5-4.0.5.0.jar</span><br><span class="line">2021/10/26  10:58           937,719 【质量提升】【贴图】【6】更好的树叶BetterFoliage-2.7.1-Forge-1.16.5.jar</span><br><span class="line">2022/01/13  22:16        12,151,999 【质量提升】【音效】V3.0-Matmos-mod-1.16.jar</span><br><span class="line">2021/11/10  00:02        76,505,097 【质量提升】【音效】【7】自然音效AmbientSounds_v3.1.11_mc1.16.5.jar</span><br><span class="line">2021/06/04  21:01        58,565,641 【质量提升】【音效】【8】音效charmonium-forge-1.16.5-2.3.2.jar</span><br></pre></td></tr></table></figure>
<p>#debug#意思是游戏出问题时优先排查对象</p>
<h1 id="结构拓展"><a href="#结构拓展" class="headerlink" title="结构拓展"></a>结构拓展</h1><p>此内容包括一些比较单纯的，经过作者质量肯定的添加结构的模组</p>
<h2 id="shrines"><a href="#shrines" class="headerlink" title="shrines??"></a>shrines??</h2><h2 id="stoneholm"><a href="#stoneholm" class="headerlink" title="stoneholm??"></a>stoneholm??</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stoneholm:underground_village</span><br></pre></td></tr></table></figure>
<h2 id="Soaring-Structures"><a href="#Soaring-Structures" class="headerlink" title="Soaring-Structures??"></a>Soaring-Structures??</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">soaring_structures2:soaring_islandf</span><br></pre></td></tr></table></figure>
<h2 id="flying-castles"><a href="#flying-castles" class="headerlink" title="flying_castles??"></a>flying_castles??</h2><h1 id="生物拓展"><a href="#生物拓展" class="headerlink" title="生物拓展"></a>生物拓展</h1><p>此内容包括一些比较单纯的，经过作者质量肯定的添加生物的模组</p>
<h2 id="unnamed-animal"><a href="#unnamed-animal" class="headerlink" title="unnamed animal??"></a>unnamed animal??</h2><h2 id="pandoras-creatures"><a href="#pandoras-creatures" class="headerlink" title="pandoras_creatures??"></a>pandoras_creatures??</h2><h3 id="结构-10"><a href="#结构-10" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandoras_creatures:end_prison</span><br></pre></td></tr></table></figure>

<h1 id="群系拓展"><a href="#群系拓展" class="headerlink" title="群系拓展"></a>群系拓展</h1><p>此内容包括一些比较单纯的，经过作者质量肯定的添加群系的模组</p>
<h2 id><a href="#" class="headerlink" title></a></h2><h1 id="风味拓展"><a href="#风味拓展" class="headerlink" title="风味拓展"></a>风味拓展</h1><p>此内容包括作者认为很有趣，但在游戏中“戏份”很少，不是单纯添加结构生物群系的模组</p>
<h2 id="chimes"><a href="#chimes" class="headerlink" title="chimes??"></a>chimes??</h2><p>风铃</p>
<h2 id="nether’s-exoticism"><a href="#nether’s-exoticism" class="headerlink" title="nether’s exoticism??"></a>nether’s exoticism??</h2><p>下界拓展</p>
<h2 id="Nef’s-Medieval-Pub"><a href="#Nef’s-Medieval-Pub" class="headerlink" title="Nef’s Medieval Pub??"></a>Nef’s Medieval Pub??</h2><p>装饰与结构</p>
<h2 id="habitat"><a href="#habitat" class="headerlink" title="habitat??"></a>habitat??</h2><h2 id="Serene-Shrubbery"><a href="#Serene-Shrubbery" class="headerlink" title="Serene Shrubbery??"></a>Serene Shrubbery??</h2><h2 id="terraincognita"><a href="#terraincognita" class="headerlink" title="terraincognita??"></a>terraincognita??</h2><h2 id="Natural-Decor-Mod"><a href="#Natural-Decor-Mod" class="headerlink" title="Natural Decor Mod??"></a>Natural Decor Mod??</h2><h2 id="supplementaries"><a href="#supplementaries" class="headerlink" title="supplementaries??"></a>supplementaries??</h2><h1 id="小拓展"><a href="#小拓展" class="headerlink" title="小拓展"></a>小拓展</h1><h2 id="Inspirations"><a href="#Inspirations" class="headerlink" title="Inspirations??"></a>Inspirations??</h2><h1 id="全局数据包"><a href="#全局数据包" class="headerlink" title="全局数据包"></a>全局数据包</h1><p>简单来说功能就是默认添加一些数据包（文件夹<code>global_data_packs</code>中的）<br>目前选用的数据包均为非覆盖性的结构添加数据包<br>其中还可以将farlander的末影人添加到RepurposedRepurposedStructures中的地狱诡异森林村庄中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022/01/14  22:01            27,970 archive-v1.0.zip</span><br><span class="line">2022/01/14  20:19           224,258 FarlandersInWarpedVillages.zip</span><br><span class="line">2022/01/14  20:54            76,678 fossil_dungeons.zip</span><br><span class="line">2022/01/14  20:54           143,659 fs1-6-6.zip</span><br><span class="line">2022/01/14  22:55            58,086 Grian&#x27;s Dungeons.zip</span><br><span class="line">2022/01/14  19:55           349,367 illager-fortresses-v11-for-1-18.zip</span><br><span class="line">2022/01/14  22:53           480,666 More Structures.zip</span><br><span class="line">2022/01/14  21:41           443,535 pillager-stronghold.zip</span><br><span class="line">2022/01/14  20:25           549,446 Repurposed_Structures-Better_Strongholds_Forge.zip</span><br><span class="line">2021/12/15  01:47           138,584 Repurposed_Structures-Environmental.zip</span><br><span class="line">2021/12/15  01:47           311,098 Repurposed_Structures-Savage_And_Ravage.zip</span><br><span class="line">2022/01/14  22:46            26,912 RRS-BuzzierVillages.zip</span><br><span class="line">2022/01/14  22:46            23,914 RRS-EnvironmentallyFriendly.zip</span><br><span class="line">2022/01/14  22:47            32,523 RRS-RepurposedDelight.zip</span><br><span class="line">2022/01/14  22:50           218,104 Ships v13 for [1.18].zip</span><br><span class="line">2021/12/15  01:47         1,893,041 the-forbidden-castle-v1-1.zip</span><br><span class="line">2021/07/22  17:02                11 汇总.bat</span><br><span class="line">2021/12/15  01:47         1,454,614 简单覆盖ichphilipp-s-endcity-v1-1-1-16-2-forge.zip.disabled</span><br><span class="line">2022/01/14  22:37            54,663 简单覆盖outpost.zip.disabled</span><br><span class="line">2021/12/15  01:47           163,568 简单覆盖pillager-settlements-e2230.zip.disabled</span><br><span class="line">2022/01/14  20:19         1,890,242 简单覆盖WallsOfConquest_.zip.disabled</span><br></pre></td></tr></table></figure>
<p>注明“简单覆盖”的数据包没有启用，但介于质量可观留备（作者本人不喜欢对原版结构进行破坏性覆盖性修改的东西）</p>
<h1 id="kubejs"><a href="#kubejs" class="headerlink" title="kubejs"></a>kubejs</h1><p>提供直接通过配置JS文件魔改游戏的功能，如对矿石生成调整添加自定义合成表等，也有矿辞统一的功能</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft making log</title>
    <url>/2021/09/26/MC/debugfile/</url>
    <content><![CDATA[<p><img src="/2021/09/26/MC/debugfile/ti.png" alt="2021-12-04_16"></p>
<h1 id="模组部分"><a href="#模组部分" class="headerlink" title="模组部分"></a>模组部分</h1><p>按时间顺序【由近及远】</p>
<h2 id="【结构】大型结构Shrines-1-16-5-2-0-0-Beta8"><a href="#【结构】大型结构Shrines-1-16-5-2-0-0-Beta8" class="headerlink" title="【结构】大型结构Shrines-1.16.5-2.0.0-Beta8"></a>【结构】大型结构Shrines-1.16.5-2.0.0-Beta8</h2><p>加载闪退(毕竟BETA)<br>日志fatal报错：</p>
<figure class="highlight plaintext"><figcaption><span>apply failed mixins.shrines.json:MixinMinecraftServer -> net.minecraft.server.MinecraftServer:</span></figcaption><table><tr><td class="code"><pre><span class="line">org.spongepowered.asm.mixin.injection.throwables.InvalidInjectionException Critical injection failure: @Inject annotation on onConfigurePackRepository could not find any targets matching &#x27;configurePackRepository&#x27; in net.minecraft.server.MinecraftServer. </span><br><span class="line">No refMap loaded. [PREINJECT Applicator Phase -&gt; mixins.shrines.json:MixinMinecraftServer -&gt; Prepare Injections -&gt;  -&gt; </span><br><span class="line">handler$bbi000$onConfigurePackRepository(.../mixin/injection/callback/CallbackInfoReturnable;)V -&gt; Parse]</span><br><span class="line">org.spongepowered.asm.mixin.injection.throwables.InvalidInjectionException: Critical injection failure: @Inject annotation on onConfigurePackRepository could not find any targets matching </span><br><span class="line">&#x27;configurePackRepository&#x27; in net.minecraft.server.MinecraftServer. No refMap loaded. [PREINJECT Applicator Phase -&gt; </span><br><span class="line">mixins.shrines.json:MixinMinecraftServer -&gt; Prepare Injections -&gt;  -&gt; handler$bbi000$onConfigurePackRepository(.../mixin/injection/callback/CallbackInfoReturnable;)V -&gt; Parse]</span><br></pre></td></tr></table></figure>
<p>有：<br>InvalidInjectionException严重注入失败：@onConfigurePackRepository上的injection批注在网络中找不到任何与“configurePackRepository”匹配的目标。我的世界。服务器MinecraftServer。未加载参考地图。<br>更换为BETA7版本正常</p>
<h2 id="某生物附魔模组更新后"><a href="#某生物附魔模组更新后" class="headerlink" title="某生物附魔模组更新后"></a>某生物附魔模组更新后</h2><p>更新后会生物附魔详情会以名称形式显示（很长很难看）<br>找出来了，是【生物】【前置24】地下城怪物dungeons_mobs-1.16.5-2.0.1-beta（测试版？）<br>暂时配置中关闭附魔功能（另有模组——稀有精英怪）</p>
<h2 id="变异骷髅闪退"><a href="#变异骷髅闪退" class="headerlink" title="变异骷髅闪退"></a>变异骷髅闪退</h2><ul>
<li>【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar</li>
<li>生成的变异骷髅似乎在一个跳跃动作后便会使整合包闪退</li>
<li>其它生物均无此现象</li>
<li>可能与实体优化相关模组有关#待解决</li>
<li>已排除：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【优化】实体剔除EntityCulling-1.16.5-2.1.6</span><br><span class="line">【优化】生物加载performant-1.16.2-5-3.77m</span><br><span class="line">【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1</span><br><span class="line">……</span><br><span class="line">所有【优化】</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="BYG草甸方块材质？"><a href="#BYG草甸方块材质？" class="headerlink" title="BYG草甸方块材质？"></a>BYG草甸方块材质？</h2><ul>
<li>现象为草甸方块放在任意草方块、泥土方块上直接变透明</li>
<li>应该是模组冲突导致，与草坪优化相关</li>
<li>【装饰】【前置30】更好的树叶BetterFoliage-2.7.1-Forge-1.16.5.jar由此模组导致此模组识别各个模组的草方块、树叶方块等再基于原本材质进行修饰(如跟丰富的树叶)，可能草甸方块不是简单的草方块换皮，所以有BUG(可通过设置改变，其提供的设置十分详细和丰富)</li>
</ul>
<h2 id="【杂项】快速树叶腐烂FastLeafDecay-v25-jar导致（这个BUG价值三天）"><a href="#【杂项】快速树叶腐烂FastLeafDecay-v25-jar导致（这个BUG价值三天）" class="headerlink" title="【杂项】快速树叶腐烂FastLeafDecay-v25.jar导致（这个BUG价值三天）"></a>【杂项】快速树叶腐烂FastLeafDecay-v25.jar导致（这个BUG价值三天）</h2><ul>
<li>整合包加入了非常的群系性结构性影响生成世界的模组，</li>
<li>在创造新的世界时约有30%的可能卡死</li>
<li>(表现为并非未响应，但加载百分比长时间不变化，任务管理器占用内存变化幅度非常小，如果打开日志的话可以观察到已经在卡死前报错fatal了，只是并没有彻底的阶数游戏进程而且也不再继续)</li>
<li>最后分析可能与树叶检测有关：在生成世界时部分模组已经生成树叶，部分还没有生成，而本模组在生成时就已经开始执行检测？造成冲突？！</li>
</ul>
<h2 id="区块预生成Chunk-Pregenerator"><a href="#区块预生成Chunk-Pregenerator" class="headerlink" title="区块预生成Chunk-Pregenerator"></a>区块预生成Chunk-Pregenerator</h2><ul>
<li>在选择世界生成类型的下方会有一个按钮</li>
<li>在其中点击start便可以预生成区块</li>
</ul>
<h2 id="优化性模组"><a href="#优化性模组" class="headerlink" title="优化性模组"></a>优化性模组</h2><p>在大型整合包中年尤为重要</p>
<h3 id="Out-Of-Sight-机翻"><a href="#Out-Of-Sight-机翻" class="headerlink" title="Out Of Sight(机翻)"></a>Out Of Sight(机翻)</h3><p>厌倦了你的邻居巨大的模板工厂基地 （你甚至看不到大部分时间） 降低你的框架？这个模组是你需要的！<br>如果磁贴实体距离远超过 24 个街区，则”视线外”只需停止它们的渲染，并且您可以在配置文件中将此范围配置到最适合您的任何范围。<br>它还支持实体，一些模组用于渲染 fps 重功能。<br>在一个完美的世界中，每个模组都经过优化和良好的测试，但与通常包含超过 100 模组的模组包，这个世界并不存在。所以我这样做， 使多人模组更可玩！<br><strong>优点：</strong></p>
<ul>
<li>在繁忙的复杂基地附近， 包含大量模板实体和实体 （如机器、灯光等） 的框架速度非常好</li>
<li>客户端仅模组</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>当你走近时， 更明显的弹出的实体和瓷砖实体</li>
</ul>
<h3 id="ferritecore-机翻"><a href="#ferritecore-机翻" class="headerlink" title="ferritecore(机翻)"></a>ferritecore(机翻)</h3><p>此模组以几种不同的方式减少了 Minecraft 的内存使用。此处提供了有关更改的高级别技术描述。<br>保存的内存量将取决于模组，在 1.16.4 Direwolf20 包的 1.2.0 版本中，它大约将标题屏幕上的内存使用量（GC 之后）从 3.1 GB 减少到 1.1-1.2 GB。</p>
<h3 id="smoothboot-机翻"><a href="#smoothboot-机翻" class="headerlink" title="smoothboot(机翻)"></a>smoothboot(机翻)</h3><p>平滑启动 - 优化 Minecraft 装载性能，使低端系统更平滑，高端系统规模更好。<br>如果您的 PC 具有较旧或低端 CPU（前 CPU 具有 8 个或更少的线程），您可能已经注意到 Minecraft 在加载到标题屏幕时占用了 CPU 的 100%，导致光标口吃，使多任务处理变得非常困难。平滑启动可以完全解决这个问题，加载应该更顺畅，而且可能更快。</p>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul>
<li>  更改用于加载的线程数量</li>
<li>  更改 Minecraft 使用的线程的优先级</li>
</ul>
<h4 id="模组的工作原理"><a href="#模组的工作原理" class="headerlink" title="模组的工作原理"></a>模组的工作原理</h4><p>Minecraft 使用执行器执行多重任务。问题是，在加载过程中运行的任务在 CPU 上相当繁重，因此它会导致 100% CPU 使用。而且，有些任务不一定受益于多阅读。平滑引导通过更改执行者的参数（包括其使用的线程数和每个线程的优先级）来修复这些问题。<br>欲了解更多信息，请阅读<a href="https://github.com/UltimateBoomer/mc-smoothboot/wiki">平滑启动维基</a></p>
<h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>模组应与所有模组兼容，包括 Optifine。但是，值得注意的是，模组使用混合素覆盖用于加载游戏的某些方法。</p>
<h3 id="Entity-Culling-机翻"><a href="#Entity-Culling-机翻" class="headerlink" title="Entity Culling(机翻)"></a>Entity Culling(机翻)</h3><p><strong>实体剔除</strong>是一个相对较小的客户端性能核心模组，旨在跳过隐藏（磁贴）实体的渲染。<br>在香草中，它只呈现玩家视野中的所有（瓷砖）实体。这意味着可能有成百上千的 （瓷砖） 实体吃你的 fps， 而你甚至看不到他们， 因为他们隐藏在墙后。<br><strong>剔除隐藏实体</strong><br>此模组光线跟踪另一个线程，以检查（瓷砖实体）是否可见。因为这种方法不是100%准确的每个（瓷砖）实体，不被认为是可见的开放gl遮挡测试将作出。<br>当许多（瓷砖）实体不可见时，这可能导致大量 fps 改进。同时，当大多数（瓷砖）实体可见时，也只有最低限度的开销。<br><strong>阴影的配置选项（当使用视网膜和带阴影的阴影的阴影时）</strong><br>此模组还添加了一些配置选项，以在安装视光素和使用带阴影的阴影的阴影器时调整阴影的渲染。<br>某些阴影器可能会提供配置选项来调整阴影渲染距离。但问题是，所有被认为太远的实体、瓷砖实体和块的阴影仍将由 cpu 处理，然后由遮光板扔掉。<br>此模组允许用户指定实体、瓷砖实体和地形的最大阴影距离。<br>或者，它还允许完全跳过实体、瓷砖实体或地形阴影的渲染。</p>
<h3 id="performant-机翻"><a href="#performant-机翻" class="headerlink" title="performant(机翻)"></a>performant(机翻)</h3><p><strong>最显著的功能：</strong><br>所有功能均可配置，可在配置中调整/启用/禁用。<br><strong>减少 AI 开销</strong><br>AI 不再花费一半的时间来决定他们应该执行哪些任务<br><strong>实体碰撞和路径的多重读数</strong><br>实体更新、碰撞路径和移动的昂贵部分更快，并且发生多重阅读。<br><strong>AI/实体、磁体和事件的负载平衡</strong><br>负载平衡是一种更具侵入性的机械师，以限制滞后罪犯，它可能会影响其他模组的功能，但只有在您的游戏已经落后时才会变得活跃起来。它通过定期检查服务器的 tps 以及它是否低于配置负载平衡中的阈值而工作。然后，它开始配置 AI/实体、Tileent 和事件，以确定谁导致最多的滞后，并限制其更新与这些源导致的滞后。这主要是一个功能，以保持你的游戏可玩，而一些特定的滞后来源通常会把它带到它的膝盖。<br><strong>FPS</strong><br>用于渲染实体的 FPS 得到改进，但仅对客户端的改进很少。<br><strong>登录/播放超时</strong><br>可配置的登录超时，用于在游戏期间登录和断开连接，帮助使用较慢 PC 和连接的玩家。<br><strong>食谱缓存</strong><br>食谱查找得到快得多，帮助所有这些自动制作的模组在那里造成滞后时，通过大量的食谱。<br><strong>快速世界更新</strong><br>随机块和块滴答声整体速度更快，性能成本更低。<br><strong>可配置的公用设施</strong><br>禁用实体生成特定类型的实体。<br>显示非正常块负载的调试设置。<br>用于显示的调试设置</p>
<h2 id="【结构】【前置40】valhelsia-structures-1-16-5-0-1-6-jar"><a href="#【结构】【前置40】valhelsia-structures-1-16-5-0-1-6-jar" class="headerlink" title="【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar"></a>【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar</h2><ul>
<li>本身是别人整合包用的</li>
<li>但是在生成结构的时候，其特殊的代码(貌似调用结构使用方块时会用其特别标志替代，有时会不切换回方块本身)会使草方块(本应是)变为透视方块</li>
<li>貌似是JAVA版本要求比较严格-其建议JAVA8</li>
</ul>
<h2 id="【前置10】【辅助】jei-1-16-5-7-7-1-110-jar-old"><a href="#【前置10】【辅助】jei-1-16-5-7-7-1-110-jar-old" class="headerlink" title="【前置10】【辅助】jei-1.16.5-7.7.1.110.jar.old"></a>【前置10】【辅助】jei-1.16.5-7.7.1.110.jar.old</h2><ul>
<li>jei这之后的几个版本不能使用标签搜索。。</li>
<li>jei-1.16.5-7.7.1.136此版本可以了</li>
</ul>
<h2 id="【生物】-BETA-dannys-expansion1-16-5-1-0-9-1-jar"><a href="#【生物】-BETA-dannys-expansion1-16-5-1-0-9-1-jar" class="headerlink" title="【生物】[BETA]dannys_expansion1.16.5-1.0.9.1.jar"></a>【生物】[BETA]dannys_expansion1.16.5-1.0.9.1.jar</h2><ul>
<li>非常优质的生物模组</li>
<li>待更新或手动调整（生成和掉落物还有问题）</li>
</ul>
<h2 id="风铃chime模组"><a href="#风铃chime模组" class="headerlink" title="风铃chime模组"></a>风铃chime模组</h2><ul>
<li>在1.16.5中缺少与模组衔接的铜风铃合成表与紫水晶风铃合成表</li>
<li>计划通过kubejs手动添加（已添加）</li>
</ul>
<h2 id="【前置13】【生物】【前置12】mysticalworld-1-16-5-0-3-5-24"><a href="#【前置13】【生物】【前置12】mysticalworld-1-16-5-0-3-5-24" class="headerlink" title="【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24"></a>【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24</h2><ul>
<li>此版本银与水银物品贴图有部分混淆</li>
<li>以简单修复</li>
</ul>
<h2 id="【辅助】工具栏inventorio-1-16-forge-1-6-1-jar"><a href="#【辅助】工具栏inventorio-1-16-forge-1-6-1-jar" class="headerlink" title="【辅助】工具栏inventorio-1.16-forge-1.6.1.jar"></a>【辅助】工具栏inventorio-1.16-forge-1.6.1.jar</h2><ul>
<li>此模组提供的额外工具栏位以及自动切换系统较方便</li>
<li>但存在三叉戟等蓄力投掷物无法右击蓄力释放的问题</li>
<li>暂无解决方法</li>
</ul>
<h2 id="Forgotten-Treasures-已弃用"><a href="#Forgotten-Treasures-已弃用" class="headerlink" title="Forgotten+Treasures(已弃用)"></a>Forgotten+Treasures(已弃用)</h2><p>以下问题已查明，系此模组<code>Forgotten+Treasures</code>导致<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1635869592303.png" alt="enter description here"></p>
<ul>
<li>“耕地消失术”表现为自然村庄耕地或玩家耕地在玩家身边几秒内变为普通泥土</li>
<li>钟乳石问题<del>在更新为<code>【前置4】cavebiomeapi-1.16.5-1.4.1.jar 【群系】【前置4】cavesandcliffs-1.16.5-7.0.jar</code>后，钟乳石刷新异常：</del>bs表现为如沙子一样的下落特性，且肉眼可见的作为实体间断刷新</li>
</ul>
<h2 id="Epic-Fight-Mod"><a href="#Epic-Fight-Mod" class="headerlink" title="Epic Fight Mod"></a>Epic Fight Mod</h2><ul>
<li>本模组由于为僵尸村民也修改了动作，使用任何其它模组中的僵尸村民都将出现贴图错误。</li>
<li>本模组对生物也进行了修改，模组生物不会受到本模组的控制。</li>
<li>本模组对装备显示兼容(如旅行者背包)正在更新</li>
</ul>
<h2 id="更好的第一人称视角与地下城武器"><a href="#更好的第一人称视角与地下城武器" class="headerlink" title="更好的第一人称视角与地下城武器"></a>更好的第一人称视角与地下城武器</h2><ul>
<li>无法正常使用双持武器与弩</li>
<li>地下城武器同样与村民守卫模组不能很好兼容(村民守卫无法使用模组中的弩)</li>
</ul>
<h2 id="“弱响应？”"><a href="#“弱响应？”" class="headerlink" title="“弱响应？”"></a>“弱响应？”</h2><ul>
<li>测试时，在进入末地或末地加载千格左右时出现，表现为区块不在加载(甚至直接可以下到原本的地形中)，实体不再响应(生物、掉落物、箱子)，而方块的放置不受影响</li>
<li><DEL>查看日志，在多次排除法h后确定其报错为<code>GL ERROR 65539: invalid key -1</code></DEL></li>
<li>简单更换JAVA版本无法解决</li>
<li><del>经过去除部分模组，确认为模组原因，确定系byg1.3.5导致</del></li>
</ul>
<h2 id="Druidcraft"><a href="#Druidcraft" class="headerlink" title="Druidcraft"></a>Druidcraft</h2><ul>
<li>其0.4.53出现接骨木树花朵材质丢失问题</li>
<li>作者已在0.4.54修复，很快啊(这种bug还要我来de-?)</li>
</ul>
<h2 id="BYG与BOP"><a href="#BYG与BOP" class="headerlink" title="BYG与BOP"></a>BYG与BOP</h2><ul>
<li>两大高版本群系模组</li>
<li>其实由于BOP生成是特殊生成模式，所以冲突在所难免</li>
<li>又有”【优化】生物群系修复(争对新添加群系)biomeidfixer-1.16.5-1.0.1.s4”与”【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4”能够对此问题进行修复</li>
<li>但我混合正常使用只能在两百加模组的全部整合中成功，推测另有模组旁敲侧击的解决了问题</li>
<li>使用单独以上两个修复模组不能使BYG与BOP在BOP群系下正常使用</li>
</ul>
<h2 id="【群系】【前置4】CavesAndCliffsBackport-1-16-5-6-3-jar"><a href="#【群系】【前置4】CavesAndCliffsBackport-1-16-5-6-3-jar" class="headerlink" title="【群系】【前置4】CavesAndCliffsBackport-1.16.5-6.3.jar"></a>【群系】【前置4】CavesAndCliffsBackport-1.16.5-6.3.jar</h2><ul>
<li>目前此模组及其前置共添加了三种地下群系（cavesandcliffs:lush_caves/cavebiomeapi:caves/cavesandcliffs:dripstone_caves）鉴于普通模组没有特别涉及地下生成设置会致使以上群系生物过于单一，故特别添加生成设置</li>
<li>此模组【前置4】系”【前置4】cavebiomeapi-1.16.5-1.3.7.jar”存在一定的特殊性（鉴于在1.17以下还原三维群系此前置模组特加入了三维群系），具观察加入三维群系方式过于暴力（指定一定深度以下为洞穴群系），可能兼容性较差</li>
<li>此模组的创建世界卡死为间歇性，有待进一步确定</li>
<li>关于此模组受特定世界类型影响导致的：地下全是繁茂洞穴、滴水洞穴的问题，或地下完全不存在此模组添加的以上两种群系的问题。目前推断为旧版本问题</li>
</ul>
<h2 id="【音效】动态环绕4-26DynamicSurroundings-1-16-4-4-0-4-2-jar"><a href="#【音效】动态环绕4-26DynamicSurroundings-1-16-4-4-0-4-2-jar" class="headerlink" title="【音效】动态环绕4.26DynamicSurroundings-1.16.4-4.0.4.2.jar"></a>【音效】动态环绕4.26DynamicSurroundings-1.16.4-4.0.4.2.jar</h2><ul>
<li>此模组添加了真实的音效系统，较好的解决了隔墙听声问题</li>
<li>此模组目前以确认可能导致已创建世界无法加载进入问题，日志报错”SoundControl Sound Processor is lagging”，暂停使用后即可成功进入</li>
<li>以上问题目前推测为角色生处方块内部物理声效无法计算所导致（例如处在观察者模式在地下退出世界后重新加入时）</li>
</ul>
<h2 id="【优化】储物抽屉优化drawerfps-2-1-jar"><a href="#【优化】储物抽屉优化drawerfps-2-1-jar" class="headerlink" title="【优化】储物抽屉优化drawerfps-2.1.jar"></a>【优化】储物抽屉优化drawerfps-2.1.jar</h2><ul>
<li>此模组系解决”【杂项】储物抽屉StorageDrawers-1.16.3-8.2.2”所导致的间歇性掉帧问题，效果良好<br><del>* 但此观察此模组系通过在一定范围外不加载“抽屉”单元贴图来解决问题，这常常间歇性导致正常地形方块成片贴图不加载（同种类或不同种类，多数情况下为树干贴图消失、岩壁贴图消失等）同时系统直接报错”OpenGL Error 1281: Invalid Value”（此报错可能原因多样，经多次尝试发现系此模组导致）</del></li>
<li>见下OpenGL</li>
</ul>
<h2 id="Error-adding-element-Base-value-out-of-range-256-10-128"><a href="#Error-adding-element-Base-value-out-of-range-256-10-128" class="headerlink" title="Error adding element: Base value out of range: 256 [-10-128]"></a>Error adding element: Base value out of range: 256 [-10-128]</h2><p>Adding onto the list: betterdefaultbiomes gives warnings whenever this mod (2.2.0) is introduced, the same lag spike as faeldray mentioned happens every 5mins</p>
<ul>
<li>【群系拓展】更好的群系BetterDefaultBiomes-1.16.4+-Alpha 2.6.1 导致？不是</li>
<li>好像无伤大雅？</li>
</ul>
<h2 id="varint-too-big"><a href="#varint-too-big" class="headerlink" title="varint too big"></a>varint too big</h2><p>在连接自己的模组服的时候发生<br><img src="/2021/09/26/MC/debugfile/1647423239616.png" alt="enter description here"><br>好像是Terrain模组导致<code>【风味拓展】【自然】【装饰】装饰性环境植物terraincognita-1.16.3-1.7.1.1.jar</code></p>
<h1 id="生成调整-待记录"><a href="#生成调整-待记录" class="headerlink" title="生成调整(待记录)"></a>生成调整(待记录)</h1><h2 id="矿石"><a href="#矿石" class="headerlink" title="矿石"></a>矿石</h2><ul>
<li>生成铜的模组有三个，太多了，关闭两个（一个设为1）</li>
<li>wyrmroost中生成的铂矿太多了，且不可调控，通过强制修改掉落物，使其掉落NNOW中提供的兼容铂粒(好蠢后面发现拿kube可以直接改)</li>
<li>锡也有两个模组在生成，降低了比例</li>
<li>铅也调整了在mysticalworld中配置的生成高度等</li>
</ul>
<h2 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h2><p>其实之前通过“【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar”改过很多，当时没有做记录，现在可能也忘了<br>原版生物<br>各种水生物<br>三洞穴群系<br>BOSS(特指有屏幕血条的生物)</p>
<p>以下正式记录</p>
<h3 id="减少"><a href="#减少" class="headerlink" title="减少"></a>减少</h3><ul>
<li>‘minecraft_earth_mod:系列<br>虽然只有10的weight但有各种牛<br>故将其中的牛下调为5<br>(除 minecraft_earth_mod:wooly_cow在寒带将15下调为10)<br>其中又给viler女巫下调为5，并减少群系</li>
</ul>
<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul>
<li>河流、湖泊、沼泽、洞穴的鱼类<br>河流<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minecraft:river</span><br><span class="line">mysticalbiomes:petrified_river</span><br><span class="line">mysticalbiomes:sprout_river</span><br><span class="line">mysticalbiomes:uncanny_river</span><br><span class="line">minecraft:frozen_river</span><br></pre></td></tr></table></figure>
湖泊<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">betterendforge:megalake（the_end</span><br><span class="line">betterendforge:megalake_grove（the_end</span><br><span class="line">biomesoplenty:coniferous_lakes</span><br><span class="line">biomesoplenty:grove_lakes</span><br><span class="line">byg:fresh_water_lake</span><br><span class="line">byg:frozen_lake</span><br><span class="line">byg:great_lake_isles</span><br><span class="line">byg:great_lakes</span><br><span class="line">byg:polluted_lake</span><br><span class="line">genericeco:cold_lake</span><br><span class="line">genericeco:frozen_lake</span><br><span class="line">genericeco:great_lakes</span><br><span class="line">genericeco:lake</span><br><span class="line">genericeco:lukewarm_lake</span><br><span class="line">genericeco:red_desert_lakes</span><br><span class="line">genericeco:warm_lake</span><br><span class="line">minecraft:desert_lakes</span><br><span class="line">projectvibrantjourneys:crystal_lakes</span><br></pre></td></tr></table></figure>
沼泽<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byg:cold_swamplands</span><br><span class="line">byg:cypress_swamplands</span><br><span class="line">byg:vibrant_swamplands</span><br><span class="line">byg:mangrove_marshes</span><br><span class="line">byg:marshlands</span><br><span class="line">environmental:marsh</span><br><span class="line">environmental:mushroom_marsh</span><br><span class="line">genericeco:dark_swampland</span><br><span class="line">genericeco:dark_swampland_marshes</span><br><span class="line">genericeco:dense_marsh</span><br><span class="line">genericeco:lush_swamp</span><br><span class="line">genericeco:lush_swamp_marshes</span><br><span class="line">genericeco:marsh</span><br><span class="line">genericeco:swamp_marshes</span><br><span class="line">minecraft:swamp</span><br><span class="line">projectvibrantjourneys:mangrove_marsh</span><br></pre></td></tr></table></figure>
洞穴<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cavebiomeapi:caves</span><br><span class="line">cavesandcliffs:dripstone_caves</span><br><span class="line">cavesandcliffs:lush_caves</span><br><span class="line">darkerdepths:crystal_cave</span><br><span class="line">darkerdepths:glowshroom_caves</span><br></pre></td></tr></table></figure>
byg:dead_sea</li>
</ul>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="Better-Minecraft-FORGE-v34"><a href="#Better-Minecraft-FORGE-v34" class="headerlink" title="Better Minecraft [FORGE] v34"></a>Better Minecraft [FORGE] v34</h2><p>在此版本后，项目组不再使用Global Data- &amp; Resourcepacks (by JTK222)模组</p>
<h2 id="data-get-entity-p-SelectedItem"><a href="#data-get-entity-p-SelectedItem" class="headerlink" title="/data get entity @p SelectedItem"></a><code>/data get entity @p SelectedItem</code></h2><p>查看手持物品详细数据<br>非常有用</p>
<h2 id="OpenGL-Error-1281-Invalid-Value"><a href="#OpenGL-Error-1281-Invalid-Value" class="headerlink" title="OpenGL Error 1281: Invalid Value"></a><code>OpenGL Error 1281: Invalid Value</code></h2><p><del>老问题，不只是“【优化】储物抽屉优化drawerfps-2.1.jar”的原因，这次表现为水体透明<br>好家伙不查不知道，首先看看OpenGL是个啥吧：<br><code>OpenGL（英语：Open Graphics Library，译名：开放图形库或者“开放式图形库”）是用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）。这个接口由近350个不同的函数调用组成，用来绘制从简单的图形比特到复杂的三维景象。而另一种程序接口系统是仅用于Microsoft Windows上的Direct3D。OpenGL常用于CAD、虚拟现实、科学可视化程序和电子游戏开发。</code><br>总之不只是我的世界高清修复在用<br>那么看了一下日志，发现和一个叫VBO的东西相关，一查：<br><code>顶点缓存对象（VBO）准许顶点数组数据存放在服务端的高性能显卡内存中，且提供高效数据传输。</code><br>又有知乎大佬说和做水效相关，那么找对问题了，但怎么解决。。。</del></p>
<ul>
<li>与JAVA版本有关</li>
<li>尝试关闭Optifine提供的性能设置中的区域渲染</li>
</ul>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>x86模型机</title>
    <url>/2021/09/17/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E8%AF%BE/x86%E6%A8%A1%E5%9E%8B%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="模型机的总体设计"><a href="#模型机的总体设计" class="headerlink" title="模型机的总体设计"></a>模型机的总体设计</h1><h2 id="模型机指令系统"><a href="#模型机指令系统" class="headerlink" title="模型机指令系统"></a>模型机指令系统</h2><ul>
<li>指令格式<ul>
<li>双操作数指令<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536491.png" alt="enter description here"></li>
<li>单操作数指令<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536597.png" alt="enter description here"></li>
<li>转移指令<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536616.png" alt="enter description here"></li>
</ul>
</li>
<li>寻址方式<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536490.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536596.png" alt="enter description here"></li>
<li>操作类型<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536614.png" alt="enter description here"></li>
</ul>
<h2 id="CPU的组成"><a href="#CPU的组成" class="headerlink" title="CPU的组成"></a>CPU的组成</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536611.png" alt="enter description here"></p>
<h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><ul>
<li>输入选择器/锁存器<br>  选择数据来源，送入ALU进行运算处理，或借道ALU进行传送。数据来源有：R0~R3、C、D、PC、SP、PSW、MDR。</li>
<li>ALU部件<br>  作各种算术，逻辑运算；由微命令M，S0，S1，S2，S3，C0选择操作功能。</li>
<li>移位器<br>  作直接传送、左移、右移；由微命令实现直接、左、右移。</li>
</ul>
<h3 id="寄存器设置"><a href="#寄存器设置" class="headerlink" title="寄存器设置"></a>寄存器设置</h3><ul>
<li>用于处理的寄存器：通用寄存器、暂存器<ul>
<li>通用寄存器组<br>  一组可编程访问的寄存器。在指令系统中为这些R分配了编号，有：R0~R3，PC，SP，PSW。</li>
<li>暂存器<br>  用户不能直接访问的R，用来暂存信息，在指令系统中没有为它们分配编号，有C、D。 暂存器C：从主存中读取源操作数或源操作数地址时，使用它。 暂存器D：从主存中读取目的作数或目的操作数地址时，或中间运算结果时，使用它。</li>
</ul>
</li>
<li>用于控制的寄存器：指令寄存器IR、程序计数器PC、 程序状态字寄存器PSW<ul>
<li>指令寄存器IR<br>  用来存放现行运行指令，它的输出是产生微操作命令序列的主要逻辑依据。</li>
<li>程序计数器PC<br>  PC提供后继指令地址，并送往与主存器相连接的地址寄存器（MAR）。</li>
<li>程序状态字寄存器PSW（program status word）<br>  PSW的内容就是表现的现行程序的状态。 包括： 特征位：进位C、溢出V、零Z、负N，允许中断I等； 编程设定位。</li>
</ul>
</li>
<li>用作主存接口的寄存器：地址寄存器MAR、数据缓冲寄存器MBR(MDR)<br>  CPU访问主存时，首先送出地址码，然后送出/接收数据，需：<br>  A.当作用在MAR上的微命令EMAR为低电平时，MAR输出呈高阻态，与地址总线断开；<br>  B.当作用在MAR上的微命令EMAR为高电平时，MAR输出其内容（地址信息）送往地址总线；<ul>
<li>地址寄存器MAR<br>  读取指令/存取操作数/操作数地址时，CPU先将地址信息送入MAR，再由MAR经地址总线送往主存M，找到相应的主存单元。</li>
<li>数据缓冲寄存器MBR(MDR)<br>  由控制命令R/W决定传送方向。<br>  R：由主存单元-&gt;数据总线-&gt;MDR<br>  W：由MDR-&gt;数据总线-&gt;数据单元</li>
</ul>
</li>
</ul>
<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><ul>
<li>定义<br>是一组能为多个部件分时共享的公共信息传送线路，及相应的控制逻辑。<br>数据通路结构：数据传送结构，它是CPU总体结构的核心问题。 总线：是一组能为多个部件分时共享的公共信息传送线路，及相应的控制逻辑。</li>
<li>总线类型<br>① CPU内总线： 模型机中是一组单向数据传送总线，是连接运算器、寄存器等CPU内部部件的总线。<br>② 部件间总线： 芯片间的连接总线，包含地址线与数据线两组。<br>③ 系统总线： 作用是计算机系统内各大部件进行信息交换的基础，分：地址总线AB、数据总线DB、控制总线CB<br>④ 外总线： 一台CS与其它设备相连接的总线。</li>
</ul>
<h3 id="时序系统"><a href="#时序系统" class="headerlink" title="时序系统"></a>时序系统</h3><p>产生时序信号的部件称为时序发生器或时序系统，它由一个振荡器和一组计数分频器组成。</p>
<h2 id="CPU的内部数据通路结构"><a href="#CPU的内部数据通路结构" class="headerlink" title="CPU的内部数据通路结构"></a>CPU的内部数据通路结构</h2><p>模型机如何<strong>以内总线为纽带</strong>建立各部件间的数据传送通路，即CPU内部数据通路结构，这是CPU组成的核心问题。<br>模型机的<strong>结构</strong>为：单组、单向内总线、分立寄存器结构。</p>
<h3 id="模型机数据通路框图"><a href="#模型机数据通路框图" class="headerlink" title="模型机数据通路框图"></a>模型机数据通路框图</h3><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536612.png" alt="enter description here"></p>
<ul>
<li>可编程寄存器<br>  <strong>R0~R3</strong>通用寄存器(000,001,010,011)、<strong>SP</strong>(100)堆栈指针、<strong>PSW</strong>(101)程序状态寄存器、<strong>PC</strong>程序计数器</li>
<li>指令寄存器IR<br>用来存放现行运行指令，它的输出是产生微操作命令序列的主要逻辑依据。</li>
<li>暂存器<br>  <strong>C、D</strong>约定从主存中读源操作数、操作数地址时用<strong>C</strong>；从主存中取目的操作数、操作数地址或暂存时，用<strong>D</strong></li>
<li>主存接口寄存器MAR、MDR(MBR)<ul>
<li>地址寄存器<strong>MAR</strong><br>读取指令/存取操作数/操作数地址时，CPU先将地址信息送入MAR，再由MAR经地址总线送往主存M，找到相应的主存单元。</li>
<li>数据缓冲寄存器<strong>MBR(MDR)</strong><br>   由控制命令R/W决定传送方向。<br>   R：由主存单元-&gt;数据总线-&gt;MDR<br>   W：由MDR-&gt;数据总线-&gt;数据单元</li>
</ul>
</li>
</ul>
<h3 id="各类信息的传送路径"><a href="#各类信息的传送路径" class="headerlink" title="各类信息的传送路径"></a>各类信息的传送路径</h3><ul>
<li>取指令地址<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536613.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536615.png" alt="enter description here"></li>
<li>指令信息的传递<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536617.png" alt="enter description here"></li>
<li>取操作数地址—①寄存器间址（R）<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536459.png" alt="enter description here"></li>
<li>取操作数地址—②自减型寄存器间址 -(R)<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536460.png" alt="enter description here"></li>
<li>取操作数地址—③自增型寄存器间址 (R)+<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536461.png" alt="enter description here"><br>两步走</li>
</ul>
<h3 id="微命令设置"><a href="#微命令设置" class="headerlink" title="微命令设置"></a>微命令设置</h3><ul>
<li>数据通路操作<pre><code>1) ALU输入选择:  Ri→A，Ri的取值：R0—R3，C,D,PC,SP Ri→B，Ri的取值：R0—R3,C,D,MDR,PSW 
2) ALU功能选择: S0—S3，C0，M （6位线）
3) 移位器功能选择:  00：直传DM、01：左移SL、10：右移SR、11：高低字节交换EX （2位线）
4) 分配脉冲（打入到寄存器中的脉冲）:  CPR0—CPR3, CPC,CPD,CPMDR,CPMAR,CPPSW, CPPC,CPSP
</code></pre>
</li>
<li>访存操作相关的控制信号（系统总线及主存有关的微命令）<pre><code>EMAR（输出到AB）、EMDR（输出到DB）、SMDR（DB到MDR）、 R（M到CPU）、W（CPU到M）、SIR（M到IR）
(1)读入CPU：EMAR、R、SMDR（除指令以外），或SIR（指令） 
(2)写入M：EMAR、EMDR、W
</code></pre>
</li>
</ul>
<h2 id="主机与外部的数据通路-与-信息传送控制方式"><a href="#主机与外部的数据通路-与-信息传送控制方式" class="headerlink" title="主机与外部的数据通路 与 信息传送控制方式"></a>主机与外部的数据通路 与 信息传送控制方式</h2><p>主机与外设的连接模式：辐射型、总线型、通道型<br>对信息传送的控制方式：直接程序传送方式、程序中断方式、直接有储器访问方式</p>
<h3 id="主机与外围设备的连接方式"><a href="#主机与外围设备的连接方式" class="headerlink" title="主机与外围设备的连接方式"></a>主机与外围设备的连接方式</h3><ul>
<li>辐射型<pre><code>主机与各外围设备间有单独的数据通路；速度较快，**但**不易扩展。
</code></pre>
</li>
<li>总线型<pre><code>各外设通过各自接口直接与公共的系统总线相连；结构简单，易扩展，**但**如果整个系统只有一组系统总线时，信息吞吐量有限，且速度较慢。
</code></pre>
</li>
<li>通道型<pre><code>采取一种称为多种连接模式的部件去连接外设，这种部件称为通道；并行能力强。
</code></pre>
</li>
</ul>
<h3 id="信息传送的控制方式"><a href="#信息传送的控制方式" class="headerlink" title="信息传送的控制方式"></a>信息传送的控制方式</h3><ul>
<li><p>直接程序传送方式<br>  <strong>定义</strong>：CPU直接利用I/O指令程序实现I/O传送,在外设工作期间, CPU不执行与I/O无关的操作。<br>  <strong>主机状态</strong>：CPU处于查询—等待—执行状态。<br>  <strong>外设状态</strong>：在外设接口的状态字中设置两位表状态。 </p>
<pre><code>  空闲——外设不工作，00 
  工作（忙）——外设置在执行操作，01 
  结束（完成）——外设完成一次操作，10
</code></pre>
<p>  <strong>特点</strong>：CPU不能与外设并行地工作,因而CPU利用率低,并且CPU不能响应来自外部的随机请求。<br>  <img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536425.png" alt="enter description here"></p>
</li>
<li><p>程序中断方式<br>  <strong>定义</strong>：CPU暂停执行现行程序，转去执行中断程序，以处理某些随机事态，并在处理完毕后自动恢复原程序的执行。<br>  实质：程序的切换过程。包括将断点，有关状态信息（PSW）压栈保护起来，然后根据中断号，从中断向量表中得到中断服务程序的地址，送入PC中。（这一切是硬件实现的，称为隐指令）<br>  特点：随机性<br>  <strong>软件组织与程序安排</strong>：将系统中接收的中断请求编制成中断服务模块存入主存，并将其入口地址写入中断向量表。<br>  <strong>硬件组织</strong>：<br>  CPU方面：在PSW中设置一个中断位；在模型机中，外部请求只有IREQ0—IREQ7，因此在CPU内还应设置一个判优逻辑。<br>  接口方面：设置了中断接口。<br>  <strong>特点</strong>：可以处理随机的复杂事态，但程序的切换需花费一定时间，因此，其适用范围是中低速I/O操作与随机请求。<br>  <img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536427.png" alt="enter description here"></p>
</li>
<li><p>直接存储器存取（DMA）方式<br>  <strong>定义</strong>：直接依靠硬件在主存与I/O设备进行简单成批数据传送的一种工作方式，在传送期间不需CPU的程序干预。<br>  实质：暂停执行程序。不存在断点，现场的保护，速度很快。<br>  <strong>程序组织与DMA初始化</strong>：在进行DMA传送前，应对DMA控制器进行初始化，主要初始化以下三个信息：<br>  送出控制字：操作类型（输入或输出），外设地址；<br>  送出主存缓冲区首址：传送或接收数据的起始地址；<br>  送出交换量：DMA是批量传送的，传送的数据块数目。<br>  <strong>硬件组织</strong>：由DMA控制器控制管理DMA传送。<br>  CPU方面:在CPU的时序系统中，设置专门的DMA周期。在此周期，总线由DMA控制。每当系统总线周期结束（完成一次总线传送）时，CPU对总线控制权转移作出判断，是继续由DMA控制器掌管，还是CPU收回其控制权，恢复正常程序执行。<br>  接口方面:设置DMA控制器与接口。<br>  <strong>特点</strong>：适用于高速外设与主存之间的简单批量数据传送。<br>  <img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536429.png" alt="enter description here"></p>
</li>
</ul>
<h2 id="时序控制方式-与-时序系统"><a href="#时序控制方式-与-时序系统" class="headerlink" title="时序控制方式 与 时序系统"></a>时序控制方式 与 时序系统</h2><h3 id="时序控制方式"><a href="#时序控制方式" class="headerlink" title="时序控制方式"></a>时序控制方式</h3><ul>
<li>同步控制方式<br>  <strong>定义</strong>：如果各项操作与统一的时序信号同步，称为同步控制。<br>  <strong>时间分配</strong>（基本特征）：同步控制方式的基本特征是将操作时间划分为许多时钟周期，周期长度固定，每个时钟周期完成一步操作。<br>  <strong>同步定时</strong>：在许多操作中需要严格地同步定时，如同步打入脉冲。<br>  <strong>各部件间的协调</strong>：在CPU内，一般采用由CPU提供的统一时序信号来控制部件间信息的传送的。<br>  <strong>特点</strong>：时序关系比较简单，在时间安排利用上可能是不经济的。</li>
<li>异步控制方式<br>  <strong>定义</strong>：异步控制是指各项操作按其需要选择不同的时间，不受统一的时钟周期的约束；各操作之间的衔接与各部件之间的信息交换采取应答方式。<br>  <strong>时间分配</strong>（基本特征）：没有统一的节拍划分与同步定时脉冲，但存在着申请、响应、询问、回答一类的应答关系。<br>  <strong>主从设备的概念</strong>：申请使用总线，并获得批准后掌管总线控制权的设备，称为主设备，否则为从设备。<br>  <strong>特点</strong>：时间紧凑，能按不同部件，设备的实际需要分配时间，实现异步应答所需的控制比较复杂。</li>
<li>实际应用中的一些变化<br>在CPU或设备的内部普遍采用同步控制方式；对连接CPU、主存、外设的系统总线，有的采用同步，有的采用异步控制，但多采用异步控制。在实际应用中，同步控制甚至引入异步应答关系。</li>
</ul>
<h3 id="指令序列间的衔接方式"><a href="#指令序列间的衔接方式" class="headerlink" title="指令序列间的衔接方式"></a>指令序列间的衔接方式</h3><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536430.png" alt="enter description here"></p>
<h2 id="同步控制的时序系统"><a href="#同步控制的时序系统" class="headerlink" title="同步控制的时序系统"></a>同步控制的时序系统</h2><h3 id="定义及组成"><a href="#定义及组成" class="headerlink" title="定义及组成"></a>定义及组成</h3><p><strong>时序系统</strong>：产生节拍，脉冲等时序信号的部件，称为时序系统。<br><strong>时序系统的组成</strong>：一个振荡器（产生脉冲源）；一组计数分频逻辑</p>
<h3 id="时序划分层次"><a href="#时序划分层次" class="headerlink" title="时序划分层次"></a>时序划分层次</h3><p><strong>指令周期</strong>：读取并执行一条指令所需的时间，称为指令周期。一般不作为时序的一级。<br><strong>CPU工作周期</strong>：在指令周期中的某一工作阶段所需的时间，称为一个工作周期。一般不同（FT、ST、DT、ET）。<br><strong>时钟周期</strong>（节拍）：是时序系统中最基本的时间分段。各节拍的长度相同（一般一个节拍是一个时钟周期）。<br><strong>定时脉冲</strong>（工作脉冲）：有的操作如打入R，还需严格的定时脉冲，以确定在哪一刻打入。</p>
<h1 id="算术逻辑运算部件"><a href="#算术逻辑运算部件" class="headerlink" title="算术逻辑运算部件"></a>算术逻辑运算部件</h1><h2 id="加法单元"><a href="#加法单元" class="headerlink" title="加法单元"></a>加法单元</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536431.png" alt="enter description here"><br>Σ<sub>i</sub>=（A<sub>i</sub> ⊕ B<sub>i</sub>）⊕ C<sub>i-1</sub><br>C<sub>i</sub> = A<sub>i</sub> B<sub>i</sub> +（A<sub>i</sub> ⊕ B<sub>i</sub>）C<sub>i-1</sub><br>根据上式，得出一位全加器的逻辑电路图：<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536432.png" alt="enter description here"></p>
<h2 id="串行加法器"><a href="#串行加法器" class="headerlink" title="串行加法器"></a>串行加法器</h2><ul>
<li>定义：如果每步只求一位和，将n位加分成n步实现，这样的加法器称为串行加法器。</li>
<li>组成：一位全加器、移位寄存器（从低到高串行提供操作数相加）、寄存器、触发器（记录进位信号）</li>
<li>组成图：<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536433.png" alt="enter description here"></li>
<li>特点：结构简单，速度极慢。</li>
</ul>
<h2 id="并行加法器"><a href="#并行加法器" class="headerlink" title="并行加法器"></a>并行加法器</h2><ul>
<li>定义：如果用n位全加器一步实现n位相加，即n位同步相加，这样的加法器称为并行加法器。</li>
<li>组成：n位加法器+进位链（串行进位链、并行进位链）<br>根据（指Ci-1）输入量提供时间的不同，将进位链分为带串行进位链的并行加法器，带并行进位链的并行加法器。<br>加法器的运算速度不仅与全加器的运算速度有关，更主要的因素是取决于进位传递速度。</li>
<li>进位信号的基本逻辑<br>C<sub>i</sub>  = A<sub>i</sub>B<sub>i</sub> +（A<sub>i</sub> ⊕ B<sub>i</sub>）C<sub>i-1</sub><br>G<sub>i</sub> = A<sub>i</sub>B<sub>i</sub>  进位产生函数（本地进位） <br>P<sub>i</sub> = A<sub>i</sub> ⊕ B<sub>i</sub> 进位传递函数（传递进位）</li>
<li>串行进位链<br>关系式：<br>C<sub>1</sub> = G<sub>1</sub> + P<sub>1</sub>C<sub>0</sub><br>C<sub>2</sub> = G<sub>2</sub> + P<sub>2</sub>G<sub>1</sub><br>……<br>C<sub>n</sub> = G<sub>n</sub> + P<sub>n</sub>G<sub>n-1</sub><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536435.png" alt="enter description here"><br>特点：结构比较简单，运算速度比较慢。</li>
<li>并行进位链<br>关系式：<br>C<sub>1</sub> = G<sub>1</sub> + P<sub>1</sub>C<sub>0</sub><br>C<sub>2</sub> = G<sub>2</sub> + P<sub>2</sub>G<sub>1</sub> + P<sub>2</sub>P<sub>1</sub>C<sub>0</sub><br>……<br>C<sub>n</sub> = G<sub>n</sub> + P<sub>n</sub>G<sub>n-1</sub> + …+ P<sub>n</sub>…P<sub>1</sub>C<sub>0</sub><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536436.png" alt="enter description here"><br>特点：结构复杂，运算速度快。</li>
<li>组内并行，组间并行（实际为串行）的进位链<br>分两级进行<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536437.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536453.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536455.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536456.png" alt="enter description here"><br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536457.png" alt="enter description here"><br>然后<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632327536458.png" alt="enter description here"></li>
</ul>
<h2 id="ALU单元与多位ALU部件"><a href="#ALU单元与多位ALU部件" class="headerlink" title="ALU单元与多位ALU部件"></a>ALU单元与多位ALU部件</h2><ul>
<li>一位<img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301249.png" alt="enter description here"></li>
<li>4位 74LK181N<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301197.png" alt="enter description here"><br>其总共由22个引脚，8个数据输入端：<del>A0、</del>A1、<del>A2、</del>A3，<del>B0、</del>B1、<del>B2、</del>B3，这八个都是低电平有效。<br>S0、S1、S2、S3四个控制端，这四个控制端主要控制两个四位输入数据的运算，例如加、减、与、或。CN端处理进入芯片前进位值，M控制芯片的运算方式，包括算术运算和逻辑运算。<br>F0、F1、F2、F3是四个二进制输出端，以一个四位二进制形式输出运算的结果。CN4记录运算后的进位。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301248.png" alt="enter description here"><h1 id="运算方法"><a href="#运算方法" class="headerlink" title="运算方法"></a>运算方法</h1><h2 id="定点加减运算"><a href="#定点加减运算" class="headerlink" title="定点加减运算"></a>定点加减运算</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301129.png" alt="enter description here"><br>两位符号位判断溢出：11正常负数，10负溢出，00正常正数，01正溢出<h2 id="定点乘法运算"><a href="#定点乘法运算" class="headerlink" title="定点乘法运算"></a>定点乘法运算</h2>一种乘法器是将n位乘法转换为 n次累加与移位循环，因而可用常规加法器实现。 另一类乘法器结构，称为阵列乘法器（一拍内实现多项部分积相加）。</li>
<li>原码一位乘法<br>寄存器分配与初始值：A,B,C三个寄存器<br>A存放部分积累加和，初始值为0(双符号位00表示)；<br>B存放被乘数X（绝对值），此时符号位为双符号位00（在乘的过程中，B中的值一直保持不变）；<br>C存放乘数Y（绝对值），将符号位去掉；C寄存器的初始值是乘数Y的尾数（有效位数），以后每乘一次，将已处理的低位乘数右移舍去，同时将A寄存器的末位移入C寄存器的高位。<br>例：<br>X = 0.1101，Y =-0.1011，求 XY =？ 设寄存器 A = 00.0000，B =｜X｜= 00.1101，C =｜Y｜= .1011。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301130.png" alt="enter description here"><br>即1.10001111</li>
<li>补码一位乘法<br>寄存器分配与初始值：A,B,C三个寄存器<br>A存放部分积累加和，初始值为0(双符号位00表示)；<br>B存放被乘数X补，（双符号位00、或11表示）；<br>C存放乘数Y补，单符号位（符号位参与运算），Y的末位添0，称为附加位Yn+1。<br>例：<br>X = -0.1101，Y = -0.1011，求[XY]补 = ？<br>设 A = 00.0000，B = X补 = 11.0011，-B = -X补= 00.1101，C = Y补 = 1.0101。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301195.png" alt="enter description here"><h2 id="定点除法运算"><a href="#定点除法运算" class="headerlink" title="定点除法运算"></a>定点除法运算</h2>A,B,C三个寄存器；<br>A初始值存放被除数（绝对值），以后存放各次余数，A取双符号位，从第一符号位判断是否够减，从而决定商值；<br>B寄存器存放除数的绝对值，取双符号位；<br>C存放商，取单符号位；商由末位置入，在每次置入新商时，原商同时左移一位。<br>基本操作与上商：<br>a. 第一步操作必为2r0-Y<br>b. 以后各部根据如下条件进行：<br>  ri为正表示够减，即Qi=1，则第i+1步应为2ri-Y，<br>  ri为负表示不够减，即Qi=0，则第i+1步应为2ri+Y；<br>c. 最后一步：若第n步（最后一步）余数为负，则需增加一步恢复余数，这增加的一步不移位，操作为rn+Y。<br>例：<br>X÷Y = -0.10110÷0.11111 = ?<br>设A = |X| = 00.10110，B = |Y| = 00.11111，则B = 00.11111，-B=11.00001， C = |Q| = 0.00000。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301269.png" alt="enter description here"><h1 id="模型机的组合逻辑控制器"><a href="#模型机的组合逻辑控制器" class="headerlink" title="模型机的组合逻辑控制器"></a>模型机的组合逻辑控制器</h1></li>
<li>定义：组合逻辑控制器的微命令是由组合逻辑电路来实现。每种微命令都需要一组逻辑电路，全机所有微命令所需的逻辑电路就构成了微命令发生器。</li>
<li>工作原理：从主存读取的现行指令存放在IR中，其中，操作码与寻址方式代码分别经译码电路形成一些中间逻辑信号，送入微命令发生器，作为产生微命令的基本逻辑依据。微命令的形成还需考虑各种状态信息，如PSW所反映的CPU内部运行状态、由控制台（如键盘）产生的操作员控制命令、I/O设备与接口的有关状态、外部请求等等。</li>
</ul>
<h2 id="工作周期"><a href="#工作周期" class="headerlink" title="工作周期"></a>工作周期</h2><p>模型机设置了六种工作周期状态，用六个周期状态触发器作为它们的标志。其中，四个工作周期（取指、源、目的、执行）用于指令的正常执行，两个工作周期（中断、DMA）用于I/O传送控制。</p>
<ul>
<li>取指周期FT：在FT中完成的操作是公共性操作;</li>
<li>源周期ST——<strong>如果需要</strong>从主存中读取源操作数（非寄存器寻址），则进入ST。</li>
<li>目的周期DT——<strong>如果需要</strong>从主存中读取目的地址或目的操作数（非寄存器寻址），则进入DT。</li>
<li>执行周期ET——取得操作数后，CPU进入ET，这也是各类指令都需经历的最后一个工作阶段。</li>
<li>中断周期IT——除了考虑指令的正常执行，还需考虑外部请求带来的变化。在响应中断请求之后，到执行中断服务程序之前，需要一个过渡期，称为中断周期IT。</li>
<li>DMA周期DMAT——响应DMA请求之后，CPU进入DMAT。在DMAT中，CPU交出系统总线的控制权，即MAR、MDR与系统总线断开（呈高阻态），改由DMA控制器控制系统总线，实现主存与外围设备间的数据直传。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1632829301196.png" alt="enter description here"><h2 id="指令周期与操作时间表"><a href="#指令周期与操作时间表" class="headerlink" title="指令周期与操作时间表"></a>指令周期与操作时间表</h2>拟定各类指令的执行流程，也就是确定指令执行的具体步骤，即各类信息如何分步地按要求流动。拟定操作时间表，即给出实现上述流程所需的微操作命令序列。其中包含维持一个时钟周期的电位型微命令，以及短暂的脉冲型微命令。操作时间表还将表明出现各种微命令的逻辑条件与时间条件。</li>
</ul>
<h1 id="模型机的微程序控制器"><a href="#模型机的微程序控制器" class="headerlink" title="模型机的微程序控制器"></a>模型机的微程序控制器</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperledger Fabric官方文档#0</title>
    <url>/2021/11/09/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/fabric%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h2><p>区块链网络的核心是一个<strong>分布式账本</strong>，记录网络上发生的所有交易（数据变化）。<br>区块链使用 <strong>智能合约</strong> 来提供对账本的受控访问。<br>保持账本在整个网络中同步的过程称为 <strong>共识</strong> 。</p>
<h2 id="为什么区块链有用"><a href="#为什么区块链有用" class="headerlink" title="为什么区块链有用"></a>为什么区块链有用</h2><p>当然有用…</p>
<h2 id="什么是Hyperledger-Fabric"><a href="#什么是Hyperledger-Fabric" class="headerlink" title="什么是Hyperledger Fabric"></a>什么是Hyperledger Fabric</h2><p>Hyperledger Fabric 与其他区块链系统不同的地方是 <strong>私有</strong> 和 <strong>许可</strong> 。与允许未知身份参与网络的开放式非许可系统（需要诸如“工作量证明”之类的协议来验证交易并保护网络）不同，Hyperledger Fabric 网络的成员需要从可信赖的 <strong>成员服务提供者（MSP）</strong> 注册。<br>Hyperledger Fabric 还提供创建 <strong>通道</strong> 的功能，允许一组参与者创建各自的交易账本。</p>
<h3 id="共享账本"><a href="#共享账本" class="headerlink" title="共享账本"></a><strong>共享账本</strong></h3><p>Hyperledger Fabric 有一个账本子系统，包括两个组件： <strong>世界状态</strong> 和 <strong>交易日志</strong> 。<strong>世界状态组件</strong>描述了在给定时间点的账本的状态。它是账本的数据库。<strong>交易日志组件</strong>记录产生世界状态中当前值的所有交易；这是世界状态的更新历史。<br>Hyperledger Fabric <strong>智能合约</strong>用<strong>链码</strong>编写，当该应用程序需要与账本交互时，由区块链外部的应用程序调用。在大多数情况下，链码只与账本的数据库等交互。</p>
<h3 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a><strong>共识机制</strong></h3><p>交易必须按照发生的顺序写入账本，为此，必须建立交易的顺序。<br>例如，PBFT（实用拜占庭容错算法）可以为文件副本提供一种机制，使其能够保持各个副本的一致性，即使在发生损坏的情况下也是如此。<br>或者，在比特币中，通过称为挖矿的过程进行排序，其中竞争计算机竞相解决加密难题，该难题定义所有过程随后构建的顺序。<br>Hyperledger Fabric 被设计为允许网络启动者选择最能代表参与者间存在的关系的共识机制。</p>
<h1 id="Hyperledger-Fabric-模型"><a href="#Hyperledger-Fabric-模型" class="headerlink" title="Hyperledger Fabric 模型"></a>Hyperledger Fabric 模型</h1><h2 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h2><p>资产是可以通过网络交换的几乎所有具有价值的东西，从食品到古董车、货币期货。</p>
<h2 id="链码"><a href="#链码" class="headerlink" title="链码"></a>链码</h2><p>链码执行与交易排序分离，限制了跨节点类型所需的信任和验证级别，并优化了网络可扩展性和性能。</p>
<h2 id="账本特性"><a href="#账本特性" class="headerlink" title="账本特性"></a>账本特性</h2><p> 不可变的共享账本为每个通道编码整个交易历史记录，并包括类似 SQL 的查询功能，以便高效审计和解决争议。</p>
<h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2><p>通道和私有数据集合实现了隐私且机密的多边交易，这些交易通常是在共同网络上交换资产的竞争企业和受监管行业所要求的。</p>
<h2 id="安全和成员服务"><a href="#安全和成员服务" class="headerlink" title="安全和成员服务"></a>安全和成员服务</h2><p>通道和私有数据集合实现了隐私且机密的多边交易，这些交易通常是在共同网络上交换资产的竞争企业和受监管行业所要求的。</p>
<h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>达成共识的独特方法可实现企业所需的灵活性和可扩展性。</p>
<h1 id="区块链网络"><a href="#区块链网络" class="headerlink" title="区块链网络"></a>区块链网络</h1><p>这个话题会在<strong>概念层面上</strong>描述 Hyperledger Fabric 是如何让组织间以区块链网络的形式进行合作的。</p>
<h2 id="什么是区块链网络"><a href="#什么是区块链网络" class="headerlink" title="什么是区块链网络"></a>什么是区块链网络</h2><p>区块链网络是一个为应用程序提供账本及<strong>智能合约chaincode</strong>服务的技术基础设施。首先，智能合约被用来生成交易，接下来这些交易会被分发给网络中的每个节点，这些交易会被记录在他们的账本副本上并且是不可篡改的。<br>在大多数的额情况下，多个组织 会聚集到一起作为一个<strong>联盟</strong> 来形成一个网络，并且他们的权限是由一套在网络最初配置的时候联盟成员都同意的规则来决定的。</p>
<h2 id="示例网络-看不懂先跳"><a href="#示例网络-看不懂先跳" class="headerlink" title="示例网络(看不懂先跳)"></a>示例网络(看不懂先跳)</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636296936661.png" alt="enter description here"><br>四个组织 R1、R2、R3 和 R4(三角形)，他们共同决定，并且达成了一个协议，他们将会设置并开发一个 Hyperledger Fabric 网络。<br>R4 被分配作为网络的初始者，它有权设置网络的初始版本。<br>R4 不会在网络中去进行任何的业务交易。<br>R1 和 R2 在整个网络中有进行私有通信的需求，R2 和 R3 也是。<br>组织 R1 有一个客户端的应用能够在通道 C1 中进行业务的交易。<br>组织 R2 有一个客户端应用可以在通道 C1 和 C2 中进行类似的工作。<br>组织 R3 可以在通道 C2 中做这样的工作。<br>节点 P1 维护了 C1 的账本 L1 的副本。<br>节点 P2 维护了 C1 的账本 L1 和 C2 的账本 L2 的副本。<br>节点 P3 维护了 C2 的账本 L2 的副本。<br>这个网络是根据在网络配置(net_config) NC4 中指定的规则来进行管理的，整个网络由组织 R1 和 R4 管理。<br>通道 C1 是根据在通道配置(channle_config) CC1 中指定的规则来管理的，这个通道由组织 R1 和 R2 管理。<br>通道 C2 是根据在 通道配置 CC2 中指定的规则来管理的，这个通道由组织 R2 和 R3 管理。<br>这有一个排序服务 O4 作为这个网络 N 的一个网络管理员节点，并且使用系统通道。<br>排序服务同时也支持应用通道 C1 和 C2，来对交易进行排序、加入区块然后分发。<br>每个组织都有一个首选的 CA(证书授权组件)。</p>
<h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636297732704.png" alt="enter description here"><br>当一个排序服务启动后就形成了这样的一个网络。在示例网络 N 中，排序服务 O4 由一个单独的节点组成，是根据一个网络配置 NC4 来进行配置的。在网络层面上，证书颁发机构 CA4 被用来向管理员和组织 R4 的网络节点分配身份信息。</p>
<hr>
<p>能够看到，在定义 网络 N 的时候，第一件事情就是定义一个 排序服务O4。<br>对于一个网络在最初就考虑以管理员节点的形式定义这个排序服务是非常有帮助的。就像在之前同意的，O4 最初被配置并且由组织 R4 的一个管理员来启动，并且由 R4 管理。<br>配置 NC4 包含了描述网络管理能力初始集合的规则。<br>最初在网络中集合仅赋予了 R4 这个权利。（这个在将来会变化，我们稍后会看到，但是目前 R4 是这个网络中唯一的一个成员。）</p>
<hr>
<p>也能够看到一个证书颁发机构，CA4，它会被用来给管理者和网络节点颁发证书。这个证书能够用来识别属于组织 R4 的组件。由 CA 颁发的证书也可以用来为交易提供签名，来表明一个组织对交易的结果进行背书，背书是一笔交易可以被接受并记录到账本上的前提条件。</p>
<hr>
<p>这有一个资源，网络 N，有一些用户能够访问这个网络，这些用户是由一个证书颁发机构 CA4 定义的，他们具有网络配置 NC4 中包含的规则中所描述的在网络 N 中的权利。当我们配置和启动排序服务节点 O4 的时候上边讲的事情都会发生。</p>
<h2 id="添加网络管理员"><a href="#添加网络管理员" class="headerlink" title="添加网络管理员"></a>添加网络管理员</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636298026632.png" alt="enter description here"><br>在接下来的阶段，我们会允许组织 R1 用户也具有管理的权限。<br>我们看到了新的组织 R1 变成了管理员，R1 和 R4 现在在网络中具有了相同的权限。我们看到证书颁发机构 CA1 也被添加进来了，他用来标识 R1 组织的用户。现在从 R1 和 R4 来的用户就已经是网络的管理员了。</p>
<h2 id="定义联盟"><a href="#定义联盟" class="headerlink" title="定义联盟"></a>定义联盟</h2><p>尽管这个网络当前可以被 R1 和 R4 管理，但是只有这些还是太少了。我们需要做的第一件事就是定义一个联盟。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636298093988.png" alt="enter description here"><br>由于 NC4 的配置方式，只有 R1 和 R4 能够创建新的联盟。这个图标显示了一个新的联盟 X1，它定义了 R1 和 R2 是它的联盟组织。我们也看到了 CA2 也被添加进来标识来自 R2 的用户。<br>这个网络虽然最初仅包含一个组织，现在已经由多个组织来管理了。我们将从 R1、R2 和 R4 共享管控权的方式开始，这样的构成更容易被理解。</p>
<h2 id="为联盟创建通道"><a href="#为联盟创建通道" class="headerlink" title="为联盟创建通道"></a>为联盟创建通道</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636298213191.png" alt="enter description here"><br>使用联盟 X1 为 R1 和 R2 创建的的通道 C1。这个通道通过通道配置 CC1 来进行管理，完全独立于网络配置。<br>CC1 是由 R1 和 R2 管理的，他们在 C1 上具有同等的权利。R4 在 CC1 中是没有任何权利的。<br>尽管 C1 是网络 N 中的一部分，它还是跟这个网络非常不同的。<br>需要注意的是通道 C1 如何具有一个同网络配置 NC4 完全分开的配置 CC1。<br><strong>通道</strong>非常有用，因为提供了一个联盟成员之间进行私有通信和私有数据的机制。通道提供了与其他通道以及整个网络的隐私性。<br>我们也能够看到一旦通道被创建之后，它会真正地代表了“从网络中解放出来”。</p>
<h2 id="节点和账本"><a href="#节点和账本" class="headerlink" title="节点和账本"></a>节点和账本</h2><p>我们的网络 N 又新增了两个组件，称作 Peer 节点 P1 和账本实例 L1。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636298345444.png" alt="enter description here"><br>Peer 节点是存储区块链账本副本的网络组件，是区块链标志性的组件。P1 在这个网络中的目的是单纯地放置被其他人访问的账本 L1 的副本。我们可以想象 L1 会被<strong>物理地</strong>存储在 P1 上，但是 <strong>逻辑上</strong> 是存储在通道 C1 上。当我们向通道中添加更多的节点之后，我们对这些就会更加清楚。<br>P1 的配置中一个关键部分就是一个由 CA1 颁发的 X.509 身份信息，它将 P1 和组织 R1 关联了起来。<br>当 P1 启动之后，它就可以使用排序 O4 加入通道C1。当 O4 收到这个加入请求，它会使用通道配置 CC1 来决定 P1 在这个通道中的权限。比如，CC1 决定 P1 是否能够向账本 L1 中读取或写入信息。</p>
<h2 id="应用程序和智能合约链码（难点）"><a href="#应用程序和智能合约链码（难点）" class="headerlink" title="应用程序和智能合约链码（难点）"></a>应用程序和智能合约链码（难点）</h2><p><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636300627251.png" alt="enter description here"><br>智能合约 S5 被安装在了 P1 上。在组织 R1 中的客户端应用 A1 可以通过 Peer 节点 P1 使用 S5 来访问账本。<br>A1、P1 和 O4 都加入了通道 C1，他们都可以使用由这个通道提供的通信设施。<br>在网络开发的下一个阶段，我们可以看到客户端应用 A1 能够使用通道 C1 来连接指定的网络资源，<br>在我们的例子中，客户端应用 A1 是跟组织 R1 相关联的，尽管它处在 Fabric 区块链网络的外边，但它是可以通过通道 C1 跟网络相连的。<br>现在我们能够清楚地看到 A1 能够通过 P1 直接访问账本 L1，<strong>但是事实上，所有的访问都是由一个称为智能合约链码 S5 的特殊程序来管理的。</strong></p>
<h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><p>智能合约可以被每个组织的应用开发者创建来实现一个在联盟成员间共享的业务流程。智能合约被用来帮助生成被分发到网络中每个节点的交易。需要对智能合约执行两项操作，它必须<strong>被安装</strong>，然后在通道中<strong>被定义</strong>。<br>Hyperledger Fabric 用户经常会在内部使用名词智能合约和链码。大体上来说，一个智能合约定义了交易逻辑，它控制了在世界状态中包含的一个业务对象的生命周期。<br>然后它会被打包进一个链码中，这个链码会被部署到一个区块链网络中。<br><strong>可以把智能合约想象为管理交易，链码则管理着智能合约应该如何被打包部署。</strong></p>
<h3 id="安装链码包"><a href="#安装链码包" class="headerlink" title="安装链码包"></a>安装链码包</h3><p>在智能合约 S5 被开发完之后，组织 R1 中的管理员必须要把它安装到节点 P1 上。这是一个很简单的操作。当完成之后，P1 就完全“了解”了 S5。特别地，P1 能够看到 S5 的实现逻辑（用来访问账本 L1 的程序代码）。<br>当一个组织在一个通道中有多个 Peer 节点时，可以选择在哪个节点安装智能合约，而不需要每个 Peer 节点上都安装。</p>
<h3 id="定义链码"><a href="#定义链码" class="headerlink" title="定义链码"></a>定义链码</h3><p>尽管链码会被安装在组织的 Peer 节点上，但是它是在一个通道范围内被管理和维护的。所以每个组织需要批准一个链码定义，和一系列参数来定义在一个通道中链码应该被如何使用。一个组织必须要批准一个链码定义，才能使用已经安装的智能合约来查询账本和为<strong>交易背书</strong>。在我们的例子中，只有一个单独的 Peer 节点 P1，一个组织中的管理员 R1 必须要批准 S5 的链码定义。<br>在链码定义能够被提交到通道并且用来同通道账本进行互动之前，<br>需要有效数量的组织来批准一个链码的定义（默认为大多数）。<br>因为通道中只有一个成员，R1 的管理员可以提交 S5 的链码定义到通道 C1。当这个定义提交后，S5 就可以被客户端应用 A1 调用了！<br>注意，虽然在这个通道上的每个组件现在都可以访问 S5，但是他们是不能够看到它的程序逻辑的。这对于安装了这个智能合约的节点还是保持隐私性的，在我们的示例中指的是 P1。</p>
<h3 id="背书策略"><a href="#背书策略" class="headerlink" title="背书策略"></a>背书策略</h3><p>在链码定义提供的信息中最重要的部分就是背书策略。<strong>它描述了在交易被其他的组织接受并存储在他们的账本副本上之前，哪些组织必须要同意此交易</strong><br>在我们的示例网络中，只有当 R1 和 R2 对交易进行背书之后，交易才能够被接受并存储到账本 L1 中。</p>
<h3 id="调用智能合约"><a href="#调用智能合约" class="headerlink" title="调用智能合约"></a>调用智能合约</h3><p>当智能合约被安装在 Peer 节点并且在通道上定义之后，它就可以被客户端应用调用了。客户端应用是通过发送交易提案给智能合约背书策略所指定的 Peer 的节点方式来调用智能合约的。这个交易的提案会作为智能合约的输入，智能合约会使用它来生成一个背书交易响应，这会由 Peer 节点返回给客户端应用。<br>这些交易的响应会和交易的提案打包到一起形成一个完整的经过背书的交易，他们会被分发到整个网络。</p>
<h2 id="完成网络"><a href="#完成网络" class="headerlink" title="完成网络"></a>完成网络</h2><p>我们的目标是为联盟 X1（由组织 R1 和 R2 构成）创建一个通道。网络开发的下一个阶段是将组织 R2 的基础设施添加到网络中。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301374421.png" alt="enter description here"><br>我们能够看到组织 R2 在通道 C1 上添加了 Peer 节点 P2。P2 也存储了账本 L1 和智能合约 S5 的副本。<br>R2 也添加了客户端应用 A2，它能够通过通道 C1 连接到网络。<br>目前这是一个可运行的网络！我们定义了一个通道，在这个通道中组织 R1 和 R2 能够彼此进行交易。这意味着 A1 和 A2 能够使用在通道 C1 上的智能合约 S5 和账本 L1 来生成交易。</p>
<h3 id="生成并接受交易"><a href="#生成并接受交易" class="headerlink" title="生成并接受交易"></a>生成并接受交易</h3><p>相较于经常会存有账本副本的 Peer 节点，我们能够看到两种类型的 Peer 节点，一类是存储智能合约而另一类则不存。在我们的网络中，每个 Peer 节点都会存储智能合约的副本，但是在一个更大的网络中，会存在更多的 Peer 节点并且没有存储智能合约的副本。<br>对于没有安装智能合约的 Peer 节点，我们不应该认为他们在某种程度上是较差的。更多情况下，带有智能合约的 Peer 节点通常会拥有一个特殊的能力——帮助<strong>生成</strong>交易。+需要注意的是所有的 Peer 节点都可以<strong>验证</strong>并<strong>接受</strong>或者<strong>拒绝</strong>交易存入他们的账本 L1 的副本中。然而，只有安装了智能合约的 Peer 节点才能够参与交易<strong>背书</strong>的流程，这是生成一笔有效交易的核心。</p>
<h3 id="Peer-节点的类型"><a href="#Peer-节点的类型" class="headerlink" title="Peer 节点的类型"></a>Peer 节点的类型</h3><p>在 Hyperledger Fabric 中，所有的 Peer 节点都是一样的，基于这个网络的配置，Peer 节点能够担当多个角色。</p>
<ul>
<li><strong>提交节点</strong>通道中的每个 Peer 节点都是一个提交节点。他们会接收生成的区块，在这些区块被验证之后会以附加的方式提交到 Peer 节点的账本副本中。</li>
<li><strong>背书节点</strong>每个安装了智能合约的 Peer 节点都可以作为一个背书节点。然而，想要成为一个真正的背书节点，节点上的智能合约必须要被客户端应用使用，来生成一个被签名的交易响应。(背书节点的术语就是这样来的)<br>这是 Peer 节点的两个主要类型，一个 Peer 节点还可以担任的两种其他的角色:</li>
<li><strong>主节点</strong>当组织在通道中具有多个 Peer 节点的时候，会有一个主节点，它负责将交易从排序节点分发到该组织中其他的提交节点。一个节点可以选择参与静态或者动态的领导选举。<br>  (这是很有用的，从管理者的角度来考虑的话会有两套节点，一套是静态选择的主节点，另一套是动态选举的主节点。对于静态选择，0个或者多个节点可以被配置为主节点。对于动态选举，一个节点会被选举成为主节点。另外，在动态选举主节点中，如果一个主节点出错了，那么剩下的节点将会重新选举一个主节点。)</li>
<li>  <strong>锚节点</strong>如果一个 Peer 节点需要同另一个组织的 Peer 节点通信的话，它可以使用对方组织通道配置中定义的锚节点。一个组织可以拥有0个或者多个锚节点，并且一个锚节点能够帮助很多不同的<strong>跨组织间</strong>的通信。<h3 id="向通道中添加组织和节点"><a href="#向通道中添加组织和节点" class="headerlink" title="向通道中添加组织和节点"></a>向通道中添加组织和节点</h3><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301374421.png" alt="enter description here"><br>当 R2 加入到通道的时候，组织必须要向它的 Peer 节点 P2 上安装智能合约 S5。现在，Peer 节点 P2 有了智能合约和账本的物理的副本，像 P1 一样，它可以生成并接受交易到它的账本 L1 的副本上了。<br>R2 必须要像 R1 那样批准相同的链码定义才能够使用智能合约 S5。因为链码定义已经被组织 R1 提交到了通道，当 R2 的组织批准了链码定义并且安装了链码包之后，R2 就可以使用链码了。提交的交易只需要发生一次。通道中新的组织批准了通道中其他成员已经同意的链码参数之后就可以使用链码了。因为链码定义的批准是发生在组织级别的，所以 R2 只需要批准链码定义一次，然后就可以将多个节点加入到安装了链码包的通道。”然而，如果 R2 想改变链码的定义，那么 R1 和 R2 需要为他们的组织批准一个新的定义，然后其中的一个组织需要将定义提交到通道。”<br>(在我们的网路中，我们能够看到通道 C1 连接了两个客户端应用、两个 Peer 节点和一个排序服务。因为这里只有一个通道，也就只有一个跟这个通道组件交互的逻辑账本。Peer 节点 P1 和 P2 具有相同的账本 L1 的副本。智能合约 S5 的副本通常会使用相同的编程语言来进行相同的实现，如果语言不同，他们也必须有相同的语义。)<h2 id="简化视觉词汇表"><a href="#简化视觉词汇表" class="headerlink" title="简化视觉词汇表"></a>简化视觉词汇表</h2>随着网络的增长，之前帮助我们理解通道的连线将会变得越发笨拙。<br><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301430452.png" alt="enter description here"><h2 id="添加另外一个联盟定义-略"><a href="#添加另外一个联盟定义-略" class="headerlink" title="添加另外一个联盟定义(略)"></a>添加另外一个联盟定义(略)</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301437594.png" alt="enter description here"><h2 id="添加一个新的通道-略"><a href="#添加一个新的通道-略" class="headerlink" title="添加一个新的通道(略)"></a>添加一个新的通道(略)</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301457948.png" alt="enter description here"><h2 id="添加另外一个Peer节点-略"><a href="#添加另外一个Peer节点-略" class="headerlink" title="添加另外一个Peer节点(略)"></a>添加另外一个Peer节点(略)</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301467041.png" alt="enter description here"><h2 id="把一个Peer节点添加到多个通道中-略"><a href="#把一个Peer节点添加到多个通道中-略" class="headerlink" title="把一个Peer节点添加到多个通道中(略)"></a>把一个Peer节点添加到多个通道中(略)</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301480348.png" alt="enter description here"><h2 id="网路已经完全形成了"><a href="#网路已经完全形成了" class="headerlink" title="网路已经完全形成了"></a>网路已经完全形成了</h2><img src="https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1636301494710.png" alt="enter description here"><h2 id="网络总结"><a href="#网络总结" class="headerlink" title="网络总结"></a>网络总结</h2>略<h3 id="网络组件的总结"><a href="#网络组件的总结" class="headerlink" title="网络组件的总结"></a>网络组件的总结</h3>下边是我们讨论过的网络组件的一个快速总结：</li>
<li>账本。每个通道一个。由 区块链 和 World state 组成 </li>
<li>智能合约 (或者叫链码) </li>
<li>Peer 节点 </li>
<li>排序服务 </li>
<li>Channel </li>
<li>证书颁发机构CA</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链杂项</title>
    <url>/2021/11/28/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE/%E5%90%8E%E9%9D%A2/</url>
    <content><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1622422">Fabric应用开发</a></p>
<p><a href="https://blog.csdn.net/qq_40185499/article/details/104023543">基于Fabric的简单Web应用</a></p>
<p><a href="https://www.jianshu.com/p/64281ff8de13">fabric基本概念</a></p>
<p><a href="https://blog.csdn.net/qq_40657814/article/details/90447259">基于Hyperledger Fabric的官方例子e2e构建一个简单的web应用</a></p>
<p><a href="https://www.xuanzhangjiong.top/2019/04/16/%E5%88%A9%E7%94%A8Hyperledger-Fabric%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BA%94%E7%94%A8/#%E8%AE%BE%E7%BD%AE%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C">利用Hyperledger Fabric开发你的第一个区块链应用</a><br><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/write_first_app.html#id2">对应官方</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>**dyingjin@ubuntu**:**~/Desktop/fabric-samples/test-network**$ sudo -i</span><br><span class="line">[sudo] password for dyingjin: </span><br><span class="line">root@ubuntu:~# cd /</span><br><span class="line">root@ubuntu:/# cd home/dyingjin/Desktop/fabric-samples/test-network</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# ./network.sh up createChannel</span><br><span class="line">Creating channel &#x27;mychannel&#x27;.</span><br><span class="line">If network is not up, starting nodes with CLI timeout of &#x27;5&#x27; tries and CLI delay of &#x27;3&#x27; seconds and using database &#x27;leveldb with crypto from &#x27;cryptogen&#x27;</span><br><span class="line">Bringing up network</span><br><span class="line">LOCAL_VERSION=2.3.3</span><br><span class="line">DOCKER_IMAGE_VERSION=2.3.3</span><br><span class="line">/home/dyingjin/Desktop/fabric-samples/test-network/../bin/cryptogen</span><br><span class="line">Generating certificates using cryptogen tool</span><br><span class="line">Creating Org1 Identities</span><br><span class="line">+ cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=organizations</span><br><span class="line">org1.example.com</span><br><span class="line">+ res=0</span><br><span class="line">Creating Org2 Identities</span><br><span class="line">+ cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output=organizations</span><br><span class="line">org2.example.com</span><br><span class="line">+ res=0</span><br><span class="line">Creating Orderer Org Identities</span><br><span class="line">+ cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=organizations</span><br><span class="line">+ res=0</span><br><span class="line">Generating CCP files for Org1 and Org2</span><br><span class="line">Creating network &quot;fabric_test&quot; with the default driver</span><br><span class="line">Creating volume &quot;docker_orderer.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;docker_peer0.org1.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;docker_peer0.org2.example.com&quot; with default driver</span><br><span class="line">Creating peer0.org2.example.com ... done</span><br><span class="line">Creating peer0.org1.example.com ... done</span><br><span class="line">Creating orderer.example.com    ... done</span><br><span class="line">Creating cli                    ... done</span><br><span class="line">CONTAINER ID   IMAGE                               COMMAND             CREATED         STATUS                  PORTS                                                                                                                                 NAMES</span><br><span class="line">0fe7892c3748   hyperledger/fabric-tools:latest     &quot;/bin/bash&quot;         1 second ago    Up Less than a second                                                                                                                                         cli</span><br><span class="line">83bde93c006c   hyperledger/fabric-orderer:latest   &quot;orderer&quot;           2 seconds ago   Up Less than a second   0.0.0.0:7050-&gt;7050/tcp, :::7050-&gt;7050/tcp, 0.0.0.0:7053-&gt;7053/tcp, :::7053-&gt;7053/tcp, 0.0.0.0:17050-&gt;17050/tcp, :::17050-&gt;17050/tcp   orderer.example.com</span><br><span class="line">016ba2f4c79a   hyperledger/fabric-peer:latest      &quot;peer node start&quot;   3 seconds ago   Up Less than a second   0.0.0.0:9051-&gt;9051/tcp, :::9051-&gt;9051/tcp, 7051/tcp, 0.0.0.0:19051-&gt;19051/tcp, :::19051-&gt;19051/tcp                                    peer0.org2.example.com</span><br><span class="line">2d10a48b4833   hyperledger/fabric-peer:latest      &quot;peer node start&quot;   3 seconds ago   Up Less than a second   0.0.0.0:7051-&gt;7051/tcp, :::7051-&gt;7051/tcp, 0.0.0.0:17051-&gt;17051/tcp, :::17051-&gt;17051/tcp                                              peer0.org1.example.com</span><br><span class="line">Generating channel genesis block &#x27;mychannel.block&#x27;</span><br><span class="line">/home/dyingjin/Desktop/fabric-samples/test-network/../bin/configtxgen</span><br><span class="line">+ configtxgen -profile TwoOrgsApplicationGenesis -outputBlock ./channel-artifacts/mychannel.block -channelID mychannel</span><br><span class="line">2021-11-29 21:24:09.077 PST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2021-11-29 21:24:09.083 PST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft</span><br><span class="line">2021-11-29 21:24:09.083 PST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216 </span><br><span class="line">2021-11-29 21:24:09.083 PST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /home/dyingjin/Desktop/fabric-samples/test-network/configtx/configtx.yaml</span><br><span class="line">2021-11-29 21:24:09.085 PST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block</span><br><span class="line">2021-11-29 21:24:09.086 PST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Creating application channel genesis block</span><br><span class="line">2021-11-29 21:24:09.086 PST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br><span class="line">+ res=0</span><br><span class="line">Creating channel mychannel</span><br><span class="line">Using organization 1</span><br><span class="line">+ osnadmin channel join --channelID mychannel --config-block ./channel-artifacts/mychannel.block -o localhost:7053 --ca-file /home/dyingjin/Desktop/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --client-cert /home/dyingjin/Desktop/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt --client-key /home/dyingjin/Desktop/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key</span><br><span class="line">+ res=0</span><br><span class="line">Status: 201</span><br><span class="line">&#123;</span><br><span class="line">	&quot;name&quot;: &quot;mychannel&quot;,</span><br><span class="line">	&quot;url&quot;: &quot;/participation/v1/channels/mychannel&quot;,</span><br><span class="line">	&quot;consensusRelation&quot;: &quot;consenter&quot;,</span><br><span class="line">	&quot;status&quot;: &quot;active&quot;,</span><br><span class="line">	&quot;height&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Channel &#x27;mychannel&#x27; created</span><br><span class="line">Joining org1 peer to the channel...</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:24:15.240 PST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2021-11-29 21:24:15.262 PST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">Joining org2 peer to the channel...</span><br><span class="line">Using organization 2</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:24:18.329 PST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2021-11-29 21:24:18.350 PST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">Setting anchor peer for org1...</span><br><span class="line">Using organization 1</span><br><span class="line">Fetching channel config for channel mychannel</span><br><span class="line">Using organization 1</span><br><span class="line">Fetching the most recent configuration block for the channel</span><br><span class="line">+ peer channel fetch config config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c mychannel --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">2021-11-30 05:24:18.565 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2021-11-30 05:24:18.573 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2021-11-30 05:24:18.573 UTC [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2021-11-30 05:24:18.577 UTC [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br><span class="line">Decoding config block to JSON and isolating config to Org1MSPconfig.json</span><br><span class="line">+ configtxlator proto_decode --input config_block.pb --type common.Block</span><br><span class="line">+ jq &#x27;.data.data[0].payload.data.config&#x27;</span><br><span class="line">+ jq &#x27;.channel_group.groups.Application.groups.Org1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org1.example.com&quot;,&quot;port&quot;: 7051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; Org1MSPconfig.json</span><br><span class="line">Generating anchor peer update transaction for Org1 on channel mychannel</span><br><span class="line">+ configtxlator proto_encode --input Org1MSPconfig.json --type common.Config</span><br><span class="line">+ configtxlator proto_encode --input Org1MSPmodified_config.json --type common.Config</span><br><span class="line">+ configtxlator compute_update --channel_id mychannel --original original_config.pb --updated modified_config.pb</span><br><span class="line">+ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate</span><br><span class="line">+ jq .</span><br><span class="line">++ cat config_update.json</span><br><span class="line">+ echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;mychannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#123;&#x27; &#x27;&quot;channel_id&quot;:&#x27; &#x27;&quot;mychannel&quot;,&#x27; &#x27;&quot;isolated_data&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;read_set&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Application&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Org1MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Admins&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Endorsement&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Readers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Writers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;value&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;write_set&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Application&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Org1MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;Admins&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Admins&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Endorsement&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Readers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Writers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;AnchorPeers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;Admins&quot;,&#x27; &#x27;&quot;value&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;anchor_peers&quot;:&#x27; &#x27;[&#x27; &#x27;&#123;&#x27; &#x27;&quot;host&quot;:&#x27; &#x27;&quot;peer0.org1.example.com&quot;,&#x27; &#x27;&quot;port&quot;:&#x27; 7051 &#x27;&#125;&#x27; &#x27;]&#x27; &#x27;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;value&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;1&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;&#125;&#125;&#125;&#x27;</span><br><span class="line">+ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope</span><br><span class="line">2021-11-30 05:24:18.826 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2021-11-30 05:24:18.840 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br><span class="line">Anchor peer set for org &#x27;Org1MSP&#x27; on channel &#x27;mychannel&#x27;</span><br><span class="line">Setting anchor peer for org2...</span><br><span class="line">Using organization 2</span><br><span class="line">Fetching channel config for channel mychannel</span><br><span class="line">Using organization 2</span><br><span class="line">+ peer channel fetch config Fetching the most recent configuration block for the channel</span><br><span class="line">config_block.pb -o orderer.example.com:7050 --ordererTLSHostnameOverride orderer.example.com -c mychannel --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">2021-11-30 05:24:19.048 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2021-11-30 05:24:19.054 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 1</span><br><span class="line">2021-11-30 05:24:19.055 UTC [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 1</span><br><span class="line">2021-11-30 05:24:19.057 UTC [cli.common] readBlock -&gt; INFO 004 Received block: 1</span><br><span class="line">Decoding config block to JSON and isolating config to Org2MSPconfig.json</span><br><span class="line">+ configtxlator proto_decode --input config_block.pb --type common.Block</span><br><span class="line">+ jq &#x27;.data.data[0].payload.data.config&#x27;</span><br><span class="line">Generating anchor peer update transaction for Org2 on channel mychannel</span><br><span class="line">+ jq &#x27;.channel_group.groups.Application.groups.Org2MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org2.example.com&quot;,&quot;port&quot;: 9051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; Org2MSPconfig.json</span><br><span class="line">+ configtxlator proto_encode --input Org2MSPconfig.json --type common.Config</span><br><span class="line">+ configtxlator proto_encode --input Org2MSPmodified_config.json --type common.Config</span><br><span class="line">+ configtxlator compute_update --channel_id mychannel --original original_config.pb --updated modified_config.pb</span><br><span class="line">+ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate</span><br><span class="line">+ jq .</span><br><span class="line">++ cat config_update.json</span><br><span class="line">+ echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;mychannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#123;&#x27; &#x27;&quot;channel_id&quot;:&#x27; &#x27;&quot;mychannel&quot;,&#x27; &#x27;&quot;isolated_data&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;read_set&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Application&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Org2MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Admins&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Endorsement&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Readers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Writers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;value&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;write_set&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Application&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Org2MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;groups&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;Admins&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;Admins&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Endorsement&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Readers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;Writers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policy&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;AnchorPeers&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;Admins&quot;,&#x27; &#x27;&quot;value&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;anchor_peers&quot;:&#x27; &#x27;[&#x27; &#x27;&#123;&#x27; &#x27;&quot;host&quot;:&#x27; &#x27;&quot;peer0.org2.example.com&quot;,&#x27; &#x27;&quot;port&quot;:&#x27; 9051 &#x27;&#125;&#x27; &#x27;]&#x27; &#x27;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;MSP&quot;:&#x27; &#x27;&#123;&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;value&quot;:&#x27; null, &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;1&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;,&#x27; &#x27;&quot;mod_policy&quot;:&#x27; &#x27;&quot;&quot;,&#x27; &#x27;&quot;policies&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;values&quot;:&#x27; &#x27;&#123;&#125;,&#x27; &#x27;&quot;version&quot;:&#x27; &#x27;&quot;0&quot;&#x27; &#x27;&#125;&#x27; &#x27;&#125;&#125;&#125;&#125;&#x27;</span><br><span class="line">+ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope</span><br><span class="line">2021-11-30 05:24:19.311 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2021-11-30 05:24:19.326 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br><span class="line">Anchor peer set for org &#x27;Org2MSP&#x27; on channel &#x27;mychannel&#x27;</span><br><span class="line">Channel &#x27;mychannel&#x27; joined</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# ./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go</span><br><span class="line">deploying chaincode on channel &#x27;mychannel&#x27;</span><br><span class="line">executing with the following</span><br><span class="line">- CHANNEL_NAME: mychannel</span><br><span class="line">- CC_NAME: basic</span><br><span class="line">- CC_SRC_PATH: ../asset-transfer-basic/chaincode-go</span><br><span class="line">- CC_SRC_LANGUAGE: go</span><br><span class="line">- CC_VERSION: 1.0</span><br><span class="line">- CC_SEQUENCE: 1</span><br><span class="line">- CC_END_POLICY: NA</span><br><span class="line">- CC_COLL_CONFIG: NA</span><br><span class="line">- CC_INIT_FCN: NA</span><br><span class="line">- DELAY: 3</span><br><span class="line">- MAX_RETRY: 5</span><br><span class="line">- VERBOSE: false</span><br><span class="line">Vendoring Go dependencies at ../asset-transfer-basic/chaincode-go</span><br><span class="line">/home/dyingjin/Desktop/fabric-samples/asset-transfer-basic/chaincode-go /home/dyingjin/Desktop/fabric-samples/test-network</span><br><span class="line">/home/dyingjin/Desktop/fabric-samples/test-network</span><br><span class="line">Finished vendoring Go dependencies</span><br><span class="line">+ peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-go --lang golang --label basic_1.0</span><br><span class="line">+ res=0</span><br><span class="line">Chaincode is packaged</span><br><span class="line">Installing chaincode on peer0.org1...</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer lifecycle chaincode install basic.tar.gz</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:24:40.273 PST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:<span class="tag">&lt;<span class="name">status:200</span> <span class="attr">payload:</span>&quot;\<span class="attr">nJbasic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e</span>\<span class="attr">022</span>\<span class="attr">tbasic_1.0</span>&quot; &gt;</span> </span><br><span class="line">2021-11-29 21:24:40.273 PST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e</span><br><span class="line">Chaincode is installed on peer0.org1</span><br><span class="line">Install chaincode on peer0.org2...</span><br><span class="line">Using organization 2</span><br><span class="line">+ peer lifecycle chaincode install basic.tar.gz</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:24:55.571 PST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:<span class="tag">&lt;<span class="name">status:200</span> <span class="attr">payload:</span>&quot;\<span class="attr">nJbasic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e</span>\<span class="attr">022</span>\<span class="attr">tbasic_1.0</span>&quot; &gt;</span> </span><br><span class="line">2021-11-29 21:24:55.571 PST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e</span><br><span class="line">Chaincode is installed on peer0.org2</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer lifecycle chaincode queryinstalled</span><br><span class="line">+ res=0</span><br><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e, Label: basic_1.0</span><br><span class="line">Query installed successful on peer0.org1 on channel</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile /home/dyingjin/Desktop/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name basic --version 1.0 --package-id basic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e --sequence 1</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:24:57.729 PST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [00e5c20e20f9c0aac1a15c0b0077f6222617a3316b233bcd6228a85f32140102] committed with status (VALID) at localhost:7051</span><br><span class="line">Chaincode definition approved on peer0.org1 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 1</span><br><span class="line">Checking the commit readiness of the chaincode definition on peer0.org1 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --sequence 1 --output json</span><br><span class="line">+ res=0</span><br><span class="line">&#123;</span><br><span class="line">	&quot;approvals&quot;: &#123;</span><br><span class="line">		&quot;Org1MSP&quot;: true,</span><br><span class="line">		&quot;Org2MSP&quot;: false</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Checking the commit readiness of the chaincode definition successful on peer0.org1 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 2</span><br><span class="line">Checking the commit readiness of the chaincode definition on peer0.org2 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to check the commit readiness of the chaincode definition on peer0.org2, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --sequence 1 --output json</span><br><span class="line">+ res=0</span><br><span class="line">&#123;</span><br><span class="line">	&quot;approvals&quot;: &#123;</span><br><span class="line">		&quot;Org1MSP&quot;: true,</span><br><span class="line">		&quot;Org2MSP&quot;: false</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Checking the commit readiness of the chaincode definition successful on peer0.org2 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 2</span><br><span class="line">+ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile /home/dyingjin/Desktop/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name basic --version 1.0 --package-id basic_1.0:c3fff99b8effbccb6749ab2dddd573adac22e7c0b5cae3e659732df710d1815e --sequence 1</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:25:05.967 PST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [2a12e0d4680ab3d7bc370464af51d98dce75706d47968496e13ba168035fe61b] committed with status (VALID) at localhost:9051</span><br><span class="line">Chaincode definition approved on peer0.org2 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 1</span><br><span class="line">Checking the commit readiness of the chaincode definition on peer0.org1 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to check the commit readiness of the chaincode definition on peer0.org1, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --sequence 1 --output json</span><br><span class="line">+ res=0</span><br><span class="line">&#123;</span><br><span class="line">	&quot;approvals&quot;: &#123;</span><br><span class="line">		&quot;Org1MSP&quot;: true,</span><br><span class="line">		&quot;Org2MSP&quot;: true</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Checking the commit readiness of the chaincode definition successful on peer0.org1 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 2</span><br><span class="line">Checking the commit readiness of the chaincode definition on peer0.org2 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to check the commit readiness of the chaincode definition on peer0.org2, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --sequence 1 --output json</span><br><span class="line">+ res=0</span><br><span class="line">&#123;</span><br><span class="line">	&quot;approvals&quot;: &#123;</span><br><span class="line">		&quot;Org1MSP&quot;: true,</span><br><span class="line">		&quot;Org2MSP&quot;: true</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Checking the commit readiness of the chaincode definition successful on peer0.org2 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 1</span><br><span class="line">Using organization 2</span><br><span class="line">+ peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile /home/dyingjin/Desktop/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name basic --peerAddresses localhost:7051 --tlsRootCertFiles /home/dyingjin/Desktop/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles /home/dyingjin/Desktop/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --version 1.0 --sequence 1</span><br><span class="line">+ res=0</span><br><span class="line">2021-11-29 21:25:14.497 PST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [52ab43fdce51efbf03f66a3bfa441566802339f03a18da30332b80bd80344fab] committed with status (VALID) at localhost:9051</span><br><span class="line">2021-11-29 21:25:14.560 PST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [52ab43fdce51efbf03f66a3bfa441566802339f03a18da30332b80bd80344fab] committed with status (VALID) at localhost:7051</span><br><span class="line">Chaincode definition committed on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 1</span><br><span class="line">Querying chaincode definition on peer0.org1 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to Query committed status on peer0.org1, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode querycommitted --channelID mychannel --name basic</span><br><span class="line">+ res=0</span><br><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;mychannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br><span class="line">Query chaincode definition successful on peer0.org1 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 2</span><br><span class="line">Querying chaincode definition on peer0.org2 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to Query committed status on peer0.org2, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode querycommitted --channelID mychannel --name basic</span><br><span class="line">+ res=0</span><br><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;mychannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br><span class="line">Query chaincode definition successful on peer0.org2 on channel &#x27;mychannel&#x27;</span><br><span class="line">Chaincode initialization is not required</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_ADDRESS=localhost:7051</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br><span class="line">2021-11-29 21:25:48.618 PST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 </span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# peer chaincode query -C mychannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br><span class="line">[&#123;&quot;AppraisedValue&quot;:300,&quot;Color&quot;:&quot;blue&quot;,&quot;ID&quot;:&quot;asset1&quot;,&quot;Owner&quot;:&quot;Tomoko&quot;,&quot;Size&quot;:5&#125;,&#123;&quot;AppraisedValue&quot;:400,&quot;Color&quot;:&quot;red&quot;,&quot;ID&quot;:&quot;asset2&quot;,&quot;Owner&quot;:&quot;Brad&quot;,&quot;Size&quot;:5&#125;,&#123;&quot;AppraisedValue&quot;:500,&quot;Color&quot;:&quot;green&quot;,&quot;ID&quot;:&quot;asset3&quot;,&quot;Owner&quot;:&quot;Jin Soo&quot;,&quot;Size&quot;:10&#125;,&#123;&quot;AppraisedValue&quot;:600,&quot;Color&quot;:&quot;yellow&quot;,&quot;ID&quot;:&quot;asset4&quot;,&quot;Owner&quot;:&quot;Max&quot;,&quot;Size&quot;:10&#125;,&#123;&quot;AppraisedValue&quot;:700,&quot;Color&quot;:&quot;black&quot;,&quot;ID&quot;:&quot;asset5&quot;,&quot;Owner&quot;:&quot;Adriana&quot;,&quot;Size&quot;:15&#125;,&#123;&quot;AppraisedValue&quot;:800,&quot;Color&quot;:&quot;white&quot;,&quot;ID&quot;:&quot;asset6&quot;,&quot;Owner&quot;:&quot;Michel&quot;,&quot;Size&quot;:15&#125;]</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#x27;</span><br><span class="line">2021-11-29 21:26:06.688 PST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 </span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# export CORE_PEER_ADDRESS=localhost:9051</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# peer chaincode query -C mychannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;ReadAsset&quot;,&quot;asset6&quot;]&#125;&#x27;</span><br><span class="line">&#123;&quot;AppraisedValue&quot;:800,&quot;Color&quot;:&quot;white&quot;,&quot;ID&quot;:&quot;asset6&quot;,&quot;Owner&quot;:&quot;Christopher&quot;,&quot;Size&quot;:15&#125;</span><br><span class="line">root@ubuntu:/home/dyingjin/Desktop/fabric-samples/test-network# </span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>ITN 1-3</title>
    <url>/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/</url>
    <content><![CDATA[<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><ul>
<li>  <strong>网络接口卡 (NIC)</strong>- 将设备物理连接到网络。</li>
<li>  <strong>物理端口</strong> - 网络设备上的接口或插口，介质通过它连接到终端设备或其他网络设备。</li>
<li>  <strong>接口</strong>- 网络设备上连接到独立网络的专用端口。由于路由器连接了不同的网络，路由器上的端口称为网络接口。</li>
<li><strong>LAN（局域网）</strong>- 是覆盖较小地理区域的网络基础设施。局域网具有如下特点:<br>  LAN 在有限区域（如家庭、学校、办公大楼或园区）内互连终端设备。<br>  LAN 通常由一个组织或个人管理。实行网络级管控、安全控制并制定访问控制策略。<br>  LAN 为内部终端设备和中间设备提供高速带宽。</li>
<li><strong>WAN（广域网）</strong>- 是覆盖广泛地理区域的网络基础设施。WAN 通常由服务提供商 (SP) 或互联网服务提供商 (ISP) 管理。WAN 具有如下特点:<br>  WAN 互连广泛地理区域（例如各大城市、州、省、国家/地区或大陆之间）内的 LAN。<br>  WAN 通常由多个服务提供商管理。<br>  WAN 通常提供 LAN 之间的较慢链路。</li>
<li> <strong>互联网</strong>-是一个遍及全球的互相连接的网络（简称互联网络或互联网）的集合。将互联网看作互连的 LAN 和 WAN 集合。</li>
<li> <strong>内部网</strong>-用于表示一个组织的私有局域网和广域网连接。内部网的设计旨在仅允许该组织的成员、员工或其他获得授权的人员进行访问。</li>
<li> <strong>外联网</strong>-为在其他组织工作，但需要本组织数据的人提供安全访问。</li>
<li> <strong>ISP（互联网服务提供商）</strong>-互联网服务提供商，即向广大用户综合提供互联网接入业务、信息业务、和增值业务的电信运营商。（电信移动联通）</li>
<li> <strong>病毒、蠕虫和特洛伊木马</strong> - 这些包括在用户设备上运行的恶意软件或代码。<strong>间谍软件和广告软件</strong> -这些是安装在用户设备上的软件类型。这些软件会秘密收集有关用户的信息。<strong>零日攻击（也称零小时攻击）</strong> - 在出现漏洞的第一天发起的攻击。<strong>威胁发起者攻击</strong> -恶意人员攻击用户设备或网络资源。<strong>拒绝服务攻击DoS</strong> - 使网络设备上的应用和进程减缓或崩溃的攻击。<strong>数据拦截和盗窃</strong> - 通过公司网络捕获私人信息的攻击。<strong>身份盗窃</strong> - 窃取用户的登录凭证来访问私人数据的攻击。</li>
<li> <strong>访问控制列表 (ACL)</strong>-基于IP地址和应用程序，进一步过滤访问和流量转发。</li>
<li> <strong>入侵防御系统 (IPS)</strong>- 识别快速扩散的威胁，例如零日攻击或零小时攻击。</li>
<li> <strong>虚拟专用网络 (VPN)</strong>- 为远程工作人员提供对组织机构的安全访问。</li>
<li> <strong>命令行界面 (CLI) 图形用户界面 (GUI)</strong>-</li>
<li> <strong>控制台 (Console)</strong>-这是一种物理管理端口，可通过该端口对思科设备进行带外访问。控制台连接需要运行终端仿真软件的计算机和用于连接设备的特殊控制台电缆。</li>
<li> <strong>带外访问</strong>-是指通过仅用于设备维护的专用管理通道进行访问。使用控制台端口的优势在于，即使没有配置任何网络服务，也可以访问设备，例如执行初始配置时。</li>
<li> <strong>安全外壳(SSH)</strong>-SSH 是一种带内且被推荐的方法，它使用虚拟接口通过网络远程建立安全的 CLI连接。不同于控制台连接，SSH 连接需要设备上具有有效的网络服务，包括配置了地址的有效接口。</li>
<li> <strong>Telnet    Telnet</strong>-使用虚拟接口通过网络远程建立 CLI 会话，这种带内方法并不安全。与 SSH 不同，Telnet 不提供安全的加密连接，只能在实验室环境中使用。用户身份验证、密码和命令通过网络以明文形式发送。</li>
<li> <strong>AUX</strong>-某些设备，比如路由器，还可以支持传统辅助端口（如3mm音频接口），这种辅助端口可使用调制解调器通过电话连接远程建立 CLI 会话。<strong>类似于</strong>控制台连接，AUX 端口也是带外连接，且不需要配置或提供网络服务。</li>
<li> <strong>PDU</strong>-一段数据在任意协议层的表示形式称为协议数据单元 (PDU)</li>
<li> <strong>API</strong>-Application Programming Interface，应用程序接口<br>第二部分</li>
<li><strong>URL</strong>- (Uniform Resource Locator，统一资源定位符)对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。</li>
<li><strong>ACL</strong>-访问控制列表（Access Control Lists，ACL）是应用在路由器接口的指令列表。这些指令列表用来告诉路由器哪些数据包可以收、哪些数据包需要拒绝。</li>
<li><strong>RPC</strong>-RPC是远程过程调用（Remote Procedure Call）的缩写形式。</li>
<li><strong>RESTful api</strong>-REST即Representational State Transfer的缩写，是基于HTTP协议之上的一组约束和属性，翻译过来是表现层状态转移。REST是一种_设计风格_（并非一种标准），描述的是在网络中Client和Server的一种交互形式，目的是便于<strong>不同</strong>的软件/程序在网络中互相传递消息。<strong>RESTful</strong>即实现REST设计风格的一种架构，如RESTful API（REST设计风格的API）</li>
</ul>
<h1 id="CLI命令-思科-IOS"><a href="#CLI命令-思科-IOS" class="headerlink" title="CLI命令(思科 IOS)"></a>CLI命令(思科 IOS)</h1><p>上下文相关帮助为用户提供了一个命令列表以及与网络设备当前模式中这些命令相关联的参数。<br>语法检查器提供了对已提交命令的错误检查，如果输入了部分命令，则 TAB 键可用于将命令补充完整。</p>
<h2 id="权限模式"><a href="#权限模式" class="headerlink" title="权限模式"></a>权限模式</h2><p><strong>用户</strong> EXEC 模式（用户模式）标识“&gt;”<br><strong>特权</strong> EXEC 模式（特权模式）标识“#”<br>要从用户模式切换到特权模式，请使用<code>enable</code>命令。使用特权模式命令<code>disable</code>返回用户模式。<br>要配置设备，用户必须进入<strong>全局配置</strong>模式。<br>在全局配置模式下， CLI 配置所做的更改将影响整个设备的运行。全局配置模式由在设备名称之后加(config)#结尾的提示符标识，比如Switch(config)#。<br>要进出全局配置模式，请使用特权模式命令<code>configure terminal</code>。要返回特权模式，请输入全局配置模式命令<code>exit</code>。<br>访问全局配置模式之后才能访问其他具体的配置模式。子配置模式：</p>
<ul>
<li><strong>线路配置模式0</strong>- 用于配置控制台、SSH、Telnet 或 AUX 访问。默认提示符是 Switch(config-line)#</li>
<li><strong>接口配置模式1</strong>- 用于配置交换机端口或路由器网络接口。 Switch(config-if)#<br>要进入线路子配置模式，您可以使用line命令后跟您要访问的管理线路类型和编号来实现。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)# line console 0</span><br><span class="line">Switch(config-line)# exit</span><br><span class="line">Switch(config)#</span><br></pre></td></tr></table></figure>
要从全局配置模式的任何子配置模式切换到模式层级中的上一级模式，请输入exit命令。<br>要从任何子配置模式切换到特权模式，请输入end命令或输入组合键Ctrl+Z。<br>还可以直接从一个子配置模式切换到另一个子配置模式。注意在选择接口后，命令提示符如何从 (config-line)# 到 (config-if)#<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config-line)# interface FastEthernet 0/1</span><br><span class="line">Switch(config-if)#</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="键位操作"><a href="#键位操作" class="headerlink" title="键位操作"></a>键位操作</h2><table>
<thead>
<tr>
<th><strong>键盘输入</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Tab</strong></td>
<td>补全部分输入的命令项。</td>
</tr>
<tr>
<td><strong>Backspace</strong></td>
<td>删除光标左边的字符。</td>
</tr>
<tr>
<td><strong>Ctrl-D</strong></td>
<td>删除光标所在的字符。</td>
</tr>
<tr>
<td><strong>Ctrl-K</strong></td>
<td>删除从光标到命令行尾的所有字符。</td>
</tr>
<tr>
<td><strong>Esc D</strong></td>
<td>删除从光标到词尾的所有字符。</td>
</tr>
<tr>
<td><strong>Ctrl+U</strong>或 <strong>Ctrl+X</strong></td>
<td>删除从光标到命令行首的 所有字符。</td>
</tr>
<tr>
<td><strong>Ctrl-W</strong></td>
<td>删除光标左边的单词。</td>
</tr>
<tr>
<td><strong>Ctrl-A</strong></td>
<td>将光标移至行首。</td>
</tr>
<tr>
<td><strong>向左箭头</strong>或<strong>Ctrl+B</strong></td>
<td>将光标左移一个字符。</td>
</tr>
<tr>
<td><strong>Esc B</strong></td>
<td>将光标向后左移一个单词。</td>
</tr>
<tr>
<td><strong>Esc F</strong></td>
<td>将光标向前右移一个单词。</td>
</tr>
<tr>
<td><strong>向右箭头</strong>或<strong>Ctrl+F</strong></td>
<td>将光标右移一个字符。</td>
</tr>
<tr>
<td><strong>Ctrl-E</strong></td>
<td>将光标移至命令行尾。</td>
</tr>
<tr>
<td><strong>向上箭头</strong>或<strong>Ctrl+P</strong></td>
<td>调出历史记录缓冲区中的命令， 从最近输入的命令开始。</td>
</tr>
<tr>
<td><strong>Ctrl+R</strong>或<strong>Ctrl+I</strong>或<strong>Ctrl+L</strong></td>
<td>收到控制台消息后重新显示系统提示符和 命令行。</td>
</tr>
<tr>
<td><strong>Ctrl-C</strong></td>
<td>处于任何配置模式下时，用于结束该配置模式并返回 特权模式。处于设置模式下时，用于中止并返回命令 提示符。</td>
</tr>
<tr>
<td><strong>Ctrl-Z</strong></td>
<td>处于任何配置模式下时，用于结束该配置模式并返回 特权模式。</td>
</tr>
<tr>
<td><strong>Ctrl-Shift-6</strong></td>
<td>通用中断序列用于中止 DNS lookup、traceroutes、 pings等。</td>
</tr>
</tbody></table>
<h2 id="设备配置命令"><a href="#设备配置命令" class="headerlink" title="设备配置命令"></a>设备配置命令</h2><ul>
<li>命名<code>hostname Sw-Floor-1</code></li>
<li>用户 EXEC 模式密码设置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1(config-line)# password cisco</span><br><span class="line">Sw-Floor-1(config-line)# login</span><br></pre></td></tr></table></figure></li>
<li>特权 EXEC 访问密码设置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sw-Floor-1(config)# enable secret cisco</span><br></pre></td></tr></table></figure></li>
<li>虚拟终端 (VTY) 线路支持通过Telnet或SSH对设备的远程访问<br>  使用<code>line vty 0 15</code>全局配置命令进入线路 VTY 模式</li>
<li>加密所有明文密码，请使用全局配置命令<code>service password-encryption</code></li>
<li>使用<code>show running-config</code>命令验证密码现在是否已加密</li>
<li>使用banner motd #当日消息#全局配置命令，命令执行完毕后，系统将向之后访问设备的所有用户显示该标语，直到该标语被删除为止</li>
<li>特权 EXEC 模式命令<code>show running-config</code>用于查看正在运行的配置</li>
<li>要查看启动配置文件，请使用特权 EXEC 命令<code>show startup-config</code></li>
<li>使用特权 EXEC 模式命令<code>erase startup-config</code>可删除启动配置</li>
<li>使用特权 EXEC 模式命令 <code>reload</code>重新加载设备都能恢复启动配置</li>
<li><code>copy running-config startup-config</code>将运行配置拷贝到启动配置以做修改</li>
</ul>
<h2 id="端口和地址"><a href="#端口和地址" class="headerlink" title="端口和地址"></a>端口和地址</h2><p>使用 IP 地址，是设备能够相互查找并在 Internet 上建立端到端通信的主要方式。<br><strong>IPv4 地址</strong>的结构称为点分十进制记法，用 0 到 255 之间的四个十进制数字表示。<br>对于 IPv4 地址，<strong>子网掩码</strong>也是必要设置。IPv4 子网掩码是将地址的网络部分与主机部分区分开来的 32 位值。子网掩码，与 IPv4 地址相结合，可用于确定设备属于哪个子网。<br>例如 IPv4 地址 (192.168.1.10)、子网掩码 (255.255.255.0) 和默认网关 (192.168.1.1)。<br><strong>默认网关地址</strong>是主机将用于访问远程网络（包括 Internet）的路由器的 IP 地址。<br><strong>IPv6 地址</strong>长度为 128 位，写作十六进制值字符串。每 4 位以一个十六进制数字表示；共 32 个十六进制值。由四个十六进制数字组以冒号 (:) 分隔。IPv6 地址不区分大小写，可用大写或小写书写。<br><strong>注意</strong>子网掩码(IPv4)或前缀长度(IPv6)用于将IP地址的网络部分与主机部分区分开来。<br>交换机有一个或多个**交换机虚拟接口 (SVI)**。这些是虚拟接口，是因为设备上没有任何物理硬件与之关联。SVI 会在软件中创建。虚拟接口可以让您使用 IPv4和IPv6 通过网络远程管理交换机。每台交换机的默认配置中都“现成”带有一个 SVI。默认 SVI 是接口 VLAN1。</p>
<h2 id="配置IP"><a href="#配置IP" class="headerlink" title="配置IP"></a>配置IP</h2><p>终端通常默认使用 DHCP 进行 IPv4 地址自动配置。<br>IPv6 使用 DHCPv6 和 SLAAC（无状态地址自动配置）进行动态地址分配。<br>要远程访问交换机，SVI 上必须配置 IP 地址和子网掩码。要在交换机上配置 SVI，请使用全局配置命令<code>interface vlan 1</code>。Vlan 1 并不是一个实际物理接口，而是一个虚拟接口。然后使用接口配置命令 <code>ip address ip-address(192.168.1.20) subnet-mask(255.255.255.0)</code> 配置 IPv4 地址。最后，使用接口配置命令 <code>no shutdown</code> 启用虚拟接口。<br><code>show ip interface brief</code>查看IP配置<br><code>ping</code>命令(command命令)可用于测试与网络上的另一设备或互联网上的一个网站的连接。</p>
<h1 id="协议和模型"><a href="#协议和模型" class="headerlink" title="协议和模型"></a>协议和模型</h1><h2 id="协议的要求"><a href="#协议的要求" class="headerlink" title="协议的要求"></a>协议的要求</h2><p>网络通信中使用的协议共享许多基本特质。除了识别源和目的地之外，计算机和网络协议还定义了消息在网络中如何传输的细节。常用的计算机协议包含以下要求：</p>
<h3 id="消息编码"><a href="#消息编码" class="headerlink" title="消息编码"></a>消息编码</h3><p>在发送消息时，首先执行的步骤之一是编码。编码是将信息转换为另一种广为接受的形式的过程，目的是为了便于传输信息。解码是编码的逆向过程，用来解释信息。</p>
<h3 id="消息格式和封装"><a href="#消息格式和封装" class="headerlink" title="消息格式和封装"></a>消息格式和封装</h3><p>当消息从源发送到目的地时，必须使用特定的格式或结构。消息格式取决于消息的类型和传递信道。<br>将一种消息格式（信件）放入另一种消息格式（信封）的过程称为封装。</p>
<h3 id="消息大小"><a href="#消息大小" class="headerlink" title="消息大小"></a>消息大小</h3><h3 id="消息时序"><a href="#消息时序" class="headerlink" title="消息时序"></a>消息时序</h3><p>消息时序在网络通信中也非常重要。消息时序包括以下内容：</p>
<ul>
<li>  <strong>流量控制-</strong> 这是管理数据传输速率的过程。流量控制定义了可以发送多少信息以及传递信息的速率。例如，如果一个人讲话太快，对方就难以听清和理解。在网络通信中，源设备和目的设备使用网络协议来协商和管理信息流。</li>
<li>  <strong>响应超时</strong> -如果一个人提问之后在合理的时间内没有得到回答，就会认为没有获得回答并作出相应的反应。此人可能会重复这个问题，也可能继续谈话。网络上的主机会使用网络协议来指定等待响应的时长，以及在响应超时的情况下执行什么操作。</li>
<li>  <strong>访问方法</strong> -这决定人们可以发送消息的时间。单击图中的“播放”来查看如果两个人同时讲话，就会发生信息冲突，两个人必须作出让步，重新开始的动画演示。同样，当设备想要在无线局域网上传输时，有必要使用 WLAN 网络接口卡 (NIC) 来确定无线介质是否可用。</li>
</ul>
<h3 id="消息传输选项"><a href="#消息传输选项" class="headerlink" title="消息传输选项"></a>消息传输选项</h3><p>单播、组播和广播</p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>使终端设备能够通过网络进行通信，每个设备都必须遵守相同的一套规则。这些规则被称为协议</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table>
<thead>
<tr>
<th><strong>协议类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>网络通信协议</strong></td>
<td>这类协议使两个或多个设备能够在一个或多个 网络上通信。以太网技术家族涉及多种协议， 例如IP，传输控制协议（TCP）， 超文本传输协议（HTTP）等。</td>
</tr>
<tr>
<td><strong>网络安全协议</strong></td>
<td>这类协议保护数据以提供身份验证、数据完整性和 数据加密。安全协议的示例包括安全外壳协议 (SSH)、安全套接字层协议 (SSL) 和传输层安全协议 (TLS)。</td>
</tr>
<tr>
<td><strong>路由协议</strong></td>
<td>这类协议使路由器能够交换路由信息，比较路径 信息，然后选择到达目标网络的 最佳路径。路由协议的示例包括开放最短路径优先协议 (OSPF)和边界网关协议 (BGP)。</td>
</tr>
<tr>
<td><strong>服务发现协议。</strong></td>
<td>这类协议用于设备或服务的自动检测。 服务发现协议的示例包括发现用于IP地址分配 服务的动态主机配置协议（DHCP）， 和用于执行域名到IP地址转换的 域名系统（DNS）。</td>
</tr>
</tbody></table>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>编址</strong></td>
<td>这使用已定义的编址方案来标识消息的发送者 和预期的接收者。提供编址的协议示例 包括以太网，IPv4和IPv6。</td>
</tr>
<tr>
<td><strong>可靠性</strong></td>
<td>此功能提供了有保证的传输机制， 以防消息在传输过程中丢失或损坏。TCP 提供可靠的传输。</td>
</tr>
<tr>
<td><strong>流量控制</strong></td>
<td>此功能可确保数据在两个通信设备之间 高效传输。TCP 提供流量控制服务。</td>
</tr>
<tr>
<td><strong>排序</strong></td>
<td>此功能唯一地标记每个传输的数据段。接收设备 使用排序信息正确地 重组信息。如果数据段丢失，延迟或未按顺序接收， 这将很有用。TCP 提供排序服务。</td>
</tr>
<tr>
<td><strong>差错检测</strong></td>
<td>此功能用于确定传输过程中数据 是否已损坏。提供差错检测的各种协议包括 以太网，IPv4，IPv6和TCP。</td>
</tr>
<tr>
<td><strong>应用接口</strong></td>
<td>此功能包含用于网络应用程序之间的进程间 通信的信息。例如，访问网页时， 使用HTTP或HTTPS协议在客户端和服务器Web进程 之间进行通信。</td>
</tr>
</tbody></table>
<h3 id="常见协议"><a href="#常见协议" class="headerlink" title="常见协议"></a>常见协议</h3><ul>
<li><strong>超文本传输协议 (HTTP)</strong> - 该协议控制 Web 服务器和 Web 客户端进行交互的方式。HTTP 定义了客户端和服务器之间交换的请求和响应的内容与格式。客户端软件和 Web 服务器软件都将 HTTP 作为应用程序的一部分来实现。HTTP 依靠其他协议来控制客户端和服务器之间传输消息的方式。</li>
<li><strong>传输控制协议 (TCP)</strong> - 此协议管理各个会话。TCP负责保证信息的可靠传递和管理终端设备之间的流量控制。</li>
<li><strong>互联网协议 (IP)</strong> - 此协议负责将消息从发送方传输给接收方。路由器使用 IP 来跨多个网络转发消息。</li>
<li><strong>以太网</strong> - 此协议负责将消息从一个 NIC 传输到同一个以太网局域网 (LAN) 上的另一个 NIC。</li>
</ul>
<h2 id="协议簇"><a href="#协议簇" class="headerlink" title="协议簇"></a>协议簇</h2><p>协议簇是相互作用、帮助解决某个问题的规则集。</p>
<h3 id="几种协议簇"><a href="#几种协议簇" class="headerlink" title="几种协议簇"></a>几种协议簇</h3><p><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644322963304.png"></p>
<ul>
<li>  <strong>互联网协议簇或 TCP/IP</strong> - 这是目前使用的最常见和最相关的协议簇。TCP/IP 协议簇是由互联网工程任务组 (IETF) 维护的开放标准协议簇。</li>
<li>  <strong>开放系统互连(OSI)协议</strong> - 这是1977年由国际标准化组织(ISO)和国际电信联盟(ITU)联合开发的一系列协议。OSI协议还包括一个被称为OSI参考模型的七层模型。OSI参考模型对其协议的功能进行分类。如今，OSI主要以其分层模型而闻名。OSI协议在很大程度上已经被TCP/IP所取代。</li>
<li>  <strong>Apple Talk</strong> - 一个由苹果公司于1985年为苹果设备发布的短期专有协议簇。1995年，苹果公司采用TCP/IP技术取代了AppleTalk。</li>
<li>  <strong>Novell NetWare</strong> - 一种短暂的专有协议套件和网络操作系统，由诺维尔公司在 1983 年使用 IPX 网络协议开发。1995年，Novell采用TCP/IP取代了IPX。</li>
</ul>
<h3 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h3><p>如今，TCP/IP 协议簇包含许多协议，并且不断发展以支持新服务。<br><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644323175596.png" alt="enter description here"><br>TCP/IP是开放的标准的协议簇</p>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>域名系统</p>
<ul>
<li>  <strong>DNS</strong> - 域名系统。将域名（例如 cisco.com）转换为 IP 地址。<br>主机配置</li>
<li>  <strong>DHCPv4</strong> - IPv4动态主机配置协议。DHCPv4 服务器在启动时动态地将 IPv4 编址信息分配给 DHCPv4 客户端，并允许在不再需要时重新使用这些地址。</li>
<li>  <strong>DHCPv6</strong> - IPv6动态主机配置协议。DHCPv6类似于DHCPv4。DHCPv6服务器在启动时动态地将IPv6编址信息分配给DHCPv6客户端。</li>
<li>  <strong>SLAAC</strong> - 无状态地址自动配置。一种允许设备在不使用DHCPv6服务器的情况下获得其IPv6编址信息的方法。<br>邮件</li>
<li>  <strong>SMTP</strong> - 简单邮件传输协议。使客户端能够将邮件发送到邮件服务器，并使服务器能够将邮件发送到其他服务器。</li>
<li>  <strong>POP3</strong> - 邮局协议第 3 版。使客户端能够从邮件服务器检索电子邮件并将电子邮件下载到客户端本地邮件应用程序。</li>
<li>  <strong>IMAP</strong> - 互联网消息访问协议。使客户端能够访问存储在邮件服务器上的电子邮件，并在服务器上维护电子邮件。<br>文件传输</li>
<li>  <strong>FTP</strong> - 文件传输协议。它设置规则，使得一台主机上的用户能够通过网络访问另一台主机或向其传输文件。FTP是一种可靠、面向连接且进行确认的文件传输协议。</li>
<li>  <strong>SFTP</strong> - SSH文件传输协议。作为安全外壳 (SSH)协议的扩展，SFTP可用于建立安全的文件传输会话，在该会话中对文件传输进行加密。SSH 是一种安全远程登录的方法，通常用于访问设备的命令行。</li>
<li>  <strong>TFTP</strong> - 简单文件传输协议。这是一个简单的，无连接的文件传输协议，使用尽最大努力、无需确认的文件传输方式。它使用的开销比FTP少。<br>Web和Web服务</li>
<li>  <strong>HTTP</strong> - 超文本传输协议。这是有关在万维网上交换文本、图形图像、音频、视频以及其他多媒体文件的一组规则集。</li>
<li>  <strong>HTTPS</strong> - 安全 HTTP。这是一种安全的HTTP形式，它对在万维网上交换的数据进行加密。</li>
<li>  <strong>REST</strong> - 具象状态传输协议。它使用应用程序编程接口 (API) 和 HTTP 请求创建 Web 应用程序的 Web 服务。</li>
</ul>
<h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>面向连接</p>
<ul>
<li>  <strong>TCP</strong> - 传输控制协议。它使运行在不同主机上的进程之间能够进行可靠的通信，并提供可靠的、需要确认的传输，以确保传输成功。<br>无连接</li>
<li>  <strong>UDP</strong> - 用户数据报协议。它允许一台主机上运行的进程向另一台主机上运行的进程发送数据包。但是，UDP不会确认数据报传输是否成功。</li>
</ul>
<h4 id="互联网层"><a href="#互联网层" class="headerlink" title="互联网层"></a>互联网层</h4><p>Internet 协议<strong>IP</strong></p>
<ul>
<li>  <strong>IPv4</strong> - 互联网协议第 4 版。它接收来自传输层的消息段，将消息打包成数据包，并为通过网络进行端到端传递的数据包进行地址分配。IPv4 使用 32 位地址。</li>
<li>  <strong>IPv6</strong> - 互联网协议第 6 版。与 IPv4 类似，但使用 128 位地址。</li>
<li>  <strong>NAT</strong> - 网络地址转换。将私有网络 IPv4 地址转换为全球唯一的公有 IPv4 地址。<br>消息传送<strong>ICMP</strong></li>
<li>  <strong>ICMPv4</strong> - IPv4 互联网控制消息协议。目的主机针对数据包传输中出现的错误，向源主机提供反馈。</li>
<li>  <strong>ICMPv6</strong> - 用于 IPv6 的ICMP。与 ICMPv4 类似的功能，但用于 IPv6 数据包。</li>
<li>  <strong>ICMPv6 ND</strong> - IPv6 邻居发现。包括用于地址解析和重复地址检测的四个协议消息。<br>路由协议</li>
<li>  <strong>OSPF</strong> - 开放最短路径优先协议。它使用基于区域的分层设计的链路状态路由协议。OSPF是一种开放式标准内部路由协议。</li>
<li>  <strong>EIGRP</strong> — 增强型内部网关路由协议这是一种思科开发的开放标准路由协议，使用基于带宽、延迟、负载和可靠性的复合度量。</li>
<li>  <strong>BGP</strong> - 边界网关协议。这是一种开放标准的外部网关路由协议，用于互联网服务提供商(ISP)之间。BGP 还通常用于 ISP 与其大型私有客户端之间来交换路由信息。</li>
</ul>
<h4 id="网络接入层"><a href="#网络接入层" class="headerlink" title="网络接入层"></a>网络接入层</h4><p>地址解析</p>
<ul>
<li>  <strong>ARP</strong> - 地址解析协议。提供 IPv4 地址与硬件地址之间的动态地址映射。</li>
<li>*注意**：您可能会看到其他文档状态，表明 ARP 在互联网层（OSI 第 3 层）运行。但是，在本课程中，我们声明 ARP 在网络接入层（OSI 第 2 层）运行，因为它的主要目的是发现目标的 MAC 地址。MAC 地址是第 2 层地址。<br>数据链路协议</li>
<li>  <strong>以太网</strong> - 为网络接入层的布线和信令标准定义规则。</li>
<li>  <strong>WLAN</strong> - 无线局域网。定义 2.4 GHz 和 5 GHz 无线电频率的无线信号规则。</li>
</ul>
<h2 id="标准组织"><a href="#标准组织" class="headerlink" title="标准组织"></a>标准组织</h2><h3 id="互联网标准"><a href="#互联网标准" class="headerlink" title="互联网标准"></a>互联网标准</h3><ul>
<li>  <strong>Internet 协会 (ISOC)</strong> – 负责在全世界推进互联网的开放式开发、发展和使用。</li>
<li>  <strong>互联网架构委员会 (IAB)</strong> - 负责互联网标准的整体管理和发展。</li>
<li>  <strong>互联网工程任务组 (IETF)</strong> - 负责开发、更新和维护互联网和 TCP/IP 技术。包括用于开发新协议和更新现有协议的流程和文档，称为征求意见 (RFC) 文档。</li>
<li>  <strong>互联网研究任务组 (IRTF)</strong> - 负责互联网和 TCP/IP 协议相关的长期研究，包括反垃圾电子邮件研究组（Anti-Spam Research Group，ASRG）、密码技术研究组（Crypto Forum Research Group，CFRG）和对等网络研究组（Peer-to-Peer Research Group，P2PRG）等。</li>
<li>  <strong>互联网名称与数字地址分配机构 (ICANN)</strong> - 总部设在美国，ICANN负责协调 IP 地址分配、域名的管理和 TCP/IP 协议中使用的其他信息的分配。</li>
<li>  <strong>互联网编号指派机构 (IANA)</strong> - 负责监督和管理 ICANN 中的 IP 地址分配、域名管理和协议标识符。</li>
</ul>
<h3 id="电子和通信标准"><a href="#电子和通信标准" class="headerlink" title="电子和通信标准"></a>电子和通信标准</h3><ul>
<li>  <strong>电气电子工程师协会</strong>(<strong>IEEE</strong>，读作“I-triple-E”） –是为致力于推动诸多行业领域的技术创新和标准创建的工程师设立的组织，涉及的领域包括电力与能源、医疗保健、电信和网络。重要的 IEEE 网络标准包括 802.3 以太网和 802.11 无线局域网标准。可在互联网上搜索其他 IEEE 网络标准。</li>
<li>  <strong>美国电子工业协会 (EIA)</strong>- 该组织因其在用于安装网络设备的电线、连接器和 19 英寸机架方面的标准而知名。</li>
<li>  <strong>电信工业协会 (TIA)</strong>- 该组织负责开发各种领域的通信标准，包括无线电设备、手机信号塔、IP 语音 (VoIP) 设备和卫星通信等。该图显示了一个经认证的以太网电缆的示例，它是由TIA和EIA合作开发的。</li>
<li>  <strong>国际电信联盟电信标准局 (ITU-T)</strong>- 是最大最早的通信标准组织之一。ITU-T 定义视频压缩、Internet 协议电视 (IPTV) 和宽带通信的标准，例如数字用户线路 (DSL)。</li>
</ul>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644411498714.png"><br>| <strong>OSI 模型层</strong> | <strong>描述</strong> |<br>| — | — |<br>| <strong>7 - 应用层</strong> | 应用层包含用于进程间通信 的协议。 |<br>| <strong>6 - 表示层</strong> | 表示层用常用方式表示数据 在应用层服务之间的传输。 |<br>| <strong>5 - 会话层</strong> | 会话层向表示层提供服务，组织对话并 管理数据交换。 |<br>| <strong>4 - 传输层</strong> | 传输层定义服务以对数据进行分段，传输和 重组，以进行终端设备之间的单独 通信。 |<br>| <strong>3 - 网络层</strong> | 网络层为所标识的终端设备之间通过网络 交换独立的数据的片段提供服务。 |<br>| <strong>2 - 数据链路层</strong> | 数据链路层协议描述了设备之间通过 公共介质交换数据帧的方法。 |<br>| <strong>1 - 物理层</strong> | 物理层协议描述了机械的、电气的、功能的 和程序化的方法，以激活，维护和解除物理连接， 实现与网络设备之间的位 设备。 |</p>
<table>
<thead>
<tr>
<th><strong>TCP/IP 模型层</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>4 - 应用层</strong></td>
<td>向用户提供数据，以及编码和对话控制。</td>
</tr>
<tr>
<td><strong>3 - 传输层</strong></td>
<td>支持各种设备之间通过不同网络通信。</td>
</tr>
<tr>
<td><strong>2 - 互联网层</strong></td>
<td>确定通过网络的最佳路径。</td>
</tr>
<tr>
<td><strong>1 - 网络接入层</strong></td>
<td>控制组成网络的硬件设备和介质。</td>
</tr>
</tbody></table>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>消息分段有两个主要好处:</p>
<ul>
<li>  <strong>提高速度</strong> - 由于将大数据流分段成为数据包，因此可以在不独占通信链路的情况下，通过网络发送大量数据。这允许许多不同的会话在称为多路复用的网络上交错。</li>
<li>  <strong>提高效率</strong> - 如果单个数据段由于网络故障或网络拥塞而无法到达其目的地，则只需要重新传输该段，而不需要重新发送整个数据流。<br>在通过网络介质传输应用程序数据的过程中，随着数据沿协议栈向下传递，每层都要添加各种协议信息。此过程称为封装。</li>
<li><em>注意</em>*: 虽然UDP PDU被称为数据报，但IP数据包有时也被称为IP数据报。<br>一段数据在任意协议层的表示形式称为协议数据单元 (PDU)。在封装过程中，后续的每一层都根据使用的协议封装其从上一层接收的 PDU。在该过程的每个阶段，PDU 都以不同的名称来反映其新功能。尽管目前对 PDU 的命名没有通用约定，但本课程中根据 TCP/IP 协议簇的协议来命名 PDU。图中显示了每种形式数据的 PDU。<br><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644412968998.png"></li>
<li>  数据 - 一般术语，泛指应用层使用的 PDU</li>
<li>  段 - 传输层 PDU</li>
<li>  数据包 - 网络层 PDU</li>
<li>  帧 - 数据链路层 PDU</li>
<li>  位 - 通过介质实际传输数据时使用的物理层 PDU</li>
<li>*注意**：如果传输报头是TCP，那么它是一个数据段。如果传输报头是 UDP，那么它是一个数据报。<br>当数据沿着协议栈向下移动时，协议数据被添加到原始数据中。此过程称为封装。<br>数据在朝着最终用户应用程序沿协议栈向上移动的过程中被解封。</li>
</ul>
<h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>在网络中对消息进行分段是必要的，但是如果未正确编址这些分段的消息，它们将无处可去。<br>网络层和数据链路层负责将数据从源设备传输到目的设备。两层中的协议都包含源地址和目的地址，但它们的地址具有不同的用途：</p>
<ul>
<li><p>  网络层源地址和目的地址 - 负责将 <strong>IP 数据包</strong>从原始源设备传输到可能处于同一网络或远程网络中的最终目的设备。</p>
</li>
<li><p>  数据链路层源地址和目的地址 – 负责将<strong>数据链路帧</strong>从一个网络接口卡 (NIC) 传输到同一网络上的另一个 NIC。<br><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644415114587.png"><br>该图显示了OSI模型中用于传递数据的各个层的编址和标记。它从左至右显示为：物理层提供时序和同步位;数据链路层提供目的和源物理地址;网络层提供目的和源逻辑网络地址;传输层提供目的进程和源进程编号(端口);上层提供编码的应用程序数据。</p>
</li>
<li><p>IP 地址是网络层（或第 3 层）逻辑地址，用于将 IP 数据包从原始源设备传输到最终目的设备</p>
</li>
<li><p>数据链路层（第 2 层）物理地址具有不同的作用。数据链路层地址的作用是将数据链路层帧从一个网络接口传输到同一网络中的另一个网络接口。<br>在 IP 数据包可以通过有线或无线网络发送之前，必须将其封装成数据链路层帧，以便通过物理介质传输。<br>当 IP 数据包从主机到路由器、从路由器到路由器和最终从路由器到主机传输时，沿途中的每个点上都会将 IP 数据包封装到新的数据链路层帧中。每个数据链路层帧包含发送帧的 NIC 卡的源数据链路层地址和接收帧的 NIC 卡的目的数据链路层地址。<br>路由器会将其 NIC 上收到的第 2 层信息删除，添加新的数据链路层信息，然后将数据包从通往最终目的地路径的出口 NIC 上转发出去。</p>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="同一网络中的设备"><a href="#同一网络中的设备" class="headerlink" title="同一网络中的设备"></a>同一网络中的设备</h4><p><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644415408505.png"></p>
<ul>
<li>  <strong>源IPv4地址</strong> - 发送设备的IPv4地址，即客户端计算机PC1：192.168.1.110。</li>
<li>  <strong>目的IPv4地址</strong> - 接收设备的IPv4地址，即服务器，Web服务器：172.16.1.9。<br>当 IP 数据包的发送方和接收方处于同一网络中时，数据链路帧将直接发送到接收设备。在以太网中，数据链路地址称为以太网介质访问控制（MAC）地址是以太网网卡的物理内嵌地址。</li>
<li>  <strong>源 MAC 地址</strong> - 这是发送封装有 IP 数据包的数据链路帧的设备的数据链路地址，或以太网 MAC 地址。PC1 以太网网卡的 MAC 地址为 AA-AA-AA-AA-AA-AA，以十六进制表示法表示。</li>
<li>  <strong>目的MAC地址</strong> - 当接收设备与发送设备在同一网络中时，这就是接收设备的数据链路层地址。在本例中，目的MAC地址就是FTP服务器的MAC地址： CC-CC-CC-CC-CC-CC-CC，用十六进制记法表示。</li>
</ul>
<h4 id="远程网络中的设备"><a href="#远程网络中的设备" class="headerlink" title="远程网络中的设备"></a>远程网络中的设备</h4><p><img src="/2022/02/05/%E7%BD%91%E7%BB%9C/ITN1-3/1644415565226.png"></p>
<ul>
<li>  <strong>源IPv4地址</strong> – 发送设备的IPv4地址，即客户端计算机PC1：192.168.1.110。</li>
<li>  <strong>目的IPv4地址</strong> – 接收设备的IPv4地址，即服务器，Web服务器：172.16.1.99。<br>当 IP 数据包的发送方和接收方位于不同网络时，以太网数据链路帧不能直接发送到目的主机，因为在发送方的网络中无法直接到达该主机。<br>必须将以太网帧发送到称为路由器或默认网关的另一设备。在示例中，默认网关是 R1。R1 有一个以太网数据链路地址与 PC1 位于同一网络中。这使 PC1 能够直接到达路由器。</li>
<li>  <strong>源 MAC 地址</strong> - 发送设备 PC1 的以太网 MAC 地址。PC1 以太网接口的 MAC 地址是 AA-AA-AA-AA-AA-AA。</li>
<li>  <strong>目的 MAC 地址</strong> - 当接收设备（目的 IP 地址）与发送设备位于不同网络时，发送设备使用默认网关或路由器的以太网 MAC 地址。在本示例中，目的 MAC 地址是 R1 的以太网接口的 MAC 地址：11-11-11-11-11-11。这是连接到与PC1相同的网络的接口，如图所示。</li>
</ul>
<h1 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h1><p>主题 3.6.0-在网络上发送消息时，封装过程从 OSI 或 TCP/IP 模型的<strong>顶层开始自上而下</strong>工作。在该模型的各层上，上层信息被封装到下一协议的数据字段中。例如，在 IP 数据包可以发送之前，会将其封装到第 2 层的数据链路帧中，以便其能够通过物理介质发送。<br>主题 3.6.0-<strong>术语协议数据单元 (PDU)</strong> 用于描述网络模型的任一层上的一段数据。数据包是网络层PDU。帧是数据链路层PDU。数据段是传输层PDU。<br>主题 3.1.0-双工通信指的是介质在两个方向上传送消息的能力。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>光影测试</title>
    <url>/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>10个超良心低配光影介绍&amp;测评<font size="2"><em>毕竟妄图在装了200+mods后还开光影<del>一帧能玩两帧流畅三帧电竞</del></em></font></p>
<p>从以下方面进行了系统评测，仅进行相互比较，建议因地制宜的选用<font size="4">基本都是那些实实在在影响感官和游戏体验的点</font><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/end.png" alt="表格"><br>洞穴透光：问题过于普遍<br>水反：水面反光明显程度<br>水透：水下水体透明度<br>水面透：陆上看水下的水体透明度<br>烟：以篝火烟雾为代表的一众粒子效果<br>附魔：附魔紫光效果影响<br>手持：部分光影手持物品会变透明</p>
<h1 id="chocapic13系列我也不清楚哪个是本来的"><a href="#chocapic13系列我也不清楚哪个是本来的" class="headerlink" title="chocapic13系列我也不清楚哪个是本来的"></a>chocapic13系列<font size="1" color="gray">我也不清楚哪个是本来的</font></h1><p>同系列可快速切换<br><font size="2">类似于只改变了配置</font></p>
<hr>
<ul>
<li>chocapic13<br>  <em>Chocapic13-Shaders-Mod-1.6.2</em><br>  唯一不自带天空材质的<br>  水面反射效果较弱<br>  <strong>彩色玻璃阴影作实心计算（不透光）</strong><br>  百模组FPS：50|30 <font size="2">峰值|稳定平均值</font></li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/c131.png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/c132.png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/c133.png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/c134.png" alt="1"></p>
<hr>
<ul>
<li>ziipzaaps<br>  <em>Ziipzaaps_Shaders_V2</em><br>  水面较暗<br>  <strong>烟雾不正常</strong><br>  <strong>彩色玻璃不透光</strong><br>  <strong>影子很糊</strong><br>  百模组FPS：40|30</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/zi(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/zi(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/zi(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/zi(4).png" alt="1"></p>
<hr>
<ul>
<li>werrus<br>  <em>Werrus HFPS Shaders V4.0 Ultra</em><br>  较好的洞穴漏光修复<br>  <strong>烟雾不正常</strong><br>  <strong>彩色玻璃不透光</strong><br>  <strong>影子糊</strong><br>  百模组FPS：50|30</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/wer(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/wer(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/wer(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/wer(4).png" alt="1"></p>
<hr>
<ul>
<li>iteration<br>  <em>iterationT Next 1.1.0</em><br>  较好的洞穴漏光修复<br>  <strong>烟雾不正常</strong><br>  <strong>附魔随角度变化不正常</strong><br>  模组（CavesAndCliffsBackport）中遮光玻璃崩坏<br>  百模组FPS：20|20</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/it(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/it(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/it(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/it(4).png" alt="1"></p>
<hr>
<ul>
<li>Seus renew<br>  <em>SEUS-Renewed-v1.0.1</em><br>  较弱的洞穴漏光修复<br>  水体透明度较低<br>  <strong>粒子效果偏移</strong><br>  <strong>附魔随角度变化不正常</strong><br>  百模组FPS：30|20</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus(5).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus(4).png" alt="1"></p>
<hr>
<ul>
<li>Seus renew fix<br><em>SEUS-Renewed-v1.0.1 [Tweaked+Cloud]</em><br>较弱的洞穴漏光修复<br>水体透明度较低</li>
<li><em>粒子效果偏移</em>*</li>
<li><em>附魔随角度变化不正常</em>*<br><font size="2">几乎和上者一致</font><br>百模组FPS：20|20</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus%5B%5D(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus%5B%5D(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus%5B%5D(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/Seus%5B%5D(4).png" alt="1"></p>
<h1 id="BSL系列比较推荐BSL及其standard版"><a href="#BSL系列比较推荐BSL及其standard版" class="headerlink" title="BSL系列比较推荐BSL及其standard版"></a>BSL系列<font size="2">比较推荐BSL及其standard版</font></h1><hr>
<ul>
<li>BSL<br>  <em>BSL_v8.0.01</em><br>  较弱的洞穴漏光修复<br>  水体表现不错<br>  彩色玻璃表现较弱<br>  <strong>光源整体发光</strong><font size="2">比如说火把，它的木杆也明显很亮</font><br>  百模组FPS：40|20</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSL(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSL(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSL(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSL(4).png" alt="1"></p>
<hr>
<ul>
<li>BSL Standard<br>  <em>BSL Standard v7.0p1</em><br>  较弱的洞穴漏光修复<br>  水体表现不错<br>  <strong>附魔效果整体泛光</strong><br>  <strong>水面过透</strong><br>  百模组FPS：40|30</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSLs(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSLs(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSLs(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/BSLs(4).png" alt="1"></p>
<hr>
<ul>
<li>Sildurs<br>  <em>B Sildurs Vibrant Shaders v1.281 Lite/Medium/High/Extreme</em><br>  <font size="2">建议直接开Extreme，阴影质量提升很多</font><br>  较弱的洞穴漏光修复<br>  <strong>附魔效果呈不透明紫色</strong><br>  百模组FPS：30|30~50|30</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/SILD(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/SILD(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/SILD(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/SILD(4).png" alt="1"></p>
<h1 id="projectLUMA"><a href="#projectLUMA" class="headerlink" title="projectLUMA"></a>projectLUMA</h1><p>其实不怎么推荐这个</p>
<hr>
<ul>
<li>projectLUMA<br>  <em>projectLUMA - v1.32 汉化版</em><br>  <strong>附魔取消效果</strong><br>  <strong>光源整体发光</strong><br>  百模组FPS：40|20</li>
</ul>
<p><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/pro(1).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/pro(2).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/pro(3).png" alt="1"><br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/pro(4).png" alt="1"></p>
<hr>
<p><font size="6">最后</font><br>个人观点，酌情选用<br><img src="/2021/09/11/MC/shaderpack/%E5%85%89%E5%BD%B1%E6%B5%8B%E8%AF%95/end.png" alt="表格"></p>
<hr>
<hr>
<hr>
<p>本文作markdown 书写训练文<br>小坑：</p>
<ul>
<li>小书匠绑定图床的url前缀填写可省略（不是简单网址，例如：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/dyinjin/xiaoshujiang/main/小书匠/1631329393524.png</span><br></pre></td></tr></table></figure></li>
<li>大图使用本地图库时参考了 <a href="https://www.jianshu.com/p/f72aaad7b852">DCBXZ的博客</a></li>
<li>大部分“宏定义”  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Blog\themes\next\source\css\_variables</span><br></pre></td></tr></table></figure></li>
<li>报错：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF</span><br></pre></td></tr></table></figure>
  使用  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config –global core.autocrlf false //禁用自动转换 </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>ITN 4-7</title>
    <url>/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/</url>
    <content><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="物理层的用途"><a href="#物理层的用途" class="headerlink" title="物理层的用途"></a>物理层的用途</h2><p>物理连接可以通过线缆进行有线连接，也可以通过无线电波进行无线连接。<br>网络接口卡 (NIC) 将设备连接到网络。以太网网卡用于有线连接，而无线局域网（WLAN）网卡用于无线连接。<br>接收设备的物理层将位传递到数据链路层<br>物理层接收帧进行编码和传输</p>
<h2 id="物理层的特征"><a href="#物理层的特征" class="headerlink" title="物理层的特征"></a>物理层的特征</h2><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><p>在物理层标准的制定和维护中涉及许多不同的国际和国家组织、政府监管机构和私营企业。例如，物理层硬件、介质、编码和信令标准由以下组织定义和管理：</p>
<ul>
<li>  国际标准化组织 (ISO)</li>
<li>  电信工业协会/电子工业协会 (TIA/EIA)</li>
<li>  国际电信联盟 (ITU)</li>
<li>  美国国家标准学会 (ANSI)</li>
<li>  电气电子工程师协会 (IEEE)</li>
<li>  国家级电信管理局包括美国联邦通信委员会 (FCC) 和欧洲电信标准协会 (ETSI)。<br>除了这些组织之外，通常还有地方性布线标准组织，例如 CSA（加拿大标准协会）、CENELEC（欧洲电工标准化委员会）和 JSA/JIS（日本标准协会），开发本地规范。</li>
</ul>
<h3 id="物理组件"><a href="#物理组件" class="headerlink" title="物理组件"></a>物理组件</h3><p>物理组件是电子硬件设备、介质和其他连接器，它们用于传输用于表示位的信号。网卡、接口和连接器、线缆材料以及线缆设计等硬件组件均按照物理层的相关标准进行规定。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>编码或线路编码是一种将数据位流转换为预先定义“代码”的方法。这些代码就是位的编组，用于提供一种可预测模式，以便发送者和接收者均能识别。换句话说，编码是用于表示数字信息的方法或模式。</p>
<h3 id="信令"><a href="#信令" class="headerlink" title="信令"></a>信令</h3><p>物理层必须在介质上生成代表“1”和“0”的电信号、光信号或无线信号。<strong>表示位的方法称为信令方法。</strong> 物理层标准必须定义哪种类型的信号代表“1”，而哪种类型的信号代表“0”。这可以简单到只是改变电信号或光脉冲的级别。例如，长脉冲可能代表 1，而短脉冲可能代表 0。</p>
<h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>不同的物理介质所支持的位传输速率不同。数据传输的讨论通常都会提及带宽。带宽是介质承载数据的能力。数字带宽可以测量在给定时间内从一个位置流向另一个位置的数据量。<br>多种因素的结合，决定了网络的实际带宽：</p>
<ul>
<li>  物理介质的属性</li>
<li>  信令和检测网络信号所选用的技术<table>
<thead>
<tr>
<th><strong>带宽单位</strong></th>
<th><strong>缩写</strong></th>
<th><strong>当量</strong></th>
</tr>
</thead>
<tbody><tr>
<td>位/秒</td>
<td>bps</td>
<td>1 bps = 带宽的基本单位</td>
</tr>
<tr>
<td>千位/秒</td>
<td>Kbps</td>
<td>1 Kbps = 1,000 bps = 10^3^bps</td>
</tr>
<tr>
<td>兆位/秒</td>
<td>Mbps</td>
<td>1 Mbps = 1,000,000 bps = 10^6^ bps</td>
</tr>
<tr>
<td>千兆位/秒</td>
<td>Gbps</td>
<td>1 Gbps = 1,000,000,000 bps = 10^9^ bps</td>
</tr>
<tr>
<td>兆兆位/秒</td>
<td>Tbps</td>
<td>1 Tbps = 1,000,000,000,000 bps = 10^12^ bps</td>
</tr>
</tbody></table>
</li>
<li><strong>延迟</strong>延迟是指数据从一个给定点传送到另一给定点所用的时间，包括时延。</li>
<li><strong>吞吐量</strong>吞吐量是给定时段内通过介质传输的位的量度。</li>
<li><strong>实际吞吐量</strong>实际吞吐量是在给定时间段内传输的有用数据的衡量标准。<br>  实际吞吐量就是吞吐量减去建立会话、确认、封装和重传所产生的流量开销。<br>  实际吞吐量总是低于吞吐量，而吞吐量通常低于带宽。</li>
</ul>
<h2 id="铜缆布线"><a href="#铜缆布线" class="headerlink" title="铜缆布线"></a>铜缆布线</h2><p>网络使用铜介质是因为其价格低廉、易于安装、对电流的电阻低。但是，铜介质受到距离和信号干扰的限制。<br>在铜缆中，通过电脉冲传输数据。目的设备网络接口中的探测器接收的信号必须可成功解码为与发送的信号相符。但是，信号传输的距离越远，信号下降就越多。这称为信号衰减。因此，所有铜介质必须严格遵循指导标准所指定的距离限制。<br>电脉冲的时间和电压值易受两个干扰源的干扰：</p>
<ul>
<li>  <strong>电磁干扰 (EMI) 或射频干扰 (RFI)</strong>- EMI 和 RFI 干扰信号会扭曲和损坏通过铜介质承载的数据信号。EMI 和 RFI 的潜在来源包括无线电波和电磁设备（如荧光灯或电动机）。</li>
<li>  <strong>串扰</strong> - 串扰是一根电线中信号的电场或磁场对邻近电线中的信号造成的干扰。在电话线上，串扰会由相邻电路中另一语音会话的接听部分引起。具体而言，当电流流经电线时，会在电线周围产生一个较小的环形磁场，而相邻电线可能接收到该磁场。<br>为了应对 EMI 和 RFI 的负面影响，某些类型的铜缆会用金属屏蔽套包裹，并要求适当的接地连接。<br>为了应对串扰的负面影响，某些类型的铜缆将相反电路线对绞合在一起以有效消除串扰。<br>使用以下建议也可以限制电子噪音对铜缆的影响：</li>
<li>  选择的电缆类型或类别要适合特定的网络环境。</li>
<li>  设计电缆基础设施时应规避建筑结构中已知和潜在的干扰源。</li>
<li>  使用包括正确处理和端接电缆的布线技术。</li>
</ul>
<h3 id="非屏蔽双绞线-UTP"><a href="#非屏蔽双绞线-UTP" class="headerlink" title="非屏蔽双绞线 (UTP)"></a>非屏蔽双绞线 (UTP)</h3><p>通过 RJ-45 连接器端接的 UTP 布线用于网络主机与中间网络设备的互连，例如交换机和路由器。<br>在 LAN 中，UTP 电缆由四对用颜色标记的电线组成。这些电线绞合在一起，并用软塑料套包裹，以避免较小的物理损坏。电线的扭绞有助于防止电线之间的串扰。<br>关键特征:</p>
<ol>
<li> 外层护套可防止铜缆受到物理损坏。</li>
<li> 线对扭绞可防止信号串扰。</li>
<li> 颜色编码的塑料绝缘层使电线之间相互隔离并标识每个线对。</li>
</ol>
<h3 id="屏蔽双绞线-STP"><a href="#屏蔽双绞线-STP" class="headerlink" title="屏蔽双绞线 (STP)"></a>屏蔽双绞线 (STP)</h3><p>屏蔽双绞线 (STP) 比 UTP 布线提供更好的噪声防护。但是，与 UTP 电缆相比，STP 电缆更加昂贵而且不易安装。和 UTP 相同，STP 也使用 RJ-45 连接器。STP 电缆结合屏蔽技术来应对 EMI 和 RFI，使用线缆扭绞技术来应对串扰。为了充分利用屏蔽的优势，STP 电缆使用特殊屏蔽 STP 数据连接器进行端接。如果电缆接地不正确，屏蔽就相当于一个天线，会接听多余信号。<br>关键特征:</p>
<ol>
<li> 外层护套</li>
<li> 金属编织或箔屏蔽</li>
<li> 金属箔屏蔽</li>
<li> 双绞线</li>
</ol>
<h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><p>同轴电缆用于有线电视和互联网服务，并将天线连接到无线设备，它使用多种类型的连接器，包括BNC、N型和F型连接器。<br>虽然 UTP 电缆在现代以太网安装中最终取代了同轴电缆，但在以下情形中仍采用同轴电缆设计：</p>
<ul>
<li>  <strong>无线安装</strong> - 用同轴电缆将天线连接到无线设备。同轴电缆可传送天线和无线电设备之间的射频 (RF) 能量。</li>
<li>  <strong>有线电视互联网安装</strong> - 有线电视服务提供商为其客户提供互联网连接，他们会使用光缆替换同轴电缆和支撑放大元件部分。但是，客户所在地的布线仍采用同轴电缆。<br>关键特征:</li>
</ul>
<ol>
<li> 外层护套</li>
<li> 铜网屏蔽</li>
<li> 塑料绝缘层</li>
<li> 铜质导线</li>
</ol>
<h2 id="UTP-布线"><a href="#UTP-布线" class="headerlink" title="UTP 布线"></a>UTP 布线</h2><p>用作网络介质时，UTP电缆由四对用颜色标记的铜线组成。这些铜线扭绞在一起，并用软塑料套包裹。在安装过程中，它尺寸较小是有利的。<br>UTP 电缆并不使用屏蔽层来对抗 EMI 和 RFI 的影响。相反，电缆设计者发现他们可以通过以下方式来减少串扰的负面影响：</p>
<ul>
<li>  <strong>抵消</strong> - 电缆设计者现在对电路中的电线进行配对。当电路中的两根电线紧密排列时，彼此的磁场正好相反。因此，这两个磁场相互抵消，也抵消了所有的外部 EMI 和 RFI 干扰信号。</li>
<li>  <strong>变化每个线对中的扭绞次数</strong> - 为了进一步增强配对电线的抵消效果，设计者会变化电缆中每个线对的扭绞次数。UTP 电缆必须遵守精确的规定来管理每米（3.28 英尺）电缆所允许的扭绞次数或编织数。请注意，图中橙色/橙白色线对比蓝色/蓝白色线对的扭绞次数要少。每个彩色线对扭绞的次数不同。<br>UTP 电缆仅通过线对扭绞的抵消效果来减小信号衰减，并为网络介质中的线对提供有效的自屏蔽。</li>
</ul>
<h3 id="标准-1"><a href="#标准-1" class="headerlink" title="标准"></a>标准</h3><p>UTP 布线遵循由 TIA/EIA 共同制定的标准。具体而言，TIA/EIA-568 规定了 LAN 安装的商业布线标准，它是 LAN 布线环境中最常用的标准。<br>电气电子工程师协会 (IEEE) 定义了铜缆的电气特性。IEEE 按照它的性能对 UTP 布线划分等级。电缆分类的依据是它们承载更高速率带宽的能力。<br>-3 类电缆最初用于语音线路的语音通信，但后来用于数据传输。<br>-5 类和5e 类电缆用于数据传输。5类电缆支持 100Mbps，5e 类电缆支持 1000 Mbps<br>-6类电缆在每对线之间增加了一个分隔器以支持更高的速度。 6类电缆支持高达 10 Gbps。 -7类电缆也支持 10 Gbps。 -8类电缆支持 40 Gbps。<br>一些制造商制造的电缆超出了 TIA/EIA 6a 类电缆的规格，将其称为 7 类电缆。<br> UTP 电缆类别之间的结构差异：3类电缆有四根电线（直）。5类电缆 和 5e类电缆有四对双绞线。6类电缆(STP)有四对双绞线，每对之间都有一个塑料分隔器。</p>
<h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p><img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1644493043317.png" alt="RJ-45 UTP"></p>
<h3 id="直通和交叉UTP电缆"><a href="#直通和交叉UTP电缆" class="headerlink" title="直通和交叉UTP电缆"></a>直通和交叉UTP电缆</h3><ul>
<li>  <strong>以太网直通电缆</strong> -最常见的网络电缆类型。它通常用于主机到交换机和交换机到路由器的互连。</li>
<li>  <strong>以太网交叉电缆</strong> -用于互连相似设备的电缆。例如，交换机到交换机、主机到主机或路由器到路由器的连接。但是，由于网卡使用介质相关接口交叉（auto-MDIX）来自动检测电缆类型并进行内部连接，因此现在已将交叉电缆视为传统电缆。<table>
<thead>
<tr>
<th>电缆类型</th>
<th>标准</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>以太网直通线</td>
<td>两端均为 T568A 或两端均为 T568B</td>
<td>将网络主机连接到交换机或集线器之类的网络设备</td>
</tr>
<tr>
<td>以太网交叉线</td>
<td>一端为 T568A，另一端为 T568B</td>
<td>连接两个网络主机或连接两台网络中间设备 （交换机到交换机或路由器到路由器）</td>
</tr>
<tr>
<td>全反电缆</td>
<td>思科专有</td>
<td>使用适配器连接工作站串行端口与路由器 控制台端口。</td>
</tr>
<tr>
<td><img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1644493334397.png"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><em>蓝中间，棕右边，左绿为A橘为B，花线左但中间反</em>*</li>
</ul>
<h2 id="光纤布线"><a href="#光纤布线" class="headerlink" title="光纤布线"></a>光纤布线</h2><p>因为它是昂贵的，所以在各种类型的铜缆布线中并不常用。但是光纤布线具有某些特性，使其成为某些情况下的最佳选择<br>与其他网络介质相比，光缆能够以更远的距离和更高的带宽传输数据。不同于铜缆，光缆传输信号的衰减更少，并且完全不受 EMI 和 RFI 影响。光纤常用于互连网络设备。<br>目前光纤布线用于四类行业：</p>
<ul>
<li>  <strong>企业网络</strong> - 用于主干布线和基础设施设备互连。</li>
<li>  <strong>光纤到户 (FTTH)</strong> - 用于为家庭和小型企业提供不间断宽带服务。</li>
<li>  <strong>长距离传输网络</strong> - 由服务提供商用于连接国家/地区与城市。</li>
<li>  <strong>水下有线网络</strong> - 用于提供可靠高速、高容量的网络解决方案，使其在深度与横跨海洋的距离相当的严酷海下环境中仍能生存。在互联网上搜索“海底电缆电信地理地图”，以在线查看各种地图。</li>
</ul>
<h3 id="两种类型："><a href="#两种类型：" class="headerlink" title="两种类型："></a>两种类型：</h3><ul>
<li>单模光纤 (SMF)单模光纤包含一个极小的芯，使用昂贵的激光技术来发送单束光，如图所示。单模光纤在跨越数百公里的长距离传输情况下很受欢迎，例如应用于长途电话和有线电视中的光纤。<br>  <img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1644493679542.png" alt="enter description here"></li>
<li>多模光纤 (MMF)多模光纤包含一个稍大的芯，使用 LED 发射器发送光脉冲。具体而言，LED 发出的光从不同角度进入多模光纤，如图所示。普遍用于 LAN 中，因为它们可以由低成本的 LED 提供支持。它可以通过长达 550 米的链路提供高达 10 Gb/s 的带宽。<br>  <img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1644493708281.png" alt="enter description here"><br>多模和单模光纤之间的主要区别之一就是色散的数量。色散是指光脉冲在时间上的分布。色散增加意味着信号强度损失增加。多模光纤具有比单模光纤更大的色散。这就是为什么多模光纤在信号丢失之前只能传播 500 米。</li>
</ul>
<h3 id="光纤连接器与光纤插接线略"><a href="#光纤连接器与光纤插接线略" class="headerlink" title="光纤连接器与光纤插接线略"></a>光纤连接器与光纤插接线略</h3><p>4.5.4、4.5.5</p>
<h2 id="无线介质"><a href="#无线介质" class="headerlink" title="无线介质"></a>无线介质</h2><p>无线介质使用无线电或微波频率来承载代表数据通信二进制数字的电磁信号。<br>无线介质提供所有介质中最好的移动特性，而且启用无线的设备数量不断增加。无线现在是用户连接到家庭和企业网络的主要方式。<br>以下是无线网络的一些局限性:</p>
<ul>
<li>  <strong>覆盖面积</strong> - 无线数据通信技术非常适合开放环境。但是，在楼宇和建筑物中使用的某些建筑材料以及当地地形将会限制它的有效覆盖。</li>
<li>  <strong>干扰</strong> - 无线电易受干扰，可能会受到家庭无绳电话、某些类型的荧光灯、微波炉和其他无线通信装置等常见设备的干扰。</li>
<li>  <strong>安全性</strong> - 无线通信覆盖无需进行介质的物理接线。因此，未获得网络访问授权的设备和用户可以访问传输。所以网络安全是无线网络管理的重要组成部分。</li>
<li>  <strong>共享介质</strong> - WLAN 以半双工模式运行，意味着一台设备一次只能发送或接收。无线介质由所有无线用户共享。许多用户同时访问WLAN会导致每个用户的带宽减少。<br>虽然无线在桌面连接中逐渐普及，但铜缆和光纤仍是部署网络中间设备（如路由器和交换机）最常见的物理层介质。</li>
</ul>
<h3 id="标准-2"><a href="#标准-2" class="headerlink" title="标准"></a>标准</h3><ul>
<li>  <strong>Wi-Fi (IEEE 802.11)</strong> - 无线 LAN (WLAN) 技术，通常称为 Wi-Fi。WLAN 使用一种称为“载波侦听多路访问/冲突避免 (CSMA/CA)”的争用协议。无线 NIC 在传输数据之前必须先侦听，以确定无线信道是否空闲。如果其他无线设备正在传输，则 NIC 必须等待信道空闲。Wi-Fi 是 Wi-Fi 联盟的标记。Wi-Fi 与基于 IEEE 802.11 标准的认证 WLAN 设备结合使用。</li>
<li>  <strong>蓝牙 (IEEE 802.15)</strong> - 这是一个无线个人局域网 (WPAN) 标准，通常称为 “蓝牙”。它采用设备配对过程进行通信，距离为 1 到 100 米。</li>
<li>  <strong>WiMAX (IEEE 802:16)</strong> - 通常称为微波接入全球互通 (WiMAX)，这个无线标准采用点到多点拓扑结构，提供无线带宽接入。</li>
<li>  <strong>Zigbee (IEEE 802.15.4)</strong> - Zigbee是一种用于低数据速率、低功耗通信的规范。它适用于需要短距离、低数据速率和长电池寿命的应用。Zigbee 通常用于工业和物联网 (IoT) 环境，如无线照明开关和医疗设备数据采集。</li>
</ul>
<h3 id="常见方式-WLAN"><a href="#常见方式-WLAN" class="headerlink" title="常见方式-WLAN"></a>常见方式-WLAN</h3><p>常见的无线数据实施方式是使设备通过LAN以无线方式连接。通常，WLAN 要求具备下列网络设备：</p>
<ul>
<li>  <strong>无线接入点 (AP)</strong> - 集中用户的无线信号，并连接到现有基于铜介质的网络基础设施，如以太网。如图所示，家庭和小型企业无线路由器将路由器、交换机和接入点的功能整合到了一起。</li>
<li>  <strong>无线网卡适配器</strong> - 能够为每台网络主机提供无线通信。<br>随着技术的发展，许多以太网 WLAN 标准应运而生。在购买无线设备时，必须确保它的兼容性和互操作性。<br>无线数据通信技术的益处是显而易见的，尤其是节省了昂贵的房屋布线，而且方便主机移动。网络管理员必须制定和应用严格的安全策略和流程保护WLAN，防止网络遭受不速之客的访问和破坏。</li>
</ul>
<h1 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h1><p>物理层负责通过物理介质将实际信号作为<strong>位</strong>传输。<br>交换帧、控制介质访问和执行错误检测都是数据链路层的功能。</p>
<p>帧编码会将<strong>位</strong>转化为预定义的代码，以便提供一种可预测模式，帮助区分数据位和控制位。</p>
<ul>
<li>  数据 - 一般术语，泛指应用层使用的 PDU</li>
<li>  段 - 传输层 PDU</li>
<li>  数据包 - 网络层 PDU</li>
<li>  帧 - 数据链路层 PDU</li>
<li>  位 - 通过介质实际传输数据时使用的物理层 PDU</li>
</ul>
<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>OSI模型的数据链路层(第2层)为物理网络准备网络数据。数据链路层负责网络接口卡 (NIC) 到网络接口卡的通信。数据链路层执行以下操作：</p>
<ul>
<li>  允许上层访问介质。上层协议完全不知道用于转发数据的介质类型。</li>
<li>  接受数据，通常是第 3 层数据包（即 IPv4 或 IPv6），并将它们封装到第 2 层帧中。</li>
<li>  控制数据在介质上的放置和接收方式，</li>
<li>  通过网络介质在终端之间交换帧。</li>
<li>  接收封装的数据，通常是第 3 层数据包，并将它们定向到适当的上层协议。</li>
<li>  执行错误检测并拒绝任何损坏的帧。</li>
</ul>
<h2 id="IEEE-802LAN-MAN-数据链路子层"><a href="#IEEE-802LAN-MAN-数据链路子层" class="headerlink" title="IEEE 802LAN/MAN 数据链路子层"></a>IEEE 802LAN/MAN 数据链路子层</h2><ul>
<li><strong>逻辑链路控制 (LLC)</strong> - 这个 IEEE 802.2 子层在<strong>上层的网络软件与下层的设备硬件之间进行通信</strong>。它放入帧中的信息用于<strong>确定帧所使用的网络层协议</strong>。此信息允许多个第 3 层协议（如 IPv4 和 IPv6）使用相同的网络接口和介质。<pre><code>LLC 子层获取网络协议数据（通常是 IPv4 或 IPv6数据包）并加入第2层控制信息，帮助将数据包传送到目的节点。 
</code></pre>
</li>
<li><strong>介质访问控制 (MAC)</strong> - 在硬件上实现这个子层（IEEE 802.3、802.11 或 802.15）。<strong>它负责数据封装和介质访问控制</strong>。<strong>它提供数据链路层寻址</strong>，并与各种物理层技术集成。<pre><code>MAC子层控制网卡和负责在有线或无线LAN/MAN介质上发送和接收数据的其他硬件。
MAC 子层提供数据封装：
*   **帧定界** - 在成帧过程中提供重要的定界符，用来标识帧中的字段。这些定界符位可以在发送节点与接收节点之间提供同步。
*   **编址** - 提供源和目的编址，用于在同一共享介质上的设备之间传输第 2 层帧。
*   **错误检测** - 包含一个帧尾，用于检测传输错误。
MAC 子层还提供介质访问控制，允许多个设备通过共享（半双工）介质进行通信。全双工通信不需要访问控制。
</code></pre>
</li>
</ul>
<h3 id="介质访问方法"><a href="#介质访问方法" class="headerlink" title="介质访问方法"></a>介质访问方法</h3><p>在数据包从本地主机传送到远程主机的过程中，其遇到的各种网络环境可能具有不同的特性。对于串行链路，访问方法可能只包括两个设备之间的直接连接，通常是两个路由器。因此，它们不需要 IEEE 802 MAC 子层所使用的技术。<br>使用合适的介质访问控制方法来访问每个链路。<br>确定所使用的介质访问控制方法的两个条件是所涉及的<strong>介质共享类型</strong>和<strong>拓扑</strong>。<br>在路径上的每一跳，路由器都执行以下第 2 层功能：</p>
<ol>
<li> 从介质接受帧</li>
<li> 解封帧</li>
<li> 将数据包重新封装到新帧中</li>
<li> 从适合该物理网络网段的介质转发新帧</li>
</ol>
<h2 id="数据链路层标准"><a href="#数据链路层标准" class="headerlink" title="数据链路层标准"></a>数据链路层标准</h2><p>与 TCP/IP 的上层协议不同，数据链路层协议通常不是由征求意见 (RFC) 文档定义的。互联网工程任务组 (IETF) 虽然维护着 TCP/IP 协议簇上层的工作协议和服务，但它没有定义TCP/IP模型的网络接入层的功能和操作。<br>定义适用于网络接入层（即，OSI的物理和数据链路层）的开放标准和协议的工程组织包括：</p>
<ul>
<li>  电气电子工程师协会 (IEEE)</li>
<li>  国际电信联盟 (ITU)</li>
<li>  国际标准化组织 (ISO)</li>
<li>  美国国家标准学会 (ANSI)</li>
</ul>
<h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><ul>
<li>  <strong>物理拓扑</strong> - 标识物理连接，以及终端设备和中间设备（即，路由器、交换机和无线接入点）如何互连。这个拓扑还可能包括特定的设备位置，如房间号和设备机架上的位置。物理拓扑通常是点对点拓扑或星型拓扑。</li>
<li>  <strong>逻辑拓扑</strong> - 是指网络将帧从一个节点传输到另一节点的方法。此拓扑使用设备接口和第 3 层 IP 寻址方案识别虚拟连接。</li>
</ul>
<h3 id="访问控制方法"><a href="#访问控制方法" class="headerlink" title="访问控制方法"></a>访问控制方法</h3><ul>
<li><strong>基于竞争的访问</strong>-在基于竞争的多路访问网络中，所有节点都工作在半双工方式，争夺介质的使用。然而，一次只有一台设备能够发送。因此，当多台设备同时传输时，会使用一个处理过程。基于竞争的访问方法示例如下：<ul>
<li>在传统总线拓扑以太网局域网上使用<strong>载波侦听多路访问/冲突检测</strong>(CSMA/CD)</li>
<li>在无线局域网上使用<strong>载波侦听多路访问/冲突避免</strong>(CSMA/CA)</li>
</ul>
</li>
<li><strong>受控访问</strong>-在基于控制的多路访问网络中，每个节点都有自己的时间来使用介质。这种确定性的传统网络类型效率很低，因为设备必须等到轮到自己才能访问介质。使用受控访问的多路访问网络的示例包括：<ul>
<li>传统令牌环</li>
<li>传统ARCNET</li>
</ul>
</li>
<li>如今，以太网网络以全双工方式运行，不需要访问方法。使用交换机的以太网 LAN 不使用基于竞争的系统，因为交换机和主机网卡在全双工模式下运行。无线局域网 (WLAN)只支持半双工，因为同一时间只有一台设备可以访问介质。</li>
</ul>
<h2 id="数据链路帧"><a href="#数据链路帧" class="headerlink" title="数据链路帧"></a>数据链路帧</h2><p>虽然有许多描述数据链路层帧的不同数据链路层协议，但每种帧均有三个基本组成部分：</p>
<ul>
<li>  帧头</li>
<li>  数据</li>
<li>  帧尾<br>成帧技术将位流拆分成可破解的多个分组，且将控制信息作为不同字段值插入帧头和帧尾中。此格式使物理信号具备能被节点识别且可在目的地解码成数据包的一种结构。<br>图中显示了通用帧字段。并非所有协议均包含全部此类字段。特定数据链路协议的标准定义了实际帧格式。<br><img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1645012614617.png"><br>帧字段包括以下内容：</li>
<li>  <strong>帧开始和停止指示标志</strong> - 用于标识帧的开始和结束位置的限制。</li>
<li>  <strong>编址</strong> - 表示介质上的源节点和目的节点。</li>
<li>  <strong>类型</strong> - 用于标识数据字段中的第 3 层协议。</li>
<li>  <strong>控制</strong> - 用于标识特殊流量控制服务，比如服务质量 (QoS)。QoS 为某些类型的消息提供转发优先权。例如，IP 语音 (VoIP) 帧通常优先接收，因为它们对延迟敏感。</li>
<li>  <strong>数据</strong> - 包含帧负载（即数据包报头、数据段报头和数据）。</li>
<li>  <strong>错误检测</strong> - 包含在数据之后以形成帧尾。<br>数据链路层协议将帧尾添加到各帧结尾处。在一个叫做错误检测的过程中，帧尾会判断帧是否到达时没有错误。它将组成帧的各个位的逻辑或数学摘要放入帧尾中。要将错误检测添加到数据链路层，因为介质中的信号可能遭受干扰、失真或丢失，从而大幅更改这些信号所代表的位值。<br>发送节点会创建帧内容的逻辑摘要，称为循环冗余校验 (CRC) 值。此值将放入帧校验序列 (FCS) 字段中以代表帧内容。在以太网尾部，FCS 为接收节点提供一种方法，用于确定帧是否出现传输错误。<br>数据链路层向第3层数据包添加一个包含源和目的第2层地址的<strong>帧头</strong>和一个包含帧检查序列(FCS)的<strong>帧尾</strong>。</li>
</ul>
<h1 id="查漏补缺-1"><a href="#查漏补缺-1" class="headerlink" title="查漏补缺"></a>查漏补缺</h1><p>以太网帧在数据链路层由它们的MAC地址来标识，每个网卡的地址都是唯一的<br> MAC 子层的功能：提供数据链路层编址，检查位错误，支持以太网技术，由硬件执行控制对介质的访问<br>数据链路层接受第3层的数据包并将它们封装到称为帧的数据单元中</p>
<h1 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h1><p>以太网标准同时定义第 2 层协议和第 1 层技术。<br>以太网在数据链路层和物理层运行，是 IEEE 802.2 和 802.3 标准中定义的一系列网络技术。</p>
<h2 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h2><p>以太网帧大小的最小值为 64 个字节，最大值为 1518 个字节。这包括从“目的 MAC 地址”字段到“帧校验序列 (FCS)”字段的所有字节。在描述帧的大小时，不包含“前导码”字段。<br><img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1645186890628.png"><br>| 字段 | 说明 |<br>| — | — |<br>| 前导码和帧首定界符字段(SFD) | 前导码（7 字节）和帧首定界符（SFD），也称为 帧首（1 字节），该字段用于发送设备 与接收设备之间的同步。帧开头的八个字节 用于引起接收节点的注意。基本上，前几个字节的 作用是告诉接收方准备接收新帧。 |<br>| 目的 MAC 地址字段 | 该 6 字节字段是预期接收方的标识符。读者应该还记得， 此地址被第2层用来协助设备 确定帧是否发送到目的地。帧中的地址将会与设备中的 MAC 地址进行比对。如果匹配， 设备就接受该帧。可以是单播、组播或广播 地址。 |<br>| 源 MAC 地址字段 | 该 6 字节字段标识发出帧的网卡 或接口。 |<br>| 类型/长度 | 该字段包含两个字节，标识封装于以太网帧中的 上层协议。常见值为十六进制，0x800 用于 IPv4， 0x86DD 用于 IPv6，0x806 用于 ARP。<br><strong>注意</strong>：您也可能会看到此字段称为 EtherType、类型或长度。 |<br>| 数据字段 | 该字段（46-1500 字节）包含来自 较高层的封装数据，一般是第3层PDU或更常见的IPv4 数据包。所有帧至少必须有 64 个字节。如果封装的是小数据包， 则使用填充位将帧 增大到最小值。 |<br>| 帧校验序列字段 | “帧校验序列 (FCS)”字段（4 个字节）用于检测帧中 的错误。它使用循环冗余校验 (CRC)。发送设备 在帧的 FCS 字段中包含 CRC 的结果。接收设备 接收帧并生成 CRC 以查找 错误。如果计算匹配，就不会发生错误。计算 不匹配则表明数据已经改变。因此， 帧会被丢弃。数据的变化可能是 由于代表比特位的电信号受到干扰所致。 |</p>
<h2 id="以太网MAC地址"><a href="#以太网MAC地址" class="headerlink" title="以太网MAC地址"></a>以太网MAC地址</h2><p>在以太网中，每台网络设备都连接到同一个共享介质。MAC 地址用于标识本地网段上的物理源和目的设备。MAC 编址为 OSI 模型的数据链路层提供了设备识别方法。<br>以太网 MAC 地址是使用 12个十六进制数字表示的 48 位地址，一个字节等于 8 位，也可以说 一个MAC 地址长度为 6 个字节。<br>所有 MAC 地址对于以太网设备或以太网接口必须是唯一的。为了确保这一点，所有销售以太网设备的供应商必须向 IEEE 注册才能获得唯一的 6个十六进制（即 24 位或 3 字节）代码，称为组织唯一标识符 (OUI)。使用其分配的 OUI 作为前 6 个十六进制数字。为后 6 个十六进制数字分配唯一值。<br><img src="/2022/02/10/%E7%BD%91%E7%BB%9C/ITN4-7/1645188061139.png" alt="enter description here"><br>MAC 地址通常称为烧录地址 (BIA)，因为传统上该地址被烧录到网卡的只读存储器（ROM）中。这意味着该地址会永久编码到 ROM 芯片中。<br>收到以太网帧时，网卡会查看帧中的目的 MAC 地址是否与设备 RAM 中存储的物理 MAC 地址匹配。如果不匹配，设备就会丢弃帧。如果与帧中的目的 MAC 匹配，则网卡会将帧向上传送到 OSI 层进行解封处理。</p>
<p>IPv4 目的地址为<strong>广播</strong>地址 <strong>192.168.1.255</strong>。<br>当封装数据为IPv4<strong>组播</strong>包时，目的MAC地址为<strong>01-00-5E</strong>;当封装数据为IPv6组播包时，目的MAC地址为<strong>33-33</strong>。</p>
<h2 id="MAC地址表"><a href="#MAC地址表" class="headerlink" title="MAC地址表"></a>MAC地址表</h2><p>交换机通过检查端口传入帧的源 MAC 地址来动态构建 MAC 地址表。交换机通过匹配帧中的目的 MAC 地址与 MAC 地址表中的条目来转发帧。<br>如果目的 MAC 地址为单播地址，该交换机会看帧中的目的 MAC 地址与 MAC 地址表中的条目是否匹配。如果表中存在该目的MAC地址，交换机会从指定端口转发帧。如果表中不存在该目的MAC地址，交换机会从除传入端口外的所有端口转发帧。这称为未知单播。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><h3 id="存储转发交换"><a href="#存储转发交换" class="headerlink" title="存储转发交换"></a>存储转发交换</h3><p>这个帧转发的方法接收整个帧并计算CRC。CRC 根据帧中的比特位为 1 的位数量，使用数学公式来确定收到的帧是否有错。如果 CRC 有效，则交换机查找目的地址，目的地址决定了转发接口。帧然后从正确的端口转发出去。<br>存储转发交换的一大优点是，它可以在传播帧之前确定帧是否有错误。当在帧中检测到错误时，交换机丢弃该帧。丢弃有错的帧可减少损坏的数据所耗用的带宽量。存储转发交换对于融合网络中的服务质量 (QoS) 分析是必需的</p>
<h3 id="直通交换"><a href="#直通交换" class="headerlink" title="直通交换"></a>直通交换</h3><p>在直通交换中，交换机在收到数据时立即处理数据，即使传输尚未完成。交换机只缓冲帧的一部分，缓冲的量仅足以读取目的 MAC 地址，以便确定转发数据时应使用的端口。<br>直通交换有两种变体：</p>
<ul>
<li>  <strong>快速转发交换</strong> -  快速转发交换提供最低程度的延时。快速转发交换在读取目的地址之后立即转发数据包。由于快速转发交换在收到整个数据包之前就开始转发，因此有时候中继数据包时会出错。这种情况并不经常发生，而且目的网络适配器在收到含错数据包时会将其丢弃。在快速转发模式下，延时是指从收到第一个位到传出第一个位之间的时间差。快速转发交换是典型的直通交换方法。</li>
<li>  <strong>免分片交换 -</strong>  在免分片交换中，交换机在转发之前存储帧的前 64 个字节。可以将免分片交换视为存储转发交换和直通交换之间的折衷。免分片交换只存储帧的前 64 个字节的原因是，大部分网络错误和冲突都发生在前 64 个字节。免分片交换在转发帧之前对帧的前 64 个字节执行小错误检查以确保没有发生过冲突，并且尝试通过这种方法来增强快速转发交换功能。免分片交换是存储转发交换的高延时和高完整性与快速转发交换的低延时和弱完整性之间的折衷。</li>
</ul>
<h3 id="交换机上的内存缓冲"><a href="#交换机上的内存缓冲" class="headerlink" title="交换机上的内存缓冲"></a>交换机上的内存缓冲</h3><p>以太网交换机在转发帧之前，可以使用缓冲技术存储帧。当目的端口由于拥塞而繁忙时，也可以使用缓冲。交换机将帧存储起来，直到可以传输。<br>| 方法 | 描述 |<br>| — | — |<br>| <strong>基于端口的内存</strong> | </p>
<ul>
<li>  帧存储在链接到特定传入端口和传出 端口的队列中。</li>
<li>  只有当队列前面的所有帧都成功传输后， 才会将帧传输到传出端口。</li>
<li>  由于目地端口繁忙， 单个帧可能会造成内存中所有帧的传输延迟。</li>
<li>即使其他帧可以传送到开放的目的端口， 这种延迟仍然会发生。<br>|<br>| <strong>共享内存</strong> | </li>
<li>  将所有帧存储到由所有交换端口共享的公共内存缓冲区中， 并且动态分配一个端口所需的 缓冲区内存量。</li>
<li>缓冲区中的帧动态地链接到目的端口， 允许在一个端口上接收数据包，然后 在另一个端口上发送，而无需移动到另一个队列。<br>|</li>
</ul>
<h3 id="自动协商"><a href="#自动协商" class="headerlink" title="自动协商"></a>自动协商</h3><p> 交换机上最基本的两个设置是带宽(有时称为“速率”)和每个交换机端口的双工设置。交换机端口和连接的设备（例如计算机或另一台交换机）的双工设置和带宽设置必须匹配。<br> 当链路上的一个或两个端口被重置时，会发生双工不匹配，自动协调过程并不会使链路上的两个端口的配置相同。当用户重新配置链路的一端而忘记重新配置另一端时，也会出现这样的情况。链路的两端均应都使用或都不使用自动协商。最佳实践是将两个以太网交换端口都配置为全双工。</p>
<h3 id="Auto-MDIX"><a href="#Auto-MDIX" class="headerlink" title="Auto-MDIX"></a>Auto-MDIX</h3><p> 大多数交换机设备都支持自动介质相关接口交叉 (auto-MDIX) 功能。当该功能启用时，交换机可检测连接到端口的线缆类型，并相应地配置接口。因此，如果要连接到交换机上的铜缆 10/100/1000 端口，您既可以使用交叉线，也可以使用直通线，而无需考虑连接另一端的设备类型。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ITN 8-10</title>
    <url>/2022/02/28/%E7%BD%91%E7%BB%9C/ITN8-10/</url>
    <content><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>IP 版本 4 (IPv4) 和 IP 版本 6 (IPv6) 是主要的网络层通信协议。其他网络层协议包括路由协议，如开放式最短路径优先协议(OSPF)，和消息传递协议，如Internet控制消息协议(ICMP)。</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>为了实现跨网络边界的端到端通信，网络层协议执行四个基本操作:</p>
<ul>
<li>  <strong>终端设备编址</strong> - 必须为终端设备配置唯一的 IP 地址，以便在网络上进行识别。</li>
<li>  <strong>封装</strong> - 网络层将来自传输层的协议数据单元 (PDU) 封装到数据包中。封装过程中会添加 IP 报头信息，例如来源（发送）和目的（接收）主机的 IP 地址。封装过程由 IP 数据包的源主机执行。</li>
<li>  <strong>路由</strong> - 网络层提供服务，将数据包转发至另一网络上的目的主机。要传送到其他网络，数据包必须经过路由器的处理。路由器的作用是为数据包选择最佳路径，并将其转发至目的主机，该过程称为路由。数据包可能需要经过很多路由器才能到达目的主机。数据包在到达目的主机的过程中经过的每个路由器均称作一跳。</li>
<li>  <strong>解封</strong> - 当数据包到达目的主机的网络层时，主机会检查数据包的 IP 报头。如果在报头中的目的 IP 地址与其自身的 IP 地址匹配，IP 报头将被会从数据包中删除。网络层解封数据包后，后继的第 4 层 PDU 会向上传递到传输层的相应服务。解封过程由 IP 数据包的目的主机执行。</li>
</ul>
<h3 id="IP封装"><a href="#IP封装" class="headerlink" title="IP封装"></a>IP封装</h3><p>IP 通过添加 IP 报头将传输层数据段或其他数据进行封装。IP报头用于将数据包传送到目的主机。<br>路由器实施路由协议以在网络之间路由数据包。这些中间设备所执行的路由进程会检查数据包报头中的网络层地址。在任何情况下，数据包的数据部分，即封装的传输层 PDU或其他数据，在网络层的各个过程中都保持不变。</p>
<h3 id="IP特征"><a href="#IP特征" class="headerlink" title="IP特征"></a>IP特征</h3><p>IP 被设计为一种低开销协议只提供通过互连的网络系统从源主机向目的主机传送数据包所必需的功能。该协议并不负责跟踪和管理数据包的流动。<br>IP的基本特征：</p>
<ul>
<li>  <strong>无连接</strong> - 发送数据包前不与目的地建立连接。</li>
<li>  <strong>尽力而为</strong> - IP本质上是不可靠的，因为不保证数据包交付。</li>
<li>  <strong>介质无关性</strong> - 其工作与传输数据的介质（即铜缆、光纤或无线）无关。但是网络层会考虑介质的一个重要特征：每种介质可以传输的最大 PDU 大小。此特征称为最大传输单位 (MTU)。数据链路层为网络层指示所用介质的 MTU</li>
</ul>
<h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><p>IPv4 数据包报头是由包含重要数据包信息的字段组成。这些字段中包含的二进制数字由第 3 层进程进行检查。<br>图中所示的 IP 协议报头图标识了 IPv4 数据包中的字段。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN8-10/1645441397036.png"><br>IPv4 <strong>报头</strong>中的重要字段包括以下：</p>
<ul>
<li>  <strong>版本 -</strong> 包含一个 4 位二进制值 0100，<strong>用于</strong>标识这是 IPv4 数据包。</li>
<li>  <strong>差分服务或区分服务 (DS) -</strong> 以前称为服务类型 (ToS) 字段，DS 字段是一个 8 位字段，<strong>用于</strong>确定每个数据包的优先级。DiffServ 字段的六个最高有效位是区分服务代码点 (DSCP)位，而后两位是显式拥塞通知 (ECN) 位。</li>
<li>  <strong>报头校验和 -</strong> 这<strong>用于</strong>检测 IPv4 报头中的损坏。</li>
<li>  <strong>生存时间 (TTL) -</strong> TTL包含一个 8 位二进制值，<strong>用于</strong>限制数据包的生命周期。IPv4 数据包的源设备设置初始 TTL 值。当数据包每被路由器处理一次，数值就减少一。如果 TTL 字段的值减为零，则路由器将丢弃该数据包并向源 IP 地址发送互联网控制消息协议 (ICMP) 超时消息。由于路由器减少每个数据包的 TTL，因此路由器也必须重新计算报头校验和。</li>
<li>  <strong>协议 -</strong> 该字段<strong>用于</strong>标识下一级协议。此 8 位二进制值表示数据包包含的数据负载类型，使网络层将数据传送到相应的上层协议。常用的值包括 ICMP (1)、TCP (6) 和 UDP (17)。</li>
<li>  <strong>源 IPv4 地址 -</strong> 包含表示数据包源 IPv4 地址的 32 位二进制值。源 IPv4 地址始终为单播地址。</li>
<li>  <strong>目的 IPv4 地址 -</strong> 包含 32 位二进制值，表示数据包的目的 IPv4 地址。目的 IPv4 地址为单播、组播或广播地址。</li>
<li>  <strong>互联网报头长度</strong> (IHL)、<strong>总长度</strong>和<strong>报头校验和</strong>字段均<strong>用于</strong>识别和验证数据包。</li>
<li>  具体而言，IPv4 数据包使用标识符、标志和片偏移量字段跟踪分段。路由器从一种介质向具有较小 MTU(最大传输单元) 的另一种介质转发IPv4数据包时必须将它分片。</li>
</ul>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p>IPv4 三个重要问题：</p>
<ul>
<li>  <strong>IPv4地址耗尽</strong> - IPv4 的可用唯一公有地址数量有限。尽管有大约 40 亿(32位)的 IPv4 地址，但是支持 IP 的新设备数量的不断增加，以及始终在线的连接的增加，和欠发达地区的潜在连接的增加，不断催生更多的地址需求。</li>
<li>  <strong>缺乏端到端连接</strong> - 网络地址转换 (NAT) 是 IPv4 网络中经常实施的一项技术。NAT 为多种设备共享单一的公有 IPv4 地址提供方法。但是，因为共享了公有 IPv4 地址，内部网络主机的 IPv4 地址会隐藏起来。这会给需要端到端连接的技术造成难题。</li>
<li>  <strong>增加的网络复杂性</strong> - 虽然NAT延长了IPv4的寿命，但它只是作为一种过渡到IPv6的机制。NAT在其各种实施中增加了网络的复杂性，从而造成延迟并使故障排除更加困难。<br>IPv6 的功能提升包括：</li>
<li>  <strong>更大的地址空间</strong> - IPv6 地址基于 128 位分层编址，而 IPv4 采用的是 32 位。</li>
<li>  <strong>改进数据包处理过程</strong> - IPv6 报头简化为更少的字段。</li>
<li>  <strong>消除了对 NAT 的需求</strong> - 有了数额如此巨大的公有 IPv6 地址，私有 IPv4 地址和公有 IPv4 地址之间不再需要 NAT。这可避免需要端到端连接的应用程序遇到某些由 NAT 引起的故障。</li>
</ul>
<h3 id="报头"><a href="#报头" class="headerlink" title="报头"></a>报头</h3><p><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN8-10/1645442014282.png"><br>IPv6 数据包报头中的字段包括以下：</p>
<ul>
<li>  <strong>版本</strong> - 此字段包含一个 4 位二进制值 0110，<strong>用于</strong>标识这是 IPv6 数据包。</li>
<li>  <strong>流量类别</strong> - 此 8 位字段<strong>相当于</strong>IPv4 区分服务 (DS)字段。</li>
<li>  <strong>流标签</strong> - 此 20 位字段建议所有含相同流标签的数据包接受相同类型的路由器处理。</li>
<li>  <strong>负载长度</strong> - 此 16 位字段<strong>表示</strong> IPv6 数据包的数据部分或负载的长度。这不包括 IPv6 报头的长度，它是固定的 40 字节报头。</li>
<li>  <strong>下一报头</strong> - 此 8 位字段<strong>相当于</strong>“IPv4 协议”字段。它表示数据包传送的数据负载类型，使网络层将数据传送到相应的上层协议。</li>
<li>  <strong>跳数限制</strong> - 此 8 位字段<strong>取代</strong> IPv4 的 TTL 字段。每个转发数据包的路由器均会使此数值减一。当跳数达到 0 时，会丢弃此数据包，并且会向发送主机转发 ICMPv6 超时消息。这表明包没有到达目的地，因为超出了跳数限制。与 IPv4 不同，IPv6 不包括 IPv6 报头校验和，因为此功能同时在下层和上层执行。这意味着校验和不需要在每个路由器降低跳数限制字段时重新计算，这也提高了网络性能。</li>
<li>  <strong>源 IPv6 地址</strong> - 此 128 位字段用于标识发送主机的 IPv6 地址。</li>
<li>  <strong>目的 IPv6 地址</strong> - 此 128 位字段用于标识接收主机的 IPv6 地址。<br>IPv6 数据包还可能包含扩展报头 (EH)，以便提供可选的网络层信息。扩展报头为可选项，位于 IPv6 报头及负载之间。EH 用于分段、安全性、移动性支持等。<br>与 IPv4 不同，路由器不会对路由的 IPv6 数据包进行分段。</li>
</ul>
<h2 id="主机路由方式"><a href="#主机路由方式" class="headerlink" title="主机路由方式"></a>主机路由方式</h2><p>对于IPv4和IPv6，数据包总是在源主机上创建，为此主机终端设备将创建自己的路由表。<br>主机可以将数据包发送至如下：</p>
<ul>
<li>  <strong>主机自己</strong> - 主机可以通过向特定的地址发送数据包来向自己发起ping测试，这个<strong>特定的地址</strong>是：IPv4地址127.0.0.1，或者IPv6地址 ::1，它被称为环回接口。对环回接口执行 ping 操作可以测试主机上的 TCP/IP 协议堆栈。</li>
<li>  <strong>本地主机</strong>- 目的主机与发送主机位于同一本地网络。源和目的主机共享同一个网络地址。</li>
<li>  <strong>远程主机</strong> - 这是位于远程网络上的目的主机。源和目的主机不共享同一个网络地址。<br>数据包是要发送到本地主机还是远程主机是由源端设备决定的。源端设备确定目的 IP 地址是否与源设备本身所在的网络相同。确定方法因 IP 版本不同而异：</li>
<li>  <strong>在 IPv4 中</strong> -源设备使用自己的子网掩码以及自己的 IPv4 地址和目的 IPv4 地址来进行此判断。</li>
<li>  <strong>在 IPv6 中</strong> -本地路由器将本地网络地址（前缀）通告给网络上的所有设备。</li>
</ul>
<h3 id="默认网关"><a href="#默认网关" class="headerlink" title="默认网关"></a>默认网关</h3><p>默认网关是可以将流量路由到其他网络的网络设备，通常是具有以下功能的路由器：</p>
<ul>
<li>  它拥有与本地网络其他主机位于相同地址范围的本地 IP 地址。</li>
<li>  它可以接受数据到本地网络，并将数据转发出本地网络。</li>
<li>  它向其他网络路由流量。<br>主机的路由表通常包括默认网关。在IPv4中，主机通过动态主机配置协议 (DHCP) 动态接收默认网关 IPv4 地址，或者通过手动配置。在 IPv6 中，路由器通告默认网关地址，或者可以在主机上手动配置。<br>配置默认网关会在 PC 的路由表中创建一个默认路由。默认路由是计算机尝试联系远程网络时所用的路由或路径。<br>PC1 和 PC2 都会使用默认路由将去往远程网络的所有流量发送到 R1。</li>
</ul>
<h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>路由表存储三种类型的路由条目：</p>
<ul>
<li>  <strong>直连网络-</strong> 这些网络路由条目是活动的路由器接口。当接口配置了 IP 地址并激活时，路由器会添加直连路由。每个路由器接口均连接到一个不同的网段。在图中，R1 IPv4路由表中的直连网络为192.168.10.0/24和209.165.200.224/30。</li>
<li>  <strong>远程网络</strong> - 这些网络路由条目连接到其他路由器。路由器通过由管理员明确配置或使用动态路由协议交换路由信息来学习远程网络。在图中，R1 IPv4路由表中的远程网络为10.1.1 /24。</li>
<li>  <strong>默认路由</strong> -像主机一样，大多数路由器还包含默认路由条目，即默认网关。当IP路由表中没有更好(更长)的匹配时，将使用默认路由。在图中，R1 IPv4路由表很可能包含一个将所有数据包转发到路由器R2的默认路由。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN8-10/1645444562285.png"></li>
</ul>
<h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>静态路由是手动配置的路由条目。如果网络拓扑改变，静态路由不会自动更新<br>静态路由具有以下特征：</p>
<ul>
<li>  必须手动配置静态路由。</li>
<li>  如果拓扑发生变化，且静态路由不再可用，则管理员需要重新配置静态路由。</li>
<li>  静态路由适用于小型网络且当冗余链路很少或没有冗余链路的情况。</li>
<li>  静态路由通常与动态路由协议一起用于配置默认路由。<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3>动态路由协议可让路由器从其他路由器那里自动学习远程网络，包括默认路由。如果使用动态路由协议，则路由器无需网络管理员的参与，即可自动与其它路由器共享路由信息并对拓扑结构的变化作出反应。如果网络拓扑发生变化，路由器将使用动态路由协议共享此信息，并自动更新路由表。<br>动态路由协议包括<strong>OSPF</strong>和增强型内部网关路由协议 (<strong>EIGRP</strong>)。<br>动态路由协议将自动执行如下操作：</li>
<li>  发现远程网络</li>
<li>  维护最新路由信息</li>
<li>  选择通往目的网络的最佳路径</li>
<li>  当前路径无法再使用时尝试找出新的最佳路径<br>通常一些路由器会同时使用静态路由和动态路由协议。</li>
</ul>
<h3 id="路由表命令"><a href="#路由表命令" class="headerlink" title="路由表命令"></a>路由表命令</h3><p>在 Windows 主机上，使用route print或命netstat -r令可以显示主机路由表。<br>特权 EXEC 模式命令 <strong>show ip route</strong> 用于查看思科 IOS 路由器上的 IPv4 路由表。每个路由表条目的开头都有一个代码，用于标识路由的类型或路由的学习方式。常见路由源（代码）包括以下内容：</p>
<ul>
<li>  <strong>L</strong> - 直连的本地接口 IP 地址</li>
<li>  <strong>C</strong> - 直连网络</li>
<li>  <strong>S</strong> - 静态路由由管理员手动配置</li>
<li>  <strong>O</strong> - OSPF</li>
<li>  <strong>D</strong> - EIGRP</li>
</ul>
<h1 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析"></a>地址解析</h1><p>有时，主机必须发送消息，但它只知道目的设备的 IP 地址。主机需要知道该设备的MAC地址，但是如何才能发现它呢? 这就是地址解析变得至关重要的地方。</p>
<h2 id="MAC-和-IP"><a href="#MAC-和-IP" class="headerlink" title="MAC 和 IP"></a>MAC 和 IP</h2><ul>
<li>物理地址（MAC 地址） – 用于同一网络上的以太网网卡之间的通信。</li>
<li>逻辑地址（IP地址） – 用于将数据包从源设备发送到目的设备。目的IP地址可能与源地址在同一个IP网络上，也可能在远程网络上<br>数据流中 IP 数据包的 IP 地址如何与通往目的地路径中每条链路上的 MAC 地址相关联？对于IPv4数据包，这可以通过地址解析协议 (ARP) 过程来完成。对于IPv6数据包，这个过程是ICMPv6邻居发现(ND)。</li>
</ul>
<h2 id="⁪ARP"><a href="#⁪ARP" class="headerlink" title="⁪ARP"></a>⁪ARP</h2><p>设备使用地址解析协议(ARP)来确定一个已知 IPv4 地址的本地设备的目的MAC地址。当数据包发送到要封装入以太网帧的数据链路层时，设备将参照其内存中的表来查找映射至 IPv4 地址的 MAC 地址。此表临时存储在RAM内存中，称为 ARP 表或 ARP 缓存。<br>ARP 提供两个基本功能：</p>
<ul>
<li>  将 IPv4 地址解析为 MAC 地址</li>
<li>  维护IPv4到MAC地址映射表</li>
</ul>
<h3 id="ARP请求与应答"><a href="#ARP请求与应答" class="headerlink" title="ARP请求与应答"></a>ARP请求与应答</h3><p>如果设备找到 IPv4 地址，其相应的 MAC 地址将作为帧中的目的 MAC 地址。如果找不到该条目，设备会发送一个 ARP 请求。<br>ARP 请求使用以下帧头信息封装在以太网帧中：</p>
<ul>
<li>  <strong>目的 MAC 地址</strong> – 这是一种要求 LAN 上的所有以太网网卡接受并处理 ARP 请求的广播地址FF-FF-FF-FF-FF-FF。</li>
<li>  <strong>源 MAC 地址</strong> – 这是ARP请求发送方的MAC地址。</li>
<li>  <strong>类型</strong> - ARP 消息的类型字段为 0x806。该类型字段会通知接收网卡需要将帧的数据部分传递给 ARP 进程处理。<br>只有具有与ARP请求相应的目的IPv4地址的设备才会以ARP应答做出响应。ARP 应答使用以下帧头信息封装在以太网帧中：</li>
<li>  <strong>目的 MAC 地址</strong> – 这是ARP请求发送方的MAC地址。</li>
<li>  <strong>源 MAC 地址</strong> – 这是ARP应答发送方的MAC地址。</li>
<li>  <strong>类型</strong> – ARP 消息的类型字段为 0x806。该类型字段会通知接收网卡需要将帧的数据部分传递给 ARP 进程处理。<br>只有原始发送 ARP 请求的设备会收到单播 ARP 应答。收到该 ARP 应答后，设备会将 IPv4 地址及相应的 MAC 地址添加到自身的 ARP 表中。</li>
</ul>
<h3 id="ARP表的删除"><a href="#ARP表的删除" class="headerlink" title="ARP表的删除"></a>ARP表的删除</h3><p>对于每台设备，ARP 缓存定时器将会删除在指定时间内未使用的 ARP 条目。时间根据设备的操作系统不同而不同。例如，较新的 Windows 操作系统将 ARP 表条目存储 15 秒到 45 秒之间，如图所示。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>在思科路由器上，show ip arp命令用于显示 ARP 表。<br>在 Windows 10 PC 上，arp –a命令用于显示 ARP 表。</p>
<h3 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h3><ul>
<li>广播时对性能的影响<br>作为广播帧，本地网络上的每台设备都会收到并处理 ARP 请求。在一般的商业网络中，这些广播对网络性能的影响可能微不足道。但是，如图所示，如果大量设备都已启动，并且同时开始使用网络服务，网络性能可能会有短时间的下降。在设备发出初始 ARP 广播并获取必要的 MAC 地址之后，网络受到的影响将会降至最小。</li>
<li>ARP欺骗<br>有时，使用 ARP 可能会造成潜在的安全风险。威胁发起者可以使用 ARP 欺骗来执行 ARP 毒化攻击。威胁发起者使用这种技术来应答属于另一台设备（例如默认网关）的 IPv4 地址的 ARP 请求。威胁发起者会发送一个带有自己 MAC 地址的 ARP 应答。ARP 应答的接收方会将错误的 MAC 地址添加到其 ARP 表中，并将这些数据包发送给威胁发起者。<br>企业级的交换机包含称为动态 ARP 检查 (DAI) 的缓解技术。</li>
</ul>
<h2 id="邻居发现"><a href="#邻居发现" class="headerlink" title="邻居发现"></a>邻居发现</h2><p>IPv6 使用与 IPv4 类似的 ARP 流程，称为 ICMPv6 邻居发现(ND或NDP)。与 IPv4 的 ARP 请求和 ARP 应答类似，IPv6 使用邻居请求和邻居通告消息。<br>ICMPv6 ND （在 IETF RFC 4861 中定义）使用五种 ICMPv6 消息来执行这些服务：</p>
<ul>
<li>  邻居请求消息</li>
<li>  邻居通告消息</li>
<li>  路由器请求消息</li>
<li>  路由器通告消息</li>
<li>  重定向消息<br>邻居请求和邻居通告消息用于设备到设备的消息传递，例如地址解析（类似于 IPv4 的 ARP）。设备包括主机计算机和路由器。ICMPv6邻居请求消息使用特定的以太网和IPv6组播地址发送。<br>路由器请求和路由器通告消息用于设备和路由器之间的消息传递。通常，路由器发现用于动态地址分配和<strong>无状态地址自动配置</strong> (SLAAC)。<br>重定向消息用于更好的下一跳选择。</li>
</ul>
<h1 id="路由器基本配置"><a href="#路由器基本配置" class="headerlink" title="路由器基本配置"></a>路由器基本配置</h1><h2 id="配置初始路由器设置"><a href="#配置初始路由器设置" class="headerlink" title="配置初始路由器设置"></a>配置初始路由器设置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入全局配置模式将路由器名称配置为“R1”。</span><br><span class="line">Router&gt;enable</span><br><span class="line">Router#configure terminal</span><br><span class="line">Enter configuration commands, one per line. End with CNTL/Z.</span><br><span class="line">Router(config)#hostname R1</span><br><span class="line">将加密密码配置为“class”。</span><br><span class="line">R1(config)#enable secret class</span><br><span class="line">将控制台线路密码配置为“cisco”并要求用户登录，然后返回全局模式。</span><br><span class="line">R1(config)#line console 0</span><br><span class="line">R1(config-line)#password cisco</span><br><span class="line">R1(config-line)#login</span><br><span class="line">R1(config-line)#exit</span><br><span class="line">对于vty线路0到4，将密码配置为“cisco”并要求用户登录，启用SSH和Telnet访问，然后返回全局模式。</span><br><span class="line">R1(config)#line vty 0 4</span><br><span class="line">R1(config-line)#password cisco</span><br><span class="line">R1(config-line)#login</span><br><span class="line">R1(config-line)#transport input ssh telnet</span><br><span class="line">R1(config-line)#exit</span><br><span class="line">加密所有明文密码</span><br><span class="line">R1(config)#service password-encryption</span><br><span class="line">输入标语“Authorized Access Only!”并使用# 作为定界符。</span><br><span class="line">R1(config)#banner motd #Authorized Access Only!#</span><br><span class="line">退出全局配置模式。</span><br><span class="line">R1(config)#exit</span><br><span class="line">R1#</span><br></pre></td></tr></table></figure>

<h2 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h2><p>此表总结了用于验证接口配置的更常用 <strong>show</strong> 命令。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN8-10/1645452335823.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入全局配置模式。</span><br><span class="line">R1#configure terminal</span><br><span class="line">Enter configuration commands, one per line. End with CNTL/Z.</span><br><span class="line">配置接口GigabitEthernet 0/0/0。</span><br><span class="line">R1(config)#interface gigabitethernet 0/0/0</span><br><span class="line">将链路描述为“Link to LAN”。</span><br><span class="line">R1(config-if)#description Link to LAN</span><br><span class="line">使用 IPv4 地址192.168.10.1和子网掩码255.255.255.0配置接口。</span><br><span class="line">R1(config-if)#ip address 192.168.10.1 255.255.255.0</span><br><span class="line">使用 IPv6 地址 2001:db8:acad:10::1 和前缀长度/64配置接口。</span><br><span class="line">R1(config-if)#ipv6 address 2001:db8:acad:10::1/64</span><br><span class="line">启用接口并返回全局配置模式。</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">*Aug  1 01:43:53.435: %LINK-3-UPDOWN: Interface GigabitEthernet0/0/0, changed state to down</span><br><span class="line">*Aug  1 01:43:56.447: %LINK-3-UPDOWN: Interface GigabitEthernet0/0/0, changed state to up</span><br><span class="line">*Aug  1 01:43:57.447: %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0, changed state to up</span><br><span class="line">R1(config-if)#exit</span><br><span class="line">R1#</span><br><span class="line">您已成功配置路由器 R1 上的初始设置。</span><br></pre></td></tr></table></figure>

<h2 id="配置默认网关"><a href="#配置默认网关" class="headerlink" title="配置默认网关"></a>配置默认网关</h2><p>要为交换机配置默认网关，请使用ip default-gateway ip-address 全局配置命令。配置的 IP 地址是连接到交换机的本地路由器接口的 IP 地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入全局配置模式。</span><br><span class="line">S1#configure terminal</span><br><span class="line">Enter configuration commands, one per line. End with CNTL/Z.</span><br><span class="line">将 S1 的默认网关配置为“192.168.10.1”。</span><br><span class="line">S1(config)#ip default-gateway 192.168.10.1</span><br><span class="line">S1(config)#</span><br><span class="line">您已在交换机S1上成功配置默认网关。</span><br></pre></td></tr></table></figure>
<h1 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h1><p>当有多个可用路由时，路由器使用哪项参数来选择到达目的网络的路径？</p>
<ul>
<li>与目的网络相关的较低度量值</li>
</ul>
<p>当有多个可用路由时，路由器使用哪项参数来选择到达目的网络的路径？</p>
<ul>
<li>流标签</li>
</ul>
<p>当在交换机 vty 线路上输入 transport input ssh 命令时会发生什么?</p>
<ul>
<li>交换机和远程用户之间的通信是加密的</li>
</ul>
<p>思科路由器启动过程分为四个主要阶段：</p>
<ol>
<li> 执行POST</li>
<li> 加载 bootstrap 程序</li>
<li> 查找并加载 Cisco IOS 软件</li>
<li> 查找并加载启动配置文件，或进入设置模式</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统(4)</title>
    <url>/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/</url>
    <content><![CDATA[<h1 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h1><h2 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h2><p><img src="/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/1650529219846.png" alt="enter description here"><br>速度从高到低、容量从小到大</p>
<h3 id="存储器管理的目的和功能"><a href="#存储器管理的目的和功能" class="headerlink" title="存储器管理的目的和功能"></a>存储器管理的目的和功能</h3><ul>
<li>主存储器的分配和管理</li>
<li>提高主存储器的利用率</li>
<li>“扩充”主存容量</li>
<li>存储保护</li>
</ul>
<h3 id="存储分配的三种方式"><a href="#存储分配的三种方式" class="headerlink" title="存储分配的三种方式"></a>存储分配的三种方式</h3><ul>
<li>直接指定方式（汇编地址写入）</li>
<li>静态分配方式（程序装入时确定位置）</li>
<li>动态分配方式</li>
</ul>
<h2 id="程序的装入和链接"><a href="#程序的装入和链接" class="headerlink" title="程序的装入和链接"></a>程序的装入和链接</h2><p>将用户源程序变为可在内存中执行的程序：</p>
<ul>
<li> 编译 翻译成机器级代码</li>
<li> 链接 使目标模块链接（引用的其它模块）成装入模块的过程</li>
<li> 装入 由装入程序将装入模块装入内存并执行</li>
</ul>
<h3 id="程序的装入"><a href="#程序的装入" class="headerlink" title="程序的装入"></a>程序的装入</h3><ul>
<li>绝对装入方式</li>
<li>可重定位装入方式（静态、动态）</li>
<li>动态运行时装入方式</li>
</ul>
<h3 id="程序的链接"><a href="#程序的链接" class="headerlink" title="程序的链接"></a>程序的链接</h3><ul>
<li>静态链接</li>
<li>装入时动态链接</li>
<li>运行时动态链接</li>
</ul>
<h2 id="连续分配存储管理方式"><a href="#连续分配存储管理方式" class="headerlink" title="连续分配存储管理方式"></a>连续分配存储管理方式</h2><p>程序空间本来就是连续的用连续的内存装入连续的程序，减少管理工作的难度</p>
<ul>
<li><p>单一连续分配方式（一个进程在内存）</p>
<ul>
<li>优点：易于管理</li>
<li>缺点：对要求内存空间少的程序，造成内存浪费；程序全部装入，很少使用的程序部分也占用内存。</li>
</ul>
</li>
<li><p>分区式分配方式（一个进程占据一个分区）</p>
<ul>
<li>固定分区分配<ul>
<li>易于实现，开销小</li>
<li>内碎片造成浪费；分区总数固定，限制了并发执行的程序数目；存储空间的利用率太低</li>
</ul>
</li>
<li>动态分区分配——分区分配算法</li>
</ul>
</li>
</ul>
<ul>
<li>可重定位分区分配 定时把存储空间中的空白区合并为一个大的连续区 之前的可变式分区分配根据其要求量为其划定相应的区域。消除了 “内零头”，但造成“外零头”</li>
</ul>
<h3 id="分区分配算法"><a href="#分区分配算法" class="headerlink" title="分区分配算法"></a>分区分配算法</h3><p><img src="/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/1650532050974.png" alt="enter description here"></p>
<ul>
<li>内零头(Internal Fragment)：分配给用户但用户没有使用的空间 “多分配的空间”</li>
<li>外零头(External Fragment )：没有分配但无法分配的空间，太小而无法分配，“分不出去的空间”</li>
</ul>
<h4 id="最佳适应算法BF"><a href="#最佳适应算法BF" class="headerlink" title="最佳适应算法BF"></a>最佳适应算法BF</h4><p>选择分区时总是寻找其大小最接近作业所要求的存储区域</p>
<ul>
<li>优点：遇到大作业到来时，比较容易得到满足</li>
<li>缺点： 留下许多无法使用的空白区；回收时，把它插入空白区链也颇为费时</li>
</ul>
<h4 id="最坏适应算法WF"><a href="#最坏适应算法WF" class="headerlink" title="最坏适应算法WF"></a>最坏适应算法WF</h4><p>寻找最大的空白区</p>
<ul>
<li>缺点：将大空间分给了小作业后大作业来到无法满足申请</li>
</ul>
<h4 id="首次适应算法FF"><a href="#首次适应算法FF" class="headerlink" title="首次适应算法FF"></a>首次适应算法FF</h4><p>空白区链的始端开始查找，选择第一个足以满足请求的空白块<br>分配后空白区被分成两部分一部分分配给作业；剩下的部分留在原空白区链中</p>
<ul>
<li>优点：简单，查找速度快</li>
<li>缺点：存储空间利用率不高；找到合适空白区的速度降低。</li>
</ul>
<h4 id="循环首次适应算法NF"><a href="#循环首次适应算法NF" class="headerlink" title="循环首次适应算法NF"></a>循环首次适应算法NF</h4><p>（下次适应算法）从上次查找结束的地方开始，找到一个足够大的空白区，就分配</p>
<ul>
<li>优点：存储空间的利用更加均衡</li>
<li>缺点：需要获得相当大的空白区时，很难满足</li>
</ul>
<h4 id="快速适应算法QF"><a href="#快速适应算法QF" class="headerlink" title="快速适应算法QF"></a>快速适应算法QF</h4><p>每一类具有<strong>相同容量</strong>的空闲分区，单独设立一个空闲分区链表<br>在内存中设立一张<strong>索引表</strong>，每一个表项记录空闲分区链表表头的指针<br>分配过程：根据进程的长度，寻找到能容纳它的最小空闲分区链表，并取下第一块进行分配即可</p>
<ul>
<li>优点：查找效率高；满足对大空间的需求，也不会产生内存碎片</li>
<li>缺点：分区归还算法复杂，系统开销较大；以进程为单位，存在一定的浪费</li>
</ul>
<h4 id="伙伴系统"><a href="#伙伴系统" class="headerlink" title="伙伴系统"></a>伙伴系统</h4><p>固定分区分配：并发执行的进程数量受到限制；内部碎片影响内存利用率<br>动态分区分配：算法复杂，回收分区时系统开销大</p>
<p>在伙伴系统中，可用内存块的大小为 2^k (1≤k≤m) </p>
<ul>
<li>2^1表示分配的最小块的尺寸；</li>
<li>2^m表示分配的最大块的尺寸，通常是可供分配的整个内存空间的大小。</li>
</ul>
<p>对空闲区按照大小分类，相同大小的分区链接为一个双向空闲链表；最多可形成 k（0 ≤k≤m ）个链表。</p>
<h2 id="分页存储管理方式"><a href="#分页存储管理方式" class="headerlink" title="分页存储管理方式"></a>分页存储管理方式</h2><h3 id="引入分页"><a href="#引入分页" class="headerlink" title="引入分页"></a>引入分页</h3><ul>
<li>离散分配方式的引入：<br>  连续分配方式会产生内/外零头<br>  为解决零头问题又要进行紧凑等高开销活动 </li>
<li>什么是离散分配：程序在内存中不一定连续存放 </li>
<li>根据离散时的基本单位不同，可分为三种：<br>  分页存储管理<br>  分段存储管理<br>  段页式存储管理</li>
</ul>
<h4 id="分页存储管理基本思想"><a href="#分页存储管理基本思想" class="headerlink" title="分页存储管理基本思想"></a>分页存储管理基本思想</h4><ul>
<li>离散的基础<pre><code>分页(Pages)：将程序地址空间分页
分块(Frames)：将内存空间分块
</code></pre>
</li>
<li>离散分配的体现<ul>
<li>内存一块可以装入程序一页</li>
<li>连续的多个页不一定装入连续的多个块中</li>
<li>注：系统中页块的大小是不变的。</li>
</ul>
</li>
</ul>
<p>离散分配没有外零头，且内零头肯定少于一个页面</p>
<h4 id="分页存储管理的基本方法"><a href="#分页存储管理的基本方法" class="headerlink" title="分页存储管理的基本方法"></a>分页存储管理的基本方法</h4><p>如何建立程序空间与主存空间的映射——页表<br>如何进行地址变换——从程序逻辑地址到内存物理地址</p>
<h4 id="页面和物理块"><a href="#页面和物理块" class="headerlink" title="页面和物理块"></a>页面和物理块</h4><ul>
<li>页面或页(Page)：把每个进程的逻辑地址空间分成一些大小相等的片。</li>
<li>物理块或页框(Page Frame)：内存空间也分成与页相同大小的若干存储块。在为进程分配存储空间时，总是以页框为单位。</li>
</ul>
<p>页面大小由机器的地址结构决定通常在1KB~8KB之间。</p>
<h4 id="实现分页存储管理的数据结构"><a href="#实现分页存储管理的数据结构" class="headerlink" title="实现分页存储管理的数据结构"></a>实现分页存储管理的数据结构</h4><ul>
<li>页表：进程，描述该进程的各页面在内存中对应的物理块号。页表中包括页号、物理块号。</li>
<li>作业表：系统，记录作业的页表情况。</li>
<li>空闲块表：系统，记录主存当前空闲块。</li>
</ul>
<h3 id="地址变换机构"><a href="#地址变换机构" class="headerlink" title="地址变换机构"></a>地址变换机构</h3><p>使用寄存器：速度快，成本高<br>一般将页表存在内存进程的PCB中，运行时再装入页表寄存器PTR</p>
<p>分页系统中的地址变换过程如下：</p>
<ol>
<li>根据逻辑地址,<strong>计算出页号和页内偏移量</strong>；</li>
<li>从PTR中得到页表首址，然后<strong>检索页表</strong>，查找指定页面对应的<strong>页框号</strong>；</li>
<li>用页框号乘以页面大小获得其对应的<strong>起始地址</strong>，并将其送入物理地址的<strong>高端</strong>。</li>
<li>将<strong>页内偏移量</strong>送入物理地址低端，<strong>形成完整的物理地址</strong>。</li>
</ol>
<h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>快表TLB为了提高地址变换速度，为进程页表设置一个<strong>专用的高速缓冲存储器</strong>其中专门保存<strong>当前进程最近访问过</strong>的一组页表项。<br>根据逻辑地址中的页号，会先查找快表中是否存在对应的页表项。<br>若快表中存在该表项，称为<strong>命中</strong>，取出其中的页框号加上页内偏移量计算出物理地址。<br>若快表中不存在该页表项，称为<strong>命中失败</strong>，则再查找页表，找到逻辑地址中指定页号对应的页框号。<br>同时，更新快表，将该表项插入快表中。</p>
<h4 id="访问内存的有效时间-EAT"><a href="#访问内存的有效时间-EAT" class="headerlink" title="访问内存的有效时间 EAT"></a>访问内存的有效时间 EAT</h4><p>命中率a、查找快表时间b、访问内存时间c<br>有效访问时间EAT=a ✖ （b+c）+ (1- a) ✖ (b+2c)</p>
<h3 id="两级和多级页表"><a href="#两级和多级页表" class="headerlink" title="两级和多级页表"></a>两级和多级页表</h3><p>引入两级页表采用离散分配方式，来解决难以找到一块连续的大内存空间的问题</p>
<p>利用离散分配方法实现的两级页表只是解决了大页表无需大片<strong>连续</strong>存储空间问题，但并未减少<strong>用较少内存去存放大页表</strong>问题，有关此类问题的成功解决方案在虚拟存储器管理中。</p>
<h3 id="反置页表IPT"><a href="#反置页表IPT" class="headerlink" title="反置页表IPT"></a>反置页表IPT</h3><p>为了解决大页表问题占内存多现象，减少内存开销，避免一个进程一个页表。</p>
<p>IPT采用为主存中的每一个物理块建立一个页表项并按照块号排序，该表每个表项包含正在访问该物理块的进程标识、页号及特征位，用来完成主存物理块到访问进程的页号的转换。</p>
<p><strong>即反过来查，原来是进程查物理现在是物理地址记录进程</strong></p>
<h2 id="对换"><a href="#对换" class="headerlink" title="对换"></a>对换</h2><p>对换就是把内存中暂时不用的程序和数据换到外存，或把需要的程序和数据换入内存。<br>分为：</p>
<ul>
<li>整体对换 以进程为单位</li>
<li>页面/分段对换：以页或段为单位</li>
</ul>
<h2 id="分段存储管理方式"><a href="#分段存储管理方式" class="headerlink" title="分段存储管理方式"></a>分段存储管理方式</h2><p>根据程序模块化设计时会将程序分段（如主程序段、子程序段、数据段等）而分段管理便是按程序模块化设计思想分段存储。</p>
<ul>
<li>作业地址空间按逻辑信息的完整性被划分为若干个段；</li>
<li>段内的地址空间是连续的；</li>
<li>许多编译程序支持分段方式，自动根据源程序的情况产生若干个段。</li>
</ul>
<p>分段较分页易于实现段的共享和段的保护。</p>
<h2 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h2><ul>
<li>分页管理内存管理效率高<ul>
<li>没有外零头</li>
<li>内零头小</li>
</ul>
</li>
<li>分段管理符合模块化思想<ul>
<li>每个分段都具备完整的功能</li>
<li>方便代码共享、保护</li>
<li>没有内零头，存在外零头</li>
</ul>
</li>
</ul>
<p>段页式管理结合：先将用户程序分段，每段内再划分成若干页，每段有段号，每段内部的页有一连续的页号。</p>
<p>但在段页式存储管理方式中，每访问一次数据，需访问三次内存。 访问段表、访问页表、访问相应数据，大大降低了访问速度。<br>可以设置快表，表项应包括段号、页号、物理块号。</p>
<p>总结：</p>
<ul>
<li>综合了分段和分页技术的优点，既能有效地利用存储空间，又能方便用户进行程序设计</li>
<li>但是，实现段页式存储管理系统需要增加硬件成本，系统的复杂度和管理开销也大大增加</li>
<li>因此，段页式存储管理技术适合于大、中型计算机系统，不太适合小型、微型计算机系统</li>
</ul>
<h1 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h1><h2 id="虚拟存储器概述"><a href="#虚拟存储器概述" class="headerlink" title="虚拟存储器概述"></a>虚拟存储器概述</h2><p>传统内存管理的一次性和驻留性严重降低内存利用率，减少系统吞吐量<br>当一个程序要求的存储容量超过内存，或大量作业需要内存空间时<br>从物理上增加内存容量，增加系统成本，并且增加是有限的。<br>所以从逻辑上增加内存容量，是虚拟存储技术所要解决的主要问题。</p>
<p>当进程运行时，先将当前<strong>要运行的部分程序装入内存</strong>，其他部分暂留外存；<br>当要执行的指令不在内存时，处理器发生中断，通知操作系统将所缺部分从外存调入内存，保证程序继续执行；<br>当内存不足时，允许程序部分换入、换出。<br><img src="/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/1650616504120.png" alt="enter description here"></p>
<h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>程序的执行总是呈现局部性。即在一个较短的时间段内，程序的执行仅限于某个部分。因此只要保证进程<strong>执行所需</strong>的部分程序和数据<strong>驻留在内存</strong>，一段时间内进程都能顺利执行。</p>
<p>具体表现为</p>
<ul>
<li>时间局限性 被访问过的数据可能再次被访问</li>
<li>空间局限性 被访问过的存储单元其附近也可能被访问</li>
</ul>
<h3 id="虚拟存储器的定义"><a href="#虚拟存储器的定义" class="headerlink" title="虚拟存储器的定义"></a>虚拟存储器的定义</h3><p><strong>虚拟存储器</strong>：是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。<br>是一种性能非常优越的存储器管理技术，故被广泛地应用于大、中、小型机器和微型机中。</p>
<h3 id="虚拟存储器的特征"><a href="#虚拟存储器的特征" class="headerlink" title="虚拟存储器的特征"></a>虚拟存储器的特征</h3><ul>
<li><strong>多次性</strong> 多次性是指一个作业被分成多次调入内存运行。相对传统储存管理的<strong>一次性</strong></li>
<li><strong>对换性</strong> 对换性是指作业的运行过程中进行换进、换出。换进和换出能有效地提高内存利用率。相对传统储存管理的常驻性</li>
<li><strong>虚拟性</strong> 虚拟性是指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大于实际内存容量。</li>
</ul>
<h2 id="请求分页存储管理方式"><a href="#请求分页存储管理方式" class="headerlink" title="请求分页存储管理方式"></a>请求分页存储管理方式</h2><p><strong>工作原理</strong>：作业运行时，只将当前的一部分装入内存其余的放在辅存，一旦发现访问的页不在主存中，则发出缺页中断，由OS将其从辅存调入主存，如果内存无空块，则根据某种算法选择一个页淘汰以便装入新的页面。</p>
<p>利用这种方法，可使更多的作业处于就绪状态，且能支持比主存容量大的作业在系统中运行。从而提高存储空间利用率。</p>
<p>为了实现请求调页、页面置换两大功能，系统必须提供如下的硬件支持：</p>
<ol>
<li>请求分页的页表机制。</li>
<li>缺页中断机构。</li>
<li>地址变换机构。</li>
</ol>
<h3 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h3><ul>
<li>固定分配局部置换 但是难以确定进程合适的分配大小</li>
<li>可变分配全局置换（常用方式）预先分配用完再加</li>
<li>可变分配局部置换 发现缺页后要换出再自行换入，不干涉其它区域</li>
</ul>
<h3 id="物理块分配算法"><a href="#物理块分配算法" class="headerlink" title="物理块分配算法"></a>物理块分配算法</h3><ul>
<li>平均分配算法</li>
<li>按比例分配算法 根据进程的大小</li>
<li>考虑优先权的分配算法</li>
</ul>
<h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><h3 id="最佳-优-置换算法OPT"><a href="#最佳-优-置换算法OPT" class="headerlink" title="最佳(优)置换算法OPT"></a>最佳(优)置换算法OPT</h3><p>理论上最理想的页面置换策略是：从主存中移出永远不再需要的页面；如无这样的页面存在，则应选择最长时间不需要访问的页面。</p>
<h3 id="先进先出（FIFO）页面置换算法"><a href="#先进先出（FIFO）页面置换算法" class="headerlink" title="先进先出（FIFO）页面置换算法"></a>先进先出（FIFO）页面置换算法</h3><p>实质是：总是选择作业中驻留时间最长(即最老)的一页淘汰。即：先进入主存的页面先退出主存。</p>
<h3 id="最近最久未使用（LRU）置换算法"><a href="#最近最久未使用（LRU）置换算法" class="headerlink" title="最近最久未使用（LRU）置换算法"></a>最近最久未使用（LRU）置换算法</h3><p>实质是：当需要置换一页面时，选择在最近一段时间内最久不用的页面予以淘汰。<br>特别的LRU需要硬件支持记录每个页面的最近使用情况</p>
<p>另有最少使用置换算法LFU：选择到当前时间为止被访问次数最少的页面被置换</p>
<h3 id="简单Clock置换算法"><a href="#简单Clock置换算法" class="headerlink" title="简单Clock置换算法"></a>简单Clock置换算法</h3><p>此算法为每页设置一位访问位，再将内存中的所有页面都通过链接指针链接成一个循环队列。<br>具体操作：</p>
<ul>
<li>当某页被访问时，其访问位被置1。</li>
<li>置换程序从上次停止位置开始检查页面的访问位。<ul>
<li>如果是0，就选择该页换出；</li>
<li>若为1，则重新将它置0，给该页驻留内存的机会暂不换出。</li>
</ul>
</li>
</ul>
<p>例：<br><img src="/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/1650618210434.png" alt="enter description here"><br><img src="/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/1650618215534.png" alt="enter description here"></p>
<h3 id="改进Clock置换算法"><a href="#改进Clock置换算法" class="headerlink" title="改进Clock置换算法"></a>改进Clock置换算法</h3><p>如果该页面驻留内存期间没有被修改过，那么不必把它写回辅存，否则系统必须把它写回辅存。<br><strong>即相对简单CLOCK添加修改位</strong></p>
<p>由访问位A和修改位M组合四种类型页面：</p>
<ol>
<li>类（A=0，M=0：既未彼访问，又未被修改，是最佳淘汰页。</li>
<li>类（A=0，M=1）：最近未被访问，但已被修改，并不是很好的淘汰页。</li>
<li>类（A=1，M=0）：最近已被访问，但未被修改：该页有可能再被访问。</li>
<li>类（A=1，M=1）：最近已被访问且被修改，该页可能再被访问。</li>
</ol>
<h2 id="缺页率对有效访问时间的影响"><a href="#缺页率对有效访问时间的影响" class="headerlink" title="缺页率对有效访问时间的影响"></a>缺页率对有效访问时间的影响</h2><p>设内存读写周期为t，查找快表时间为λ，缺页中断处理时间为ɛ</p>
<ul>
<li>页面在内存且页表项在快表中,只需一次访问内存<br>  EAT= λ + t</li>
<li>页面在内存但页表项不在快表中,需两次访问内存，一次读取页表，一次读取数据，另外还需更新快表。<br>  EAT= λ + t + t + λ=2(λ + t)</li>
<li>页面不在内存：考虑查找快表时间、查找页表时间、缺页中断处理时间、更新快表时间、访问实际物理地址时间<br>  EAT= λ + t +ɛ + λ + t = ɛ + 2(λ + t)<br>综上：</li>
<li>则<strong>引入快表命中率为α</strong>，<strong>缺页中断率为f</strong>，则有效访问内存时间为<br>  EAT= λ + α t + (1- α)[t + f(t +ɛ +λ) + (1-f)(t +λ)]</li>
</ul>
<h2 id="抖动和工作集"><a href="#抖动和工作集" class="headerlink" title="抖动和工作集"></a>抖动和工作集</h2><p><strong>抖动</strong>：如果运行进程的大部分时间都用于页面的换入/换出，而几乎不能完成任何有效的工作，则称此进程处于抖动状态。<br>抖动产生的原因有：</p>
<ul>
<li>进程分配的物理块太少</li>
<li>置换算法选择不当</li>
<li>全局置换使抖动传播</li>
</ul>
<p>可利用抖动发生前出现的征兆发现抖动并加以防范。<br>这些技术有：</p>
<ul>
<li>采取局部置换策略</li>
<li>引入工作集的算法</li>
<li>L=S准则 - L缺页之间的平均时间，S平均缺页服务时间</li>
<li>选择暂停的进程</li>
</ul>
<h2 id="请求分段存储管理方式"><a href="#请求分段存储管理方式" class="headerlink" title="请求分段存储管理方式"></a>请求分段存储管理方式</h2><p>工作原理：<br>请求分段系统中，程序运行之前，只需先调入若部分分段，便可启动运行。<br>当所访问的段不在内存中时，可请求OS将所缺的段调入内存。<br>硬件支持：</p>
<ul>
<li>请求分段的段表机制。</li>
<li>缺段中断机构。</li>
<li>地址变换机构。</li>
</ul>
<h3 id="段表机制"><a href="#段表机制" class="headerlink" title="段表机制"></a>段表机制</h3><p><img src="/2022/04/20/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(4)/1650619179190.png" alt="enter description here"></p>
<h3 id="环保护"><a href="#环保护" class="headerlink" title="环保护"></a>环保护</h3><p>环保护的基本原则是：<br>一个程序可以<strong>访问</strong>驻留在相同环或<strong>较低</strong>特权环中的数据<br>一个程序可以<strong>调用</strong>驻留在相同环或<strong>较高</strong>特权环中的服务。</p>
<h1 id="习题4"><a href="#习题4" class="headerlink" title="习题4"></a>习题4</h1><h2 id="P162"><a href="#P162" class="headerlink" title="P162"></a>P162</h2><ol start="2">
<li>可采用哪几种方式将程序装入内存？它们分别适合何种场合</li>
</ol>
<ul>
<li>绝对装入方式，适于单道程序环境</li>
<li>可重定位装入方式，适于多道程序环境，静态存储分配</li>
<li>动态运行时装入方式，适于多道程序环境，动态存储分配</li>
</ul>
<ol start="3">
<li>何谓静态链接？静态链接需要解决两个什么问题</li>
</ol>
<ul>
<li>静态链接：在程序运行之前，先将各目标模块及它们所需的库函数，链接成一个完整的装入模块（又称执行模块），以后不再拆开</li>
<li>需要解决：将相对地址进行修改；变换外部调用符号</li>
</ul>
<ol start="5">
<li>何谓运行时动态链接？运行时动态链接有何优点</li>
</ol>
<ul>
<li>运行时动态链接：将某些目标模块的链接推迟到执行时才进行。</li>
<li>优点：节省内存空间</li>
</ul>
<ol start="6">
<li>在动态分区分配方式中，应如何将各空闲分区链接成空闲分区链</li>
</ol>
<ul>
<li><strong>按照地址递增的顺序链接分区</strong>：首次适应、循环首次适应</li>
<li><strong>按照分区大小顺序链接分区</strong>：最佳适应、最坏适应算法</li>
<li><strong>按分区的大小和分类链接成多条分区链</strong>：快速适应、伙伴系统、哈希算法</li>
</ul>
<ol start="8">
<li><p>什么是基于顺序搜索的动态分区分配算法？分为哪几种<br> 它将空闲分区链接成空闲分区链，以此在分配时搜索链上分区，找到满足算法要求的分区<br> 分为首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法</p>
</li>
<li><p>在采用首次适应算法回收内存时，可能出现哪几种情况？应怎么处理</p>
</li>
</ol>
<ul>
<li>回收区与<strong>上面</strong>的空闲分区邻接，合并，首地址仍是前一空闲分区的，不必为回收分区分配新表项，只需修改前一分区大小</li>
<li>回收区与<strong>下面</strong>的空白区邻接，合并，重新使用新空闲区首址，修改大小</li>
<li>回收区与<strong>上、下面</strong>的空白区邻接，合并，直接将后面空白区取消，修改大小，首地址仍是前一空闲分区的</li>
<li>回收区与<strong>上、下面</strong>的空白区均不邻接，建立新表项</li>
</ul>
<ol start="13">
<li><p>为什么要引入对换？对换可分为哪几种类型<br>为了提高系统的吞吐量，提高内存的利用率和处理机的利用率；<br>全局对换、局部对换。</p>
</li>
<li><p>为实现对换，系统应具备哪几方面的功能<br>对对换空间的管理<br>进程的换入、换出</p>
</li>
<li><p>基于离散分配时所用的基本单位不同，可将离散分配分为哪几种？<br>分页存储管理方式、分段存储管理方式、段页式存储管理方式</p>
</li>
<li><p>什么是页表？页表的作用是什么？<br>每个进程对应 1 个页表，描述该进程的所需各页面在内存中对应的物理块号。</p>
</li>
<li><p>为实现分页存储管理。需要哪些硬件支持?<br>页表寄存器、物理地址寄存器和快表寄存器。<br>地址变换机构。</p>
</li>
<li><p>在分页系统中是如何实现地址变换的?<br>（1）根据逻辑地址,计算出页号和页内偏移量；<br>（2）从PTR中得到页表首址，然后检索页表，查找指定页面对应的页框号；<br>（3）用页框号乘以页面大小获得其对应的起始地址，并将其送入物理地址的高端。<br>（4）将页内偏移量送入物理地址低端，形成完整的物理地址。</p>
</li>
<li><p>在具有快表的段页式存储管理方式中，如何实现地址变换?<br>根据逻辑地址中的页号，查找快表中是否存在对应的页表项。<br>若快表中存在该表项，称为命中（hit），取出其中的页框号，加上页内偏移量，计算出物理地址。<br>若快表中不存在该页表项，称为命中失败，则再查找页表，找到逻辑地址中指定页号对应的页框号。同时，更新快表，将该表项插入快表中。并计算物理地址</p>
</li>
<li><p>分页和分段存储管理有何区别?<br>页是信息的物理单位，而段是信息的逻辑单位。<br>页的大小固定而且由系统决定，段的大小不固定，通常由编译程序划分。<br>分页用户程序地址空间是一维的，分段用户程序地址空间是二维的。</p>
</li>
<li><p>试全面比较连续分配和离散分配方式。<br><strong>连续分配</strong>程序空间本来就是连续的，用连续的内存装入连续的程序，减少管理工作的难度<br><strong>离散分配</strong>方式需要额外的硬件支持，且实现的算法相对比较复杂<br>没有外零头 不受连续空间限制，每块都能分出去，仅有小于一个页面的内零头 程序大小一般不是页大小的整数倍。</p>
</li>
</ol>
<h2 id="P189"><a href="#P189" class="headerlink" title="P189"></a>P189</h2><ol start="2">
<li><p>什么是程序运行时的时间局限性和空间局限性?</p>
<ul>
<li>时间局限性 被访问过的数据可能再次被访问</li>
<li>空间局限性 被访问过的存储单元其附近也可能被访问</li>
</ul>
</li>
<li><p>实现虚拟存储器需要哪些硬件支持?<br> 请求分页/段的页/段表机制<br> 缺页/段中断机构<br> 地址变换机构</p>
</li>
<li><p>实现虚拟存储器需要哪些关键技术？<br> 请求调页/段功能、页面置换功能</p>
</li>
<li><p>请详细说明请求分页系统的地址变换过程。</p>
<ol>
<li>取逻辑地址分解为页号和页内偏移</li>
<li>根据页号查找页表,获得该页的描述信总</li>
<li>若该页中断位为1，产生缺页中断</li>
<li>更新该页的描述信息</li>
<li>根据页块号和页内偏移，计算物理地址。</li>
</ol>
</li>
<li><p>试说明在请求分页系统中页面的调入过程。<br>当程序要访问的页面未在内存时，便向CPU发出缺页中断，中断处理程序通过查找页表，得到该页在外存的物理块后，如果此时内存能容纳新页，则启动磁盘将所缺之页调入内存，然后修改页表。<br>如果内存已满，则须先按照置换算法从内存中选出一页准备换出，然后再把所缺的页调入内存，并修改页表中的相应表项，并将此页表项写入快表中。<br>在缺页调入内存后，修改后的页表形成所要访问数据的物理地址，再去访问内存数据。<br>整个页面的调入过程对用户是透明的。</p>
</li>
<li><p>在请求分页系统中，常采用哪几种页面置换算法?<br>最佳置换算法OPT<br>先进先出置换算法FIFO<br>最近最久未使用置换算法LRU<br>最少使用置换算法LFU<br>简单的Clock置换算法<br>改进型Clock置换算法</p>
</li>
</ol>
<ol start="18">
<li>在请求分页系统中，产生“抖动”的原因是什么?<ul>
<li>进程分配的物理块太少</li>
<li>置换算法选择不当</li>
<li>全局置换使抖动传播</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表0.4</title>
    <url>/2021/09/19/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A80.4/</url>
    <content><![CDATA[<p>2021/08/29  20:46        12,798,561 [[[[重要 不要创建世界时使用]]]]【群系】【前置4】CavesAndCliffsBackport-1.16.5-6.3.jar<br>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/09/09  00:56            10,475 【优化】储物抽屉优化drawerfps-2.1.jar.disabled<br>2021/07/19  18:33            98,900 【优化】区块加载ferritecore-2.0.5-forge.jar<br>2021/04/26  08:04           437,841 【优化】区块预加载Chunk Pregenerator-V1.16-3.0.5.jar<br>2021/07/20  22:25           129,304 【优化】合成冲突化解polymorph-forge-1.16.5-0.25.jar<br>2021/10/17  21:26         1,675,339 【优化】地形生成TerraForged-1.16.5-0.2.16-BETA-2 .jar<br>2021/07/19  14:56            60,714 【优化】实体优化EntityCulling-1.16.5-2.1.6.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/07/20  23:04            94,028 【优化】模组目录catalogue-1.2.1-1.16.5.jar<br>2021/07/20  23:05            72,657 【优化】模组设置configured-1.1.0-1.16.5.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2021/07/19  14:53           232,291 【优化】生物AI优化performant-1.16.2-5-3.71m.jar<br>2021/07/19  15:42            19,038 【优化】生物群系修复(争对新添加群系)biomeidfixer-1.16.5-1.0.1.s4.jar<br>2021/04/17  01:14           423,940 【优化】（补丁）随意修复randompatches-2.4.4-forge.jar<br>2021/07/06  15:29           947,047 【前置01】abnormals_core-1.16.5-3.2.0.jar<br>2021/07/21  21:33           812,772 【前置10】【辅助】jei-1.16.5-7.7.1.110.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/07/19  15:51           592,958 【前置12】帕秋莉Patchouli-1.16.4-53.1.jar<br>2021/09/03  16:02         3,365,639 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.3.19.jar<br>2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar<br>2021/09/03  15:58        10,313,922 【前置15】【群系】byg-1.3.4.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/07/06  16:13         1,259,031 【前置17】【食物】FarmersDelight-1.16.5-0.4.5.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/06/20  16:17           912,234 【前置19】rhino-1605.1.1-build.23.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/07/19  21:41         3,374,203 【前置22】geckolib-forge-1.16.5-3.0.41.jar<br>2021/08/29  21:25         1,470,868 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.6-1.16.5.jar<br>2021/09/03  16:03           253,717 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.7.4.jar<br>2021/07/20  19:49            61,910 【前置27】bgcore-1.16.5-3.2.jar<br>2021/07/20  19:41           309,330 【前置28】Bookshelf-1.16.5-10.1.11.jar<br>2021/07/20  19:38           714,054 【前置29】Mantle-1.16.5-1.6.115.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/07/06  12:18           105,282 【前置31】morevanillalib-1.16.4-1.4.0.jar<br>2021/06/04  22:42           260,027 【前置32】structure_gel-1.16.5-1.7.7.jar<br>2021/06/05  02:28            32,203 【前置33】SimpleCoreLib-1.16.5-2.0.7.5.jar<br>2021/04/27  10:48         1,067,855 【前置36】附魔前置cofh_core-1.16.4-1.2.1.jar<br>2021/09/13  00:35           140,636 【前置37】collective-1.16.5-2.64.jar<br>2021/07/20  23:13           140,070 【前置38】Placebo-1.16.4-4.5.0.jar<br>2021/07/20  23:18           208,147 【前置39】selene-1.16.5-1.5.jar<br>2021/09/03  15:54           106,044 【前置3】YungsApi-1.16.4-Forge-12.jar<br>2021/09/04  22:58           125,835 【前置40】valhelsia_core-16.0.10.jar<br>2021/07/19  18:14           740,946 【前置41】【辅助】【前置19】或【前置2】添加合成表kubejs-forge-1605.3.12-build.38.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/08/17  13:42           395,978 【前置43】shetiphiancore-1.16-3.8.5.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/08/29  20:46           150,833 【前置4】cavebiomeapi-1.16.5-1.3.7.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/07/20  15:08           244,720 【前置9】饰品栏curios-forge-1.16.5-4.0.5.2.jar<br>2021/07/21  14:07             8,013 【前置】全局数据包globaldataandresourcepacks-1.16.4-1.7.4.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/07/19  17:22           538,708 【杂项】【前置01】extra_boats-1.16.5-2.1.0.jar<br>2021/07/19  18:27           288,116 【杂项】【前置01】动作personality-1.16.5-1.0.2.jar<br>2021/06/04  22:28           962,042 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.1.0.jar<br>2021/07/19  17:23         3,009,108 【杂项】【前置01】甜浆果优化berry_good-1.16.5-4.1.1.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:51            22,188 【杂项】【前置17】农夫乐事兼容性compats_farmersdelightintegrations-1.16.5-1.1.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/07/19  16:54           260,586 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.1.jar<br>2021/06/05  02:28           321,605 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.6.7.jar<br>2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/04/11  15:24            32,462 【杂项】【前置38】末影袋(提升大量储存空间）EnderBags-1.16.4-6.3.1.jar<br>2021/07/20  17:34            28,216 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.3.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/04/27  08:30           494,228 【杂项】储物抽屉StorageDrawers-1.16.3-8.2.2.jar<br>2021/05/04  08:31             9,772 【杂项】农田不再被踩坏.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/07/20  22:53           193,910 【杂项】建筑权杖constructionwand-1.16.5-2.2.jar<br>2021/06/04  22:44         1,486,283 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.52.jar<br>2021/04/09  23:42            18,175 【杂项】快速树叶腐烂FastLeafDecay-v25.jar<br>2021/06/08  00:35           312,299 【杂项】旅行背包TravelersBackpack-1.16.5-5.4.2.jar<br>2021/04/25  03:41            40,702 【杂项】晃动镜头.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/07/20  17:29         1,402,482 【杂项】更好的洞穴yung_BetterCaves-Forge-1.16.4-1.1.2.jar<br>2021/07/24  18:19             4,903 【杂项】村庄出生点villagespawnpoint_1.16.5-1.6.jar<br>2021/09/12  04:01            11,857 【杂项】村民名称villagernames_1.16.5-3.3.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/07/20  22:36           378,040 【杂项】荒野之息Paraglider-1.16.5-1.3.2.0-beta.4.jar<br>2021/08/30  00:16            11,191 【杂项】龙栖生成管理wyrmroostspawncontrol-0.1.2.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/08/29  21:07        18,109,537 【生物】alexsmobs-1.12.0.jar<br>2021/08/29  21:07        21,314,646 【生物】iceandfire-2.1.9-1.16.5.jar.disabled<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/06/04  20:58         3,668,858 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.0.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/10/22  13:54         4,590,562 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.26.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/07/20  16:23           845,975 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.5.jar<br>2021/08/29  20:57         8,878,253 【生物】外来物种Exotic+Critters+1.16+Experimental+1.14.1.jar<br>2021/08/29  21:06           511,424 【生物】寂静岭Silent+Mine+1.16.5+0.1.jar<br>2021/09/03  21:10        88,425,620 【生物】恐怖生物lycanitesmobs-1.16.5-2.3.2.2.jar.disabled<br>2021/07/21  17:55         1,225,543 【生物】无名生物(优质无汉化)unnamedanimalmod-1.0.2.jar<br>2021/07/20  16:51        14,493,152 【生物】更多下界生物infernal-expansion-2.0.0-beta.7.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/08/29  21:13        10,032,735 【生物】更多僵尸UNDEADv.1.1release.jar<br>2021/08/29  21:14         1,743,711 【生物】更多挑战DungeonsMod-1.16.3-1.4.40.jar<br>2021/07/21  14:06           259,576 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.3.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/04/24  05:02         8,356,809 【生物】更好动物betteranimalsplus#-1.16.5-10.2.0.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/07/19  16:25           235,050 【生物】海洋生物risingtides-1.16.5-1.3.0.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/07/21  14:07           427,537 【生物】灾祸村民illagers_plus-1.16.4v1.5.jar<br>2021/04/09  22:46         2,044,414 【生物】珍奇鸟类exoticbirds-1.16.4-1.1.0.jar<br>2021/06/04  22:44           466,557 【生物】落选生物outvoted-1.16.5-1.2.4.jar<br>2021/09/18  22:22         9,275,633 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)astemir_forestcraft-1.599.jar<br>2021/07/06  10:33           327,809 【生物】附魔师enchantwithmob-1.16.5-1.4.6.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/08/30  00:25         4,969,566 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/10/22  13:45           756,298 【结构】DungeonCrawl-1.16.5-2.3.2.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/09/03  15:54           509,890 【结构】yung_BetterDungeons-1.16.4-1.2.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/07/21  14:06         1,537,457 【结构】【前置40】valhelsia_structures-1.16.5-0.1.3.jar<br>2021/09/03  16:07         1,540,625 【结构】【前置40】valhelsia_structures-1.16.5-0.1.5.jar<br>2021/09/03  16:26         2,499,542 【结构】中世纪城堡MedievalCraft-1.16.5-1.15.11.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/07/20  21:29         4,676,349 【结构】地下城DungeonsArise-1.16.5-2.1.47-release.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/09/05  16:28         1,061,118 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.3.jar<br>2021/06/29  16:58           915,982 【结构】大型结构Shrines-1.16.5-1.8.1.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/09/05  00:12         5,240,491 【结构】更多结构repurposed_structures_forge-3.2.4+1.16.5.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/09/18  02:46           781,636 【结构】遗迹relics-0.2.9.jar<br>2021/10/22  13:44           281,735 【结构】（墙壁宝石快）Forgotten+Treasures+V12+1.16.5.jar<br>2021/06/04  22:35         1,288,335 【群系】BetterDefaultBiomes-1.16.4+-Alpha+2.5.3.jar<br>2021/06/04  19:41        70,790,929 【群系】betterendforge-1.16.4-1.6.0.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/07/21  14:09        57,325,484 【群系】【前置01】末地OuterEnd-0.2.13.jar<br>2021/06/04  20:58           961,236 【群系】【前置01】秋原autumnity-1.16.5-2.1.1.jar<br>2021/04/24  04:00         9,049,133 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.0.0.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/07/19  17:31         1,527,658 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.0.jar<br>2021/09/03  16:02           365,168 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.5.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/06/04  22:26           471,619 【群系】【前置4】【前置27】岩石DarkerDepths-1.16.5-1.0.1.jar<br>2021/09/03  16:22           461,928 【群系】地狱生物ShretNether+-+Release+-1.3.2.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/07/19  21:50         1,238,112 【群系】探险者explorercraft-5.0.4.jar<br>2021/09/18  22:32        22,419,768 【群系】更好地狱BetterNetherReforged_Pr1.jar<br>2021/07/19  14:45           554,081 【群系】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/07/19  15:22           464,318 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.0.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/07/19  12:54           770,079 【装备】升级下界合金装备Upgraded+Netherite+1.16.5+-+1.9.13.jar<br>2021/07/06  10:33         2,049,774 【装备】地下城装备dungeons_gear-1.16.5-3.0.17.jar<br>2021/07/20  22:43         2,033,912 【装饰】cfm-7.0.0pre22-1.16.3.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/07/19  12:49            65,945 【装饰】【前置2】更多竹制品bambooeverything-1.16.5-1.0.0-forge.jar<br>2021/06/20  18:15           770,081 【装饰】【前置30】更好的树叶Better_Foliage-2.6.5-Forge-1.16.5.jar<br>2021/07/20  21:51         5,723,810 【装饰】【前置39】supplementaries-1.16.5-0.14.5.jar<br>2021/08/17  13:36         7,824,319 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.15.jar<br>2021/06/04  18:58           954,765 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.6.4.2.jar<br>2021/07/20  22:38           395,348 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.1.0.jar<br>2021/07/19  14:47         8,666,985 【装饰】自然装饰Natural+Decor+Mod+1.16+II+V0.21.3.7.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/07/20  22:52         6,132,491 【装饰】（cfm系）morecfm-1.3.1-1.16.3.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar<br>2021/04/27  11:23            92,540 【辅助】mod设置GameMenuModOption-1.16.4-1.8.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/07/21  14:07            19,362 【辅助】【前置10】jei-professions-1.0.0-1.16.4.jar<br>2021/04/09  02:10            24,981 【辅助】【前置10】JEI拓展jeiintegration_1.16.5-7.0.1.15.jar<br>2021/08/29  21:33           235,574 【辅助】【前置10】JEI资源显示JustEnoughResources-1.16.5-0.12.1.128.jar<br>2021/07/19  15:19           262,656 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.0.jar<br>2021/07/21  14:06            31,243 【辅助】【前置10】附魔信息JEIEnchantmentInfo-1.16.4-1.2.1.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/07/20  16:16            29,421 【辅助】【前置25】12高亮显示扩展WailaHarvestability-mc1.16.x-forge-1.1.15.jar<br>2021/07/19  15:24            21,734 【辅助】【前置9】盔甲架显示饰品Curious+Armor+Stands-1.16.5-2.1.2.jar<br>2021/07/17  10:12           483,347 【辅助】世界地图XaerosWorldMap_1.14.6.1_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/07/30  18:11           460,711 【辅助】回收箱Corail-Recycler-NE-1.16.4-385.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/07/20  21:23           330,091 【辅助】搬箱子carryon-1.16.5-1.15.5.15.jar<br>2021/07/19  15:41            86,425 【辅助】时装盔甲架CosmeticArmorReworked-1.16.5-v3a.jar<br>2021/07/20  23:26            78,198 【辅助】更好的第三人称视角BetterThirdPerson-Forge-1.16.4-1.5.1.jar<br>2021/07/20  22:24             8,514 【辅助】汉化i18nupdatemod-1.16.5-2.0.2-hotfix-4.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/08/02  11:50            46,287 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.1.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/07/29  18:20           120,959 【辅助】（查看物品是否接触过）travelers_index-1.16.4-1.0.2.jar<br>2021/07/19  18:27           585,049 【附魔】【前置01】allurement-1.16.5-1.2.0.jar<br>2021/07/20  15:51            51,875 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.14.jar<br>2021/04/27  10:48           124,792 【附魔】【前置36】更多附魔ensorcellation-1.16.4-1.2.0.jar<br>2021/07/20  15:48           472,341 【附魔】更多附魔flowingagony-1.16.5-beta-0.4.3.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/07/19  11:38        76,505,060 【音效】【前置5】自然音效AmbientSounds_v3.1.9_mc1.16.5.jar<br>2021/06/04  21:01        58,565,641 【音效】【前置6】音效charmonium-forge-1.16.5-2.3.2.jar<br>2021/04/27  09:39        14,853,313 【音效】动态环绕4.26DynamicSurroundings-1.16.4-4.0.4.2.jar<br>2021/07/19  17:16           937,114 【食物】【前置01】neapolitan-1.16.5-2.1.0.jar<br>2021/06/04  20:57           487,649 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.1.1.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/07/19  16:52            14,411 【食物】【前置17】【前置18】farmerstea-1.16.5-1.2.jar<br>2021/07/19  16:52           107,061 【食物】【前置17】农夫乐事下界扩展nethers_delight-1.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/07/19  16:54           182,667 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.0.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表0.9</title>
    <url>/2021/12/07/MC/modslists/minecraft%5B1.16.5%5D%20%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A80.9/</url>
    <content><![CDATA[<p>2021/11/11  18:49            71,220 【任务】【前置00】ftb-money-1605.1.3-build.3.jar<br>2021/11/11  17:57           937,588 【任务】【前置00】ftb-quests-forge-1605.3.5-build.72.jar<br>2021/11/11  18:05           171,681 【任务】【前置00】ftb-teams-forge-1605.2.3-build.38.jar<br>2021/11/11  18:05           106,801 【任务】【前置00】item-filters-forge-1605.2.5-build.9.jar<br>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/11/16  15:16           245,226 【优化】合成冲突化解polymorph-forge-1.16.5-0.31.jar<br>2021/07/19  14:56            60,714 【优化】实体剔除EntityCulling-1.16.5-2.1.6.jar<br>2021/11/16  15:16            95,977 【优化】模组目录catalogue-1.4.0-1.16.5.jar<br>2021/11/13  01:25           128,171 【优化】模组设置configured-1.3.0-1.16.5.jar<br>2021/11/11  18:05           576,738 【前置00】ftb-library-forge-1605.3.4-build.83.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2021/11/16  15:16           826,742 【前置10】【辅助】jei-1.16.5-7.7.1.136.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/11/05  14:28           593,114 【前置12】帕秋莉Patchouli-1.16.4-53.2.jar<br>2021/11/13  01:49         4,286,350 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24.jar<br>2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/10/26  10:59         2,528,891 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.1.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/11/16  15:16         1,030,440 【前置19】rhino-forge-1605.1.5-build.75.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/11/16  15:16         3,382,347 【前置22】geckolib-forge-1.16.5-3.0.54.jar<br>2021/11/05  14:28         1,471,429 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.8-1.16.5.jar<br>2021/10/26  10:58           254,587 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.0.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/10/26  10:58           746,595 【前置29】Mantle-1.16.5-1.6.127.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2021/10/26  10:58         1,074,217 【前置36】附魔前置cofh_core-1.16.5-1.3.1.jar<br>2021/11/13  01:25           140,661 【前置37】collective-1.16.5-2.65.jar<br>2021/10/26  10:58           140,163 【前置38】Placebo-1.16.5-4.6.0.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2021/11/05  14:28           601,128 【前置40】valhelsia_core-16.0.13a.jar<br>2021/11/16  15:16           908,420 【前置41】【辅助】【前置19】或【前置2】(添加合成表矿辞统一)kubejs-forge-1605.3.19-build.170.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/10/26  10:58           398,661 【前置43】shetiphiancore-1.16-3.8.6.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/11/10  00:01           147,708 【前置4】cavebiomeapi-1.16.5-1.4.2.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/10/26  10:58           246,281 【前置9】饰品栏curios-forge-1.16.5-4.0.5.3.jar<br>2021/07/21  14:07             8,013 【前置】全局数据包globaldataandresourcepacks-1.16.4-1.7.4.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/06/04  22:28           962,042 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.1.0.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/10/26  10:58           297,941 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.2.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/11/15  01:36            14,638 【杂项】【前置9】【前置14】饰品化夸克背包CuriosQuarkOBP-1.16.5-1.0.2.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/10/26  10:58           500,792 【杂项】储物抽屉StorageDrawers-1.16.3-8.3.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/11/10  00:01           396,387 【杂项】荒野之息Paraglider-1.16.5-1.3.2.6.jar<br>2021/11/05  23:53           540,313 【杂项】菜单定制PackMenu-1.16.5-2.5.0.jar<br>2021/11/11  02:08         2,291,012 【杂项】饰品背包ImprovedBackpacks-1.6.2.0.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/11/05  14:26         1,948,461 【生物】MinecraftEarthMod-2.5.7.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/11/13  01:26         3,682,658 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.1.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/11/05  14:28         4,589,626 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.30.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/10/26  10:59         1,311,630 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.10.jar<br>2021/11/05  14:28           509,209 【生物】地球版生物restored_earth-1.16.5-1.1.1.jar<br>2021/11/05  14:24        10,560,452 【生物】外来物种Exotic+Critters+1.16+Experimental+1.19.jar<br>2021/11/11  00:37         1,251,211 【生物】如题ambientadditions-0.5.1.jar<br>2021/11/05  14:28         2,556,106 【生物】库帕的克里特斯Koopas Critters 1.16.5 II V0.3.3 Beta 4.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/11/16  15:17        14,521,154 【生物】更多下界生物infernal-expansion-1.16.5-2.4.0.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/11/10  00:02        10,524,585 【生物】更多僵尸UNDEADv.1.3.release+Biome.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/11/05  14:28         1,743,562 【生物】更多挑战DungeonsMod-1.16.3-1.4.41.jar<br>2021/11/02  15:24           714,968 【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/10/27  02:38         8,356,809 【生物】更好动物betteranimalsplus-1.16.5-10.2.0.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/11/05  14:28           760,003 【生物】灾祸村民illagers_plus-1.16.4v1.7.2.jar<br>2021/11/13  01:26         2,058,724 【生物】珍奇鸟类exoticbirds-1.16.4-1.3.0.jar<br>2021/11/15  01:41           999,568 【生物】科博尔兹及地牢Kobolds-1.4.9.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/10/26  10:59         9,220,781 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)astemir_forestcraft-1.602.jar<br>2021/11/05  14:28           333,669 【生物】附魔师enchantwithmob-1.16.5-1.5.1.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/11/16  23:47         4,967,448 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/11/05  14:28           297,282 【结构】AwesomeDungeonForge-1.16.5-1.1.2.jar<br>2021/11/13  01:56           313,216 【结构】more_ships_1.16.5_3.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/11/05  14:28         1,540,395 【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】(开箱子后会拆除塔)dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2021/11/05  14:28         2,562,731 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.2.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/07/20  21:29         4,676,349 【结构】地下城DungeonsArise-1.16.5-2.1.47-release.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2021/11/10  00:01           760,148 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.3.jar<br>2021/11/13  01:26        38,248,803 【结构】大型结构Shrines-1.16.5-2.0.0-Beta2.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/11/16  15:17         5,575,793 【结构】更多结构repurposed_structures_forge-3.4.4+1.16.5.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/11/05  14:28           993,669 【结构】遗迹饰品relics-0.3.1.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/10/26  10:59         1,576,889 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.0.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/06/04  20:58           961,236 【群系】【前置01】秋原autumnity-1.16.5-2.1.1.jar<br>2021/10/26  10:59         6,988,017 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.0.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/07/19  17:31         1,527,658 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.0.jar<br>2021/10/26  10:58           367,720 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.7.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/11/16  15:18        51,506,679 【群系】【前置4】cavesandcliffs-1.16.5-7.1.4.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2021/11/05  01:17           506,465 【群系】地狱生物ShretNether+-+Release+-1.3.3.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/11/16  15:16         1,598,328 【群系】探险者explorercraft-5.0.6.jar<br>2021/11/05  14:29        22,443,866 【群系】更好地狱betternether_reforged-1.2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/10/26  10:44        10,685,093 【群系】通用群系？genericeco-1.16.5-2.1.jar<br>2021/10/26  10:58           467,595 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.3.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/11/10  00:01         2,116,957 【装备】地下城装备dungeons_gear-1.16.5-3.0.20-hotfix.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/11/16  15:17        12,947,922 【装饰】【前置39】supplementaries-1.16.5-0.17.10.jar<br>2021/10/26  10:59         7,871,642 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.17.jar<br>2021/10/26  10:58         1,013,352 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.jar<br>2021/10/26  10:59         1,541,592 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.10.jar<br>2021/11/05  14:28         9,241,804 【装饰】自然装饰NaturalDecorMod 1.16 II V0.23.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/11/11  00:37           588,910 【附魔】【前置01】allurement-1.16.5-1.2.1.jar<br>2021/10/26  10:58            59,309 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.17.jar<br>2021/10/26  10:58           132,851 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.3.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/07/19  17:16           937,114 【食物】【前置01】neapolitan-1.16.5-2.1.0.jar<br>2021/10/26  10:58           549,400 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.0.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表0.5</title>
    <url>/2021/10/29/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A80.5/</url>
    <content><![CDATA[<p>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/09/09  00:56            10,475 【优化】储物抽屉优化drawerfps-2.1.jar<br>2021/07/19  18:33            98,900 【优化】区块加载ferritecore-2.0.5-forge.jar<br>2021/04/26  08:04           437,841 【优化】区块预加载Chunk Pregenerator-V1.16-3.0.5.jar<br>2021/07/20  22:25           129,304 【优化】合成冲突化解polymorph-forge-1.16.5-0.25.jar<br>2021/10/17  21:26         1,675,339 【优化】地形生成TerraForged-1.16.5-0.2.16-BETA-2 .jar<br>2021/07/19  14:56            60,714 【优化】实体优化EntityCulling-1.16.5-2.1.6.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/10/26  10:58            94,861 【优化】模组目录catalogue-1.3.0-1.16.5.jar<br>2021/10/26  10:58            75,690 【优化】模组设置configured-1.2.0-1.16.3.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2021/10/26  10:58           232,527 【优化】生物AI优化performant-1.16.2-5-3.72m.jar<br>2021/10/26  10:58            18,942 【优化】生物群系修复(争对新添加群系)biomeidfixer-1.16.5-1.0.1.s5.jar<br>2021/04/17  01:14           423,940 【优化】（补丁）随意修复randompatches-2.4.4-forge.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2021/07/21  21:33           812,772 【前置10】【辅助】jei-1.16.5-7.7.1.110.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/07/19  15:51           592,958 【前置12】帕秋莉Patchouli-1.16.4-53.1.jar<br>2021/10/26  10:59         4,223,088 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.23.jar<br>2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/10/26  10:59         2,528,891 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.1.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/10/26  10:58         1,026,294 【前置19】rhino-forge-1605.1.4-build.67.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/10/26  10:59         3,378,331 【前置22】geckolib-forge-1.16.5-3.0.49.jar<br>2021/08/29  21:25         1,470,868 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.6-1.16.5.jar<br>2021/10/26  10:58           254,587 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.0.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/10/26  10:58           746,595 【前置29】Mantle-1.16.5-1.6.127.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2021/10/26  10:58         1,074,217 【前置36】附魔前置cofh_core-1.16.5-1.3.1.jar<br>2021/09/13  00:35           140,636 【前置37】collective-1.16.5-2.64.jar<br>2021/10/26  10:58           140,163 【前置38】Placebo-1.16.5-4.6.0.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2021/09/04  22:58           125,835 【前置40】valhelsia_core-16.0.10.jar<br>2021/10/26  10:58           857,398 【前置41】【辅助】【前置19】或【前置2】添加合成表矿辞统一kubejs-forge-1605.3.18-build.152.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/10/26  10:58           398,661 【前置43】shetiphiancore-1.16-3.8.6.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/10/26  10:58           147,192 【前置4】cavebiomeapi-1.16.5-1.4.0.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/10/26  10:58           246,281 【前置9】饰品栏curios-forge-1.16.5-4.0.5.3.jar<br>2021/07/21  14:07             8,013 【前置】全局数据包globaldataandresourcepacks-1.16.4-1.7.4.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/07/19  17:22           538,708 【杂项】【前置01】extra_boats-1.16.5-2.1.0.jar<br>2021/07/19  18:27           288,116 【杂项】【前置01】动作personality-1.16.5-1.0.2.jar<br>2021/06/04  22:28           962,042 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.1.0.jar<br>2021/07/19  17:23         3,009,108 【杂项】【前置01】甜浆果优化berry_good-1.16.5-4.1.1.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/10/26  10:58           297,941 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.2.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/04/11  15:24            32,462 【杂项】【前置38】末影袋(提升大量储存空间）EnderBags-1.16.4-6.3.1.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/10/26  10:58           500,792 【杂项】储物抽屉StorageDrawers-1.16.3-8.3.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/26  10:58           195,224 【杂项】建筑权杖constructionwand-1.16.5-2.4.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/04/09  23:42            18,175 【杂项】快速树叶腐烂FastLeafDecay-v25.jar<br>2021/10/26  10:58           327,612 【杂项】旅行背包TravelersBackpack-1.16.5-5.4.5.jar<br>2021/04/25  03:41            40,702 【杂项】晃动镜头.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/07/20  17:29         1,402,482 【杂项】更好的洞穴yung_BetterCaves-Forge-1.16.4-1.1.2.jar<br>2021/10/26  10:58             5,019 【杂项】村庄出生点villagespawnpoint_1.16.5-1.8.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/09/12  04:01            11,857 【杂项】村民名称villagernames_1.16.5-3.3.jar<br>2021/10/26  10:52            44,820 【杂项】村民重生VillagersRespawn-1.16.5-1.36.0.4.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/10/26  10:58           396,444 【杂项】荒野之息Paraglider-1.16.5-1.3.2.2.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/06/04  20:58         3,668,858 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.0.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/10/26  10:59         4,589,304 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.28.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/10/26  09:40         7,032,895 【生物】史前动物Prehistoric+Fauna+2.1.1.jar<br>2021/10/26  10:59         1,311,630 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.10.jar<br>2021/10/26  10:05           506,783 【生物】地球版生物restored_earth-1.16.5-1.1.0.jar<br>2021/08/29  20:57         8,878,253 【生物】外来物种Exotic+Critters+1.16+Experimental+1.14.1.jar<br>2021/10/26  09:39         1,100,621 【生物】如题ambientadditions-0.3.1.jar<br>2021/10/26  11:48         2,496,775 【生物】库帕的克里特斯Koopa’s+Critters+1.16.5+II+0.3.3+BETA+3.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/10/26  11:00        14,708,258 【生物】更多下界生物infernal-expansion-2.3.2.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/08/29  21:13        10,032,735 【生物】更多僵尸UNDEADv.1.1release.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/08/29  21:14         1,743,711 【生物】更多挑战DungeonsMod-1.16.3-1.4.40.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/10/27  02:38         8,356,809 【生物】更好动物betteranimalsplus-1.16.5-10.2.0.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/07/19  16:25           235,050 【生物】海洋生物risingtides-1.16.5-1.3.0.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/10/26  10:58           759,862 【生物】灾祸村民illagers_plus-1.16.4v1.7.jar<br>2021/10/26  10:59         2,058,306 【生物】珍奇鸟类exoticbirds-1.16.4-1.2.0.jar<br>2021/10/26  11:15           974,280 【生物】科博尔兹及地牢Kobolds-1.4.6.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/10/26  10:59         9,220,781 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)astemir_forestcraft-1.602.jar<br>2021/10/26  10:58           331,104 【生物】附魔师enchantwithmob-1.16.5-1.5.0.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/08/30  00:25         4,969,566 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/10/22  13:45           756,298 【结构】DungeonCrawl-1.16.5-2.3.2.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/10/26  11:52           614,759 【结构】【前置40】valhelsia_structures-16.0.5.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2021/10/26  10:59         2,562,472 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.0.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/07/20  21:29         4,676,349 【结构】地下城DungeonsArise-1.16.5-2.1.47-release.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2021/10/26  10:42           756,298 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.2.jar<br>2021/10/26  11:01        38,114,528 【结构】大型结构Shrines-1.16.5-2.0.0-SNAPSHOT-13.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/10/26  10:59         5,407,396 【结构】更多结构repurposed_structures_forge-3.3.4+1.16.5.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/10/26  10:58           966,187 【结构】遗迹饰品relics-0.3.0.jar<br>2021/10/22  13:44           281,735 【结构】（墙壁宝石快）Forgotten+Treasures+V12+1.16.5.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/10/26  10:59         1,576,889 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.0.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/06/04  20:58           961,236 【群系】【前置01】秋原autumnity-1.16.5-2.1.1.jar<br>2021/10/26  10:59         6,988,017 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.0.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/07/19  17:31         1,527,658 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.0.jar<br>2021/10/26  10:58           367,720 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.7.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/08/29  20:46        12,798,561 【群系】【前置4】CavesAndCliffsBackport-1.16.5-6.3.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2021/09/03  16:22           461,928 【群系】地狱生物ShretNether+-+Release+-1.3.2.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/07/19  21:50         1,238,112 【群系】探险者explorercraft-5.0.4.jar<br>2021/10/26  11:01        22,430,799 【群系】更好地狱BetterNether_Reforged-1.0.2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/10/26  10:44        10,685,093 【群系】通用群系？genericeco-1.16.5-2.1.jar<br>2021/10/26  10:58           467,595 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.3.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/07/06  10:33         2,049,774 【装备】地下城装备dungeons_gear-1.16.5-3.0.17.jar<br>2021/07/20  22:43         2,033,912 【装饰】cfm-7.0.0pre22-1.16.3.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/07/19  12:49            65,945 【装饰】【前置2】更多竹制品bambooeverything-1.16.5-1.0.0-forge.jar<br>2021/10/26  10:58           937,719 【装饰】【前置30】更好的树叶BetterFoliage-2.7.1-Forge-1.16.5.jar<br>2021/10/26  10:59        12,099,519 【装饰】【前置39】supplementaries-1.16.5-0.17.6.jar<br>2021/10/26  10:59         7,871,642 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.17.jar<br>2021/10/26  10:58         1,013,352 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.jar<br>2021/10/26  10:59         1,541,592 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.10.jar<br>2021/10/26  10:59         8,813,236 【装饰】自然装饰Natural Decor Mod 1.16.5 II V0.22.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  22:52         6,132,491 【装饰】（cfm系）morecfm-1.3.1-1.16.3.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar<br>2021/04/27  11:23            92,540 【辅助】mod设置GameMenuModOption-1.16.4-1.8.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/07/21  14:07            19,362 【辅助】【前置10】jei-professions-1.0.0-1.16.4.jar<br>2021/04/09  02:10            24,981 【辅助】【前置10】JEI拓展jeiintegration_1.16.5-7.0.1.15.jar<br>2021/10/26  10:44            67,686 【辅助】【前置10】JEI效果信息显示jeed-1.16.5-1.3.jar<br>2021/08/29  21:33           235,574 【辅助】【前置10】JEI资源显示JustEnoughResources-1.16.5-0.12.1.128.jar<br>2021/10/26  10:58           270,250 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar<br>2021/07/21  14:06            31,243 【辅助】【前置10】附魔信息JEIEnchantmentInfo-1.16.4-1.2.1.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/07/20  16:16            29,421 【辅助】【前置25】12高亮显示扩展WailaHarvestability-mc1.16.x-forge-1.1.15.jar<br>2021/07/19  15:24            21,734 【辅助】【前置9】盔甲架显示饰品Curious+Armor+Stands-1.16.5-2.1.2.jar<br>2021/10/26  10:58           506,862 【辅助】世界地图XaerosWorldMap_1.18.0_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/07/30  18:11           460,711 【辅助】回收箱Corail-Recycler-NE-1.16.4-385.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/07/20  21:23           330,091 【辅助】搬箱子carryon-1.16.5-1.15.5.15.jar<br>2021/10/26  10:58            86,844 【辅助】时装盔甲CosmeticArmorReworked-1.16.5-v4.jar<br>2021/07/20  23:26            78,198 【辅助】更好的第三人称视角BetterThirdPerson-Forge-1.16.4-1.5.1.jar<br>2021/07/20  22:24             8,514 【辅助】汉化i18nupdatemod-1.16.5-2.0.2-hotfix-4.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/08/02  11:50            46,287 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.1.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/07/29  18:20           120,959 【辅助】（查看物品是否接触过）travelers_index-1.16.4-1.0.2.jar<br>2021/07/19  18:27           585,049 【附魔】【前置01】allurement-1.16.5-1.2.0.jar<br>2021/10/26  10:58            59,309 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.17.jar<br>2021/10/26  10:58           132,851 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.3.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/10/26  11:01        76,505,094 【音效】【前置5】自然音效AmbientSounds_v3.1.10_mc1.16.5.jar<br>2021/06/04  21:01        58,565,641 【音效】【前置6】音效charmonium-forge-1.16.5-2.3.2.jar<br>2021/10/26  10:59        14,746,751 【音效】动态环绕DynamicSurroundings-1.16.5-4.0.5.0.jar<br>2021/07/19  17:16           937,114 【食物】【前置01】neapolitan-1.16.5-2.1.0.jar<br>2021/10/26  10:58           549,400 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.0.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表1.0</title>
    <url>/2021/12/07/MC/modslists/minecraft%5B1.16.5%5D%20%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A81.0/</url>
    <content><![CDATA[<h1 id="走向精华与稳定"><a href="#走向精华与稳定" class="headerlink" title="走向精华与稳定"></a>走向精华与稳定</h1><p>2021/11/11  18:49            71,220 【任务】【前置00】ftb-money-1605.1.3-build.3.jar<br>2021/11/11  17:57           937,588 【任务】【前置00】ftb-quests-forge-1605.3.5-build.72.jar<br>2021/11/25  01:50           171,679 【任务】【前置00】ftb-teams-forge-1605.2.3-build.40.jar<br>2021/11/11  18:05           106,801 【任务】【前置00】item-filters-forge-1605.2.5-build.9.jar<br>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/07/19  18:33            98,900 【优化】内存加载ferritecore-2.0.5-forge.jar<br>2021/11/25  01:50           244,836 【优化】合成冲突化解polymorph-forge-1.16.5-0.33.jar<br>2021/07/19  14:56            60,714 【优化】实体剔除EntityCulling-1.16.5-2.1.6.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/11/25  01:50            97,273 【优化】模组目录catalogue-1.5.0-1.16.5.jar<br>2021/11/25  01:50           135,150 【优化】模组设置configured-1.4.0-1.16.5.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2021/11/13  01:25           232,975 【优化】生物加载performant-1.16.2-5-3.76m.jar<br>2021/11/25  01:50           585,126 【前置00】ftb-library-forge-1605.3.4-build.87.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2021/11/25  01:50           826,748 【前置10】【辅助】jei-1.16.5-7.7.1.137.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/11/05  14:28           593,114 【前置12】帕秋莉Patchouli-1.16.4-53.2.jar<br>2021/11/13  01:49         4,286,350 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24.jar<br>2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/10/26  10:59         2,528,891 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.1.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/11/16  15:16         1,030,440 【前置19】rhino-forge-1605.1.5-build.75.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/11/25  01:50         3,382,391 【前置22】geckolib-forge-1.16.5-3.0.56.jar<br>2021/11/25  01:50         1,472,504 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.9-1.16.5.jar<br>2021/10/26  10:58           254,587 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.0.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/10/26  10:58           746,595 【前置29】Mantle-1.16.5-1.6.127.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2021/10/26  10:58         1,074,217 【前置36】附魔前置cofh_core-1.16.5-1.3.1.jar<br>2021/11/25  01:50           140,939 【前置37】collective-1.16.5-3.0.jar<br>2021/10/26  10:58           140,163 【前置38】Placebo-1.16.5-4.6.0.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2021/11/05  14:28           601,128 【前置40】valhelsia_core-16.0.13a.jar<br>2021/11/25  01:50           910,455 【前置41】【辅助】【前置19】或【前置2】(添加合成表矿辞统一)kubejs-forge-1605.3.19-build.180.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/10/26  10:58           398,661 【前置43】shetiphiancore-1.16-3.8.6.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/11/10  00:01           147,708 【前置4】cavebiomeapi-1.16.5-1.4.2.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/10/26  10:58           246,281 【前置9】饰品栏curios-forge-1.16.5-4.0.5.3.jar<br>2021/07/21  14:07             8,013 【前置】全局数据包globaldataandresourcepacks-1.16.4-1.7.4.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/06/04  22:28           962,042 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.1.0.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/10/26  10:58           297,941 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.2.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/11/15  01:36            14,638 【杂项】【前置9】【前置14】饰品化夸克背包CuriosQuarkOBP-1.16.5-1.0.2.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/10/26  10:58           500,792 【杂项】储物抽屉StorageDrawers-1.16.3-8.3.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/11/25  01:46             8,534 【杂项】汉化i18nupdatemod-1.16.5-2.0.2-hotfix5.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/11/10  00:01           396,387 【杂项】荒野之息Paraglider-1.16.5-1.3.2.6.jar<br>2021/11/05  23:53           540,313 【杂项】菜单定制PackMenu-1.16.5-2.5.0.jar<br>2021/11/11  02:08         2,291,012 【杂项】饰品背包ImprovedBackpacks-1.6.2.0.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/11/05  14:26         1,948,461 【生物】MinecraftEarthMod-2.5.7.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/11/13  01:26         3,682,658 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.1.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/11/25  01:50         4,806,185 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.32.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/10/26  10:59         1,311,630 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.10.jar<br>2021/11/05  14:28           509,209 【生物】地球版生物restored_earth-1.16.5-1.1.1.jar<br>2021/11/05  14:24        10,560,452 【生物】外来物种Exotic+Critters+1.16+Experimental+1.19.jar<br>2021/11/11  00:37         1,251,211 【生物】如题ambientadditions-0.5.1.jar<br>2021/11/25  01:50         2,767,437 【生物】库帕的克里特斯Koopa’s Critters 1.16 IIV0.4.1.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/11/16  15:17        14,521,154 【生物】更多下界生物infernal-expansion-1.16.5-2.4.0.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/11/10  00:02        10,524,585 【生物】更多僵尸UNDEADv.1.3.release+Biome.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/11/05  14:28         1,743,562 【生物】更多挑战DungeonsMod-1.16.3-1.4.41.jar<br>2021/11/02  15:24           714,968 【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/10/27  02:38         8,356,809 【生物】更好动物betteranimalsplus-1.16.5-10.2.0.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/11/05  14:28           760,003 【生物】灾祸村民illagers_plus-1.16.4v1.7.2.jar<br>2021/11/13  01:26         2,058,724 【生物】珍奇鸟类exoticbirds-1.16.4-1.3.0.jar<br>2021/11/15  01:41           999,568 【生物】科博尔兹及地牢Kobolds-1.4.9.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/10/26  10:59         9,220,781 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)astemir_forestcraft-1.602.jar<br>2021/11/05  14:28           333,669 【生物】附魔师enchantwithmob-1.16.5-1.5.1.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/11/16  23:47         4,967,448 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/11/05  14:28           297,282 【结构】AwesomeDungeonForge-1.16.5-1.1.2.jar<br>2021/11/25  02:13         4,149,756 【结构】castle_in_the_sky-1.16.5-0.2.6.jar<br>2021/11/13  01:56           313,216 【结构】more_ships_1.16.5_3.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/11/05  14:28         1,540,395 【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】(开箱子后会拆除塔)dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2021/11/05  14:28         2,562,731 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.2.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/11/25  01:50         5,544,981 【结构】地下城DungeonsArise-1.16.5-2.1.49-beta.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2021/11/25  01:50           761,598 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.4.jar<br>2021/11/25  01:51        38,263,836 【结构】大型结构Shrines-1.16.5-2.0.0-Beta4.jar<br>2021/11/25  01:35           206,580 【结构】天空村庄SkyVillage_1.0.0_1.16.5.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/11/25  01:50         5,576,245 【结构】更多结构repurposed_structures_forge-3.4.5+1.16.5.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/11/25  17:48            49,668 【结构】溪流upstream-1.0.jar<br>2021/11/05  14:28           993,669 【结构】遗迹饰品relics-0.3.1.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/10/26  10:59         1,576,889 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.0.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/06/04  20:58           961,236 【群系】【前置01】秋原autumnity-1.16.5-2.1.1.jar<br>2021/10/26  10:59         6,988,017 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.0.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/07/19  17:31         1,527,658 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.0.jar<br>2021/10/26  10:58           367,720 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.7.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/11/16  15:18        51,506,679 【群系】【前置4】cavesandcliffs-1.16.5-7.1.4.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2021/11/05  01:17           506,465 【群系】地狱生物ShretNether+-+Release+-1.3.3.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/11/16  15:16         1,598,328 【群系】探险者explorercraft-5.0.6.jar<br>2021/11/05  14:29        22,443,866 【群系】更好地狱betternether_reforged-1.2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/10/26  10:44        10,685,093 【群系】通用群系？genericeco-1.16.5-2.1.jar<br>2021/10/26  10:58           467,595 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.3.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/11/10  00:01         2,116,957 【装备】地下城装备dungeons_gear-1.16.5-3.0.20-hotfix.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/11/16  15:17        12,947,922 【装饰】【前置39】supplementaries-1.16.5-0.17.10.jar<br>2021/10/26  10:59         7,871,642 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.17.jar<br>2021/10/26  10:58         1,013,352 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.jar<br>2021/10/26  10:59         1,541,592 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.10.jar<br>2021/11/05  14:28         9,241,804 【装饰】自然装饰NaturalDecorMod 1.16 II V0.23.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/10/26  10:58           270,250 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/07/19  15:24            21,734 【辅助】【前置9】盔甲架显示饰品Curious+Armor+Stands-1.16.5-2.1.2.jar<br>2021/11/25  01:50           509,478 【辅助】世界地图XaerosWorldMap_1.18.3_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/07/20  21:23           330,091 【辅助】搬箱子carryon-1.16.5-1.15.5.15.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/11/05  14:28            46,203 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.2.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/11/11  00:37           588,910 【附魔】【前置01】allurement-1.16.5-1.2.1.jar<br>2021/10/26  10:58            59,309 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.17.jar<br>2021/10/26  10:58           132,851 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.3.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/07/19  17:16           937,114 【食物】【前置01】neapolitan-1.16.5-2.1.0.jar<br>2021/10/26  10:58           549,400 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.0.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表0.7</title>
    <url>/2021/11/05/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A80.7/</url>
    <content><![CDATA[<p>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/09/09  00:56            10,475 【优化】储物抽屉优化drawerfps-2.1.jar<br>2021/07/19  18:33            98,900 【优化】区块加载ferritecore-2.0.5-forge.jar<br>2021/04/26  08:04           437,841 【优化】区块预加载Chunk Pregenerator-V1.16-3.0.5.jar<br>2021/11/05  14:28           239,293 【优化】合成冲突化解polymorph-forge-1.16.5-0.26.jar<br>2021/10/17  21:26         1,675,339 【优化】地形生成TerraForged-1.16.5-0.2.16-BETA-2 .jar<br>2021/07/19  14:56            60,714 【优化】实体优化EntityCulling-1.16.5-2.1.6.jar<br>2021/11/05  15:22             9,554 【优化】属性限制解除AttributeFix-1.16.5-10.1.2.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/10/26  10:58            94,861 【优化】模组目录catalogue-1.3.0-1.16.5.jar<br>2021/10/26  10:58            75,690 【优化】模组设置configured-1.2.0-1.16.3.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2021/11/05  14:28           232,658 【优化】生物AI优化performant-1.16.2-5-3.74m.jar<br>2021/10/26  10:58            18,942 【优化】生物群系修复(争对新添加群系)biomeidfixer-1.16.5-1.0.1.s5.jar<br>2021/04/17  01:14           423,940 【优化】（补丁）随意修复randompatches-2.4.4-forge.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2021/07/21  21:33           812,772 【前置10】【辅助】jei-1.16.5-7.7.1.110.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/11/05  14:28           593,114 【前置12】帕秋莉Patchouli-1.16.4-53.2.jar<br>2021/11/05  14:28         4,223,129 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24.jar<br>2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/10/26  10:59         2,528,891 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.1.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/10/26  10:58         1,026,294 【前置19】rhino-forge-1605.1.4-build.67.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/11/05  14:28         3,382,256 【前置22】geckolib-forge-1.16.5-3.0.51.jar<br>2021/11/05  14:28         1,471,429 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.8-1.16.5.jar<br>2021/10/26  10:58           254,587 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.0.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/10/26  10:58           746,595 【前置29】Mantle-1.16.5-1.6.127.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2021/10/26  10:58         1,074,217 【前置36】附魔前置cofh_core-1.16.5-1.3.1.jar<br>2021/09/13  00:35           140,636 【前置37】collective-1.16.5-2.64.jar<br>2021/10/26  10:58           140,163 【前置38】Placebo-1.16.5-4.6.0.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2021/11/05  14:28           601,128 【前置40】valhelsia_core-16.0.13a.jar<br>2021/10/26  10:58           857,398 【前置41】【辅助】【前置19】或【前置2】添加合成表矿辞统一kubejs-forge-1605.3.18-build.152.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/10/26  10:58           398,661 【前置43】shetiphiancore-1.16-3.8.6.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/11/02  15:34           146,952 【前置4】cavebiomeapi-1.16.5-1.4.1.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/10/26  10:58           246,281 【前置9】饰品栏curios-forge-1.16.5-4.0.5.3.jar<br>2021/07/21  14:07             8,013 【前置】全局数据包globaldataandresourcepacks-1.16.4-1.7.4.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/07/19  17:22           538,708 【杂项】【前置01】extra_boats-1.16.5-2.1.0.jar<br>2021/07/19  18:27           288,116 【杂项】【前置01】动作personality-1.16.5-1.0.2.jar<br>2021/06/04  22:28           962,042 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.1.0.jar<br>2021/07/19  17:23         3,009,108 【杂项】【前置01】甜浆果优化berry_good-1.16.5-4.1.1.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/10/26  10:58           297,941 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.2.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/04/11  15:24            32,462 【杂项】【前置38】末影袋(提升大量储存空间）EnderBags-1.16.4-6.3.1.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/10/26  10:58           500,792 【杂项】储物抽屉StorageDrawers-1.16.3-8.3.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/26  10:58           195,224 【杂项】建筑权杖constructionwand-1.16.5-2.4.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/04/09  23:42            18,175 【杂项】快速树叶腐烂FastLeafDecay-v25.jar<br>2021/10/26  10:58           327,612 【杂项】旅行背包TravelersBackpack-1.16.5-5.4.5.jar<br>2021/04/25  03:41            40,702 【杂项】晃动镜头.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/07/20  17:29         1,402,482 【杂项】更好的洞穴yung_BetterCaves-Forge-1.16.4-1.1.2.jar<br>2021/10/26  10:58             5,019 【杂项】村庄出生点villagespawnpoint_1.16.5-1.8.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/09/12  04:01            11,857 【杂项】村民名称villagernames_1.16.5-3.3.jar<br>2021/10/26  10:52            44,820 【杂项】村民重生VillagersRespawn-1.16.5-1.36.0.4.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/10/26  10:58           396,444 【杂项】荒野之息Paraglider-1.16.5-1.3.2.2.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/11/05  14:26         1,948,461 【生物】MinecraftEarthMod-2.5.7.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/06/04  20:58         3,668,858 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.0.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/11/05  14:28         4,589,626 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.30.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/10/26  10:59         1,311,630 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.10.jar<br>2021/11/05  14:28           509,209 【生物】地球版生物restored_earth-1.16.5-1.1.1.jar<br>2021/11/05  14:24        10,560,452 【生物】外来物种Exotic+Critters+1.16+Experimental+1.19.jar<br>2021/10/26  09:39         1,100,621 【生物】如题ambientadditions-0.3.1.jar<br>2021/11/05  14:28         2,556,106 【生物】库帕的克里特斯Koopas Critters 1.16.5 II V0.3.3 Beta 4.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/10/26  11:00        14,708,258 【生物】更多下界生物infernal-expansion-2.3.2.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/08/29  21:13        10,032,735 【生物】更多僵尸UNDEADv.1.1release.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/11/05  14:28         1,743,562 【生物】更多挑战DungeonsMod-1.16.3-1.4.41.jar<br>2021/11/02  15:24           714,968 【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/10/27  02:38         8,356,809 【生物】更好动物betteranimalsplus-1.16.5-10.2.0.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/07/19  16:25           235,050 【生物】海洋生物risingtides-1.16.5-1.3.0.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/11/05  14:28           760,003 【生物】灾祸村民illagers_plus-1.16.4v1.7.2.jar<br>2021/10/26  10:59         2,058,306 【生物】珍奇鸟类exoticbirds-1.16.4-1.2.0.jar<br>2021/10/26  11:15           974,280 【生物】科博尔兹及地牢Kobolds-1.4.6.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/10/26  10:59         9,220,781 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)astemir_forestcraft-1.602.jar<br>2021/11/05  14:28           333,669 【生物】附魔师enchantwithmob-1.16.5-1.5.1.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/08/30  00:25         4,969,566 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/11/05  14:28           297,282 【结构】AwesomeDungeonForge-1.16.5-1.1.2.jar<br>2021/10/22  13:45           756,298 【结构】DungeonCrawl-1.16.5-2.3.2.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/11/05  14:28         1,540,395 【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】(开箱子后会拆除塔)dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2021/11/05  14:28         2,562,731 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.2.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/07/20  21:29         4,676,349 【结构】地下城DungeonsArise-1.16.5-2.1.47-release.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2021/10/26  10:42           756,298 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.2.jar<br>2021/10/26  11:01        38,114,528 【结构】大型结构Shrines-1.16.5-2.0.0-SNAPSHOT-13.jar<br>2021/11/05  14:24           100,134 【结构】小型结构skyssmallstructures.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/11/05  14:28         5,581,329 【结构】更多结构repurposed_structures_forge-3.4.1+1.16.5.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/11/05  14:28           993,669 【结构】遗迹饰品relics-0.3.1.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/10/26  10:59         1,576,889 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.0.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/06/04  20:58           961,236 【群系】【前置01】秋原autumnity-1.16.5-2.1.1.jar<br>2021/10/26  10:59         6,988,017 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.0.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/07/19  17:31         1,527,658 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.0.jar<br>2021/10/26  10:58           367,720 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.7.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/11/02  15:35        51,463,042 【群系】【前置4】cavesandcliffs-1.16.5-7.0.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2021/11/05  01:17           506,465 【群系】地狱生物ShretNether+-+Release+-1.3.3.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/11/05  14:28         1,585,566 【群系】探险者explorercraft-5.0.5.jar<br>2021/11/05  14:29        22,443,866 【群系】更好地狱betternether_reforged-1.2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/10/26  10:44        10,685,093 【群系】通用群系？genericeco-1.16.5-2.1.jar<br>2021/10/26  10:58           467,595 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.3.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/07/06  10:33         2,049,774 【装备】地下城装备dungeons_gear-1.16.5-3.0.17.jar<br>2021/07/20  22:43         2,033,912 【装饰】cfm-7.0.0pre22-1.16.3.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/07/19  12:49            65,945 【装饰】【前置2】更多竹制品bambooeverything-1.16.5-1.0.0-forge.jar<br>2021/10/26  10:58           937,719 【装饰】【前置30】更好的树叶BetterFoliage-2.7.1-Forge-1.16.5.jar<br>2021/11/05  14:29        12,235,658 【装饰】【前置39】supplementaries-1.16.5-0.17.8.jar<br>2021/10/26  10:59         7,871,642 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.17.jar<br>2021/10/26  10:58         1,013,352 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.jar<br>2021/10/26  10:59         1,541,592 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.10.jar<br>2021/11/05  14:28         9,241,804 【装饰】自然装饰NaturalDecorMod 1.16 II V0.23.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  22:52         6,132,491 【装饰】（cfm系）morecfm-1.3.1-1.16.3.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar<br>2021/04/27  11:23            92,540 【辅助】mod设置GameMenuModOption-1.16.4-1.8.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/07/21  14:07            19,362 【辅助】【前置10】jei-professions-1.0.0-1.16.4.jar<br>2021/04/09  02:10            24,981 【辅助】【前置10】JEI拓展jeiintegration_1.16.5-7.0.1.15.jar<br>2021/10/26  10:44            67,686 【辅助】【前置10】JEI效果信息显示jeed-1.16.5-1.3.jar<br>2021/08/29  21:33           235,574 【辅助】【前置10】JEI资源显示JustEnoughResources-1.16.5-0.12.1.128.jar<br>2021/10/26  10:58           270,250 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar<br>2021/07/21  14:06            31,243 【辅助】【前置10】附魔信息JEIEnchantmentInfo-1.16.4-1.2.1.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/07/20  16:16            29,421 【辅助】【前置25】12高亮显示扩展WailaHarvestability-mc1.16.x-forge-1.1.15.jar<br>2021/07/19  15:24            21,734 【辅助】【前置9】盔甲架显示饰品Curious+Armor+Stands-1.16.5-2.1.2.jar<br>2021/11/05  14:28           507,997 【辅助】世界地图XaerosWorldMap_1.18.1_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/07/30  18:11           460,711 【辅助】回收箱Corail-Recycler-NE-1.16.4-385.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/07/20  21:23           330,091 【辅助】搬箱子carryon-1.16.5-1.15.5.15.jar<br>2021/10/26  10:58            86,844 【辅助】时装盔甲CosmeticArmorReworked-1.16.5-v4.jar<br>2021/07/20  23:26            78,198 【辅助】更好的第三人称视角BetterThirdPerson-Forge-1.16.4-1.5.1.jar<br>2021/07/20  22:24             8,514 【辅助】汉化i18nupdatemod-1.16.5-2.0.2-hotfix-4.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/11/05  14:28            46,203 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.2.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/07/29  18:20           120,959 【辅助】（查看物品是否接触过）travelers_index-1.16.4-1.0.2.jar<br>2021/07/19  18:27           585,049 【附魔】【前置01】allurement-1.16.5-1.2.0.jar<br>2021/10/26  10:58            59,309 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.17.jar<br>2021/10/26  10:58           132,851 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.3.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/10/26  11:01        76,505,094 【音效】【前置5】自然音效AmbientSounds_v3.1.10_mc1.16.5.jar<br>2021/06/04  21:01        58,565,641 【音效】【前置6】音效charmonium-forge-1.16.5-2.3.2.jar<br>2021/10/26  10:59        14,746,751 【音效】动态环绕DynamicSurroundings-1.16.5-4.0.5.0.jar<br>2021/07/19  17:16           937,114 【食物】【前置01】neapolitan-1.16.5-2.1.0.jar<br>2021/10/26  10:58           549,400 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.0.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表0.8</title>
    <url>/2021/11/10/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A80.8/</url>
    <content><![CDATA[<p>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/09/09  00:56            10,475 【优化】储物抽屉优化drawerfps-2.1.jar<br>2021/07/19  18:33            98,900 【优化】区块加载ferritecore-2.0.5-forge.jar<br>2021/04/26  08:04           437,841 【优化】区块预加载Chunk Pregenerator-V1.16-3.0.5.jar<br>2021/11/10  00:01           239,700 【优化】合成冲突化解polymorph-forge-1.16.5-0.28.jar<br>2021/10/17  21:26         1,675,339 【优化】地形生成TerraForged-1.16.5-0.2.16-BETA-2 .jar<br>2021/07/19  14:56            60,714 【优化】实体优化EntityCulling-1.16.5-2.1.6.jar<br>2021/11/10  00:01             9,554 【优化】属性限制解除AttributeFix-1.16.5-10.1.3.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/10/26  10:58            94,861 【优化】模组目录catalogue-1.3.0-1.16.5.jar<br>2021/10/26  10:58            75,690 【优化】模组设置configured-1.2.0-1.16.3.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2021/11/10  00:01           232,958 【优化】生物AI优化performant-1.16.2-5-3.75m.jar<br>2021/10/26  10:58            18,942 【优化】生物群系修复(争对新添加群系)biomeidfixer-1.16.5-1.0.1.s5.jar<br>2021/04/17  01:14           423,940 【优化】（补丁）随意修复randompatches-2.4.4-forge.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2021/07/21  21:33           812,772 【前置10】【辅助】jei-1.16.5-7.7.1.110.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/11/05  14:28           593,114 【前置12】帕秋莉Patchouli-1.16.4-53.2.jar<br>2021/11/05  14:28         4,223,129 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24.jar<br>2021/10/20  14:42         8,768,876 【前置14】【前置21】Quark-r2.4-319.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/10/26  10:59         2,528,891 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.1.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/11/10  00:01         1,030,352 【前置19】rhino-forge-1605.1.5-build.73.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/11/05  14:28         3,382,256 【前置22】geckolib-forge-1.16.5-3.0.51.jar<br>2021/11/05  14:28         1,471,429 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.8-1.16.5.jar<br>2021/10/26  10:58           254,587 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.0.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/10/26  10:58           746,595 【前置29】Mantle-1.16.5-1.6.127.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2021/10/26  10:58         1,074,217 【前置36】附魔前置cofh_core-1.16.5-1.3.1.jar<br>2021/09/13  00:35           140,636 【前置37】collective-1.16.5-2.64.jar<br>2021/10/26  10:58           140,163 【前置38】Placebo-1.16.5-4.6.0.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2021/11/05  14:28           601,128 【前置40】valhelsia_core-16.0.13a.jar<br>2021/11/10  00:01           858,120 【前置41】【辅助】【前置19】或【前置2】(添加合成表矿辞统一)kubejs-forge-1605.3.18-build.154.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/10/26  10:58           398,661 【前置43】shetiphiancore-1.16-3.8.6.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/11/10  00:01           147,708 【前置4】cavebiomeapi-1.16.5-1.4.2.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/10/26  10:58           246,281 【前置9】饰品栏curios-forge-1.16.5-4.0.5.3.jar<br>2021/07/21  14:07             8,013 【前置】全局数据包globaldataandresourcepacks-1.16.4-1.7.4.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/07/19  17:22           538,708 【杂项】【前置01】extra_boats-1.16.5-2.1.0.jar<br>2021/07/19  18:27           288,116 【杂项】【前置01】动作personality-1.16.5-1.0.2.jar<br>2021/06/04  22:28           962,042 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.1.0.jar<br>2021/07/19  17:23         3,009,108 【杂项】【前置01】甜浆果优化berry_good-1.16.5-4.1.1.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/10/26  10:58           297,941 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.2.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/09/21  01:42            12,082 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.6.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/04/11  15:24            32,462 【杂项】【前置38】末影袋(提升大量储存空间）EnderBags-1.16.4-6.3.1.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/10/26  10:58           500,792 【杂项】储物抽屉StorageDrawers-1.16.3-8.3.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/26  10:58           195,224 【杂项】建筑权杖constructionwand-1.16.5-2.4.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/04/09  23:42            18,175 【杂项】快速树叶腐烂FastLeafDecay-v25.jar<br>2021/10/26  10:58           327,612 【杂项】旅行背包TravelersBackpack-1.16.5-5.4.5.jar<br>2021/04/25  03:41            40,702 【杂项】晃动镜头.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/07/20  17:29         1,402,482 【杂项】更好的洞穴yung_BetterCaves-Forge-1.16.4-1.1.2.jar<br>2021/10/26  10:58             5,019 【杂项】村庄出生点villagespawnpoint_1.16.5-1.8.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/09/12  04:01            11,857 【杂项】村民名称villagernames_1.16.5-3.3.jar<br>2021/10/26  10:52            44,820 【杂项】村民重生VillagersRespawn-1.16.5-1.36.0.4.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/11/10  00:01           396,387 【杂项】荒野之息Paraglider-1.16.5-1.3.2.6.jar<br>2021/11/05  23:53           540,313 【杂项】菜单定制PackMenu-1.16.5-2.5.0.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/11/05  14:26         1,948,461 【生物】MinecraftEarthMod-2.5.7.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/07/19  17:23           841,753 【生物】【前置01】buzzier_bees-1.16.5-3.0.1.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/06/04  20:58         3,668,858 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.0.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/11/05  14:28         4,589,626 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.30.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/10/26  10:59         1,311,630 【生物】地下城怪物dungeons_mobs-1.16.5-1.0.10.jar<br>2021/11/05  14:28           509,209 【生物】地球版生物restored_earth-1.16.5-1.1.1.jar<br>2021/11/05  14:24        10,560,452 【生物】外来物种Exotic+Critters+1.16+Experimental+1.19.jar<br>2021/11/10  00:01         1,170,522 【生物】如题ambientadditions-0.4.0.jar<br>2021/11/05  14:28         2,556,106 【生物】库帕的克里特斯Koopas Critters 1.16.5 II V0.3.3 Beta 4.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/10/26  11:00        14,708,258 【生物】更多下界生物infernal-expansion-2.3.2.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/11/10  00:02        10,524,585 【生物】更多僵尸UNDEADv.1.3.release+Biome.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/11/05  14:28         1,743,562 【生物】更多挑战DungeonsMod-1.16.3-1.4.41.jar<br>2021/11/02  15:24           714,968 【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/10/27  02:38         8,356,809 【生物】更好动物betteranimalsplus-1.16.5-10.2.0.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/07/19  16:25           235,050 【生物】海洋生物risingtides-1.16.5-1.3.0.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/11/05  14:28           760,003 【生物】灾祸村民illagers_plus-1.16.4v1.7.2.jar<br>2021/10/26  10:59         2,058,306 【生物】珍奇鸟类exoticbirds-1.16.4-1.2.0.jar<br>2021/10/26  11:15           974,280 【生物】科博尔兹及地牢Kobolds-1.4.6.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/10/26  10:59         9,220,781 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)astemir_forestcraft-1.602.jar<br>2021/11/05  14:28           333,669 【生物】附魔师enchantwithmob-1.16.5-1.5.1.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/08/30  00:25         4,969,566 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/11/05  14:28           297,282 【结构】AwesomeDungeonForge-1.16.5-1.1.2.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/11/05  14:28         1,540,395 【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】(开箱子后会拆除塔)dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2021/11/05  14:28         2,562,731 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.2.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/07/20  21:29         4,676,349 【结构】地下城DungeonsArise-1.16.5-2.1.47-release.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2021/11/10  00:01           760,148 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.3.jar<br>2021/11/10  00:01        38,179,256 【结构】大型结构Shrines-1.16.5-2.0.0-SNAPSHOT-15.jar<br>2021/11/05  14:24           100,134 【结构】小型结构skyssmallstructures.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/11/10  00:01         5,577,468 【结构】更多结构repurposed_structures_forge-3.4.2+1.16.5.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/11/05  14:28           993,669 【结构】遗迹饰品relics-0.3.1.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/10/26  10:59         1,576,889 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.0.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/06/04  20:58           961,236 【群系】【前置01】秋原autumnity-1.16.5-2.1.1.jar<br>2021/10/26  10:59         6,988,017 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.0.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/07/19  17:31         1,527,658 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.0.jar<br>2021/10/26  10:58           367,720 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.7.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/11/10  00:01        51,459,827 【群系】【前置4】cavesandcliffs-1.16.5-7.1.2.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2021/11/05  01:17           506,465 【群系】地狱生物ShretNether+-+Release+-1.3.3.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/11/05  14:28         1,585,566 【群系】探险者explorercraft-5.0.5.jar<br>2021/11/05  14:29        22,443,866 【群系】更好地狱betternether_reforged-1.2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/10/26  10:44        10,685,093 【群系】通用群系？genericeco-1.16.5-2.1.jar<br>2021/10/26  10:58           467,595 【装备】【前置9】【前置11】奇异饰品Artifacts-1.16.5-2.10.3.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/11/10  00:01         2,116,957 【装备】地下城装备dungeons_gear-1.16.5-3.0.20-hotfix.jar<br>2021/07/20  22:43         2,033,912 【装饰】cfm-7.0.0pre22-1.16.3.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/07/19  12:49            65,945 【装饰】【前置2】更多竹制品bambooeverything-1.16.5-1.0.0-forge.jar<br>2021/10/26  10:58           937,719 【装饰】【前置30】更好的树叶BetterFoliage-2.7.1-Forge-1.16.5.jar<br>2021/11/05  14:29        12,235,658 【装饰】【前置39】supplementaries-1.16.5-0.17.8.jar<br>2021/10/26  10:59         7,871,642 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.17.jar<br>2021/10/26  10:58         1,013,352 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.jar<br>2021/10/26  10:59         1,541,592 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.10.jar<br>2021/11/05  14:28         9,241,804 【装饰】自然装饰NaturalDecorMod 1.16 II V0.23.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  22:52         6,132,491 【装饰】（cfm系）morecfm-1.3.1-1.16.3.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar<br>2021/04/27  11:23            92,540 【辅助】mod设置GameMenuModOption-1.16.4-1.8.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/07/21  14:07            19,362 【辅助】【前置10】jei-professions-1.0.0-1.16.4.jar<br>2021/04/09  02:10            24,981 【辅助】【前置10】JEI拓展jeiintegration_1.16.5-7.0.1.15.jar<br>2021/10/26  10:44            67,686 【辅助】【前置10】JEI效果信息显示jeed-1.16.5-1.3.jar<br>2021/08/29  21:33           235,574 【辅助】【前置10】JEI资源显示JustEnoughResources-1.16.5-0.12.1.128.jar<br>2021/10/26  10:58           270,250 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar<br>2021/07/21  14:06            31,243 【辅助】【前置10】附魔信息JEIEnchantmentInfo-1.16.4-1.2.1.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/07/20  16:16            29,421 【辅助】【前置25】12高亮显示扩展WailaHarvestability-mc1.16.x-forge-1.1.15.jar<br>2021/07/19  15:24            21,734 【辅助】【前置9】盔甲架显示饰品Curious+Armor+Stands-1.16.5-2.1.2.jar<br>2021/11/05  14:28           507,997 【辅助】世界地图XaerosWorldMap_1.18.1_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/07/30  18:11           460,711 【辅助】回收箱Corail-Recycler-NE-1.16.4-385.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/07/20  21:23           330,091 【辅助】搬箱子carryon-1.16.5-1.15.5.15.jar<br>2021/10/26  10:58            86,844 【辅助】时装盔甲CosmeticArmorReworked-1.16.5-v4.jar<br>2021/07/20  23:26            78,198 【辅助】更好的第三人称视角BetterThirdPerson-Forge-1.16.4-1.5.1.jar<br>2021/07/20  22:24             8,514 【辅助】汉化i18nupdatemod-1.16.5-2.0.2-hotfix-4.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/11/05  14:28            46,203 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.2.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/07/29  18:20           120,959 【辅助】（查看物品是否接触过）travelers_index-1.16.4-1.0.2.jar<br>2021/07/19  18:27           585,049 【附魔】【前置01】allurement-1.16.5-1.2.0.jar<br>2021/10/26  10:58            59,309 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.17.jar<br>2021/10/26  10:58           132,851 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.3.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/11/10  00:02        76,505,097 【音效】【前置5】自然音效AmbientSounds_v3.1.11_mc1.16.5.jar<br>2021/06/04  21:01        58,565,641 【音效】【前置6】音效charmonium-forge-1.16.5-2.3.2.jar<br>2021/10/26  10:59        14,746,751 【音效】动态环绕DynamicSurroundings-1.16.5-4.0.5.0.jar<br>2021/07/19  17:16           937,114 【食物】【前置01】neapolitan-1.16.5-2.1.0.jar<br>2021/10/26  10:58           549,400 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.0.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表1.1</title>
    <url>/2021/12/27/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A81.1/</url>
    <content><![CDATA[<p>大量新增与更新<br>2021/11/11  18:49            71,220 【任务】【前置00】ftb-money-1605.1.3-build.3.jar<br>2021/12/22  21:46           943,584 【任务】【前置00】ftb-quests-forge-1605.3.6-build.76.jar<br>2021/11/25  01:50           171,679 【任务】【前置00】ftb-teams-forge-1605.2.3-build.40.jar<br>2021/11/11  18:05           106,801 【任务】【前置00】item-filters-forge-1605.2.5-build.9.jar<br>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/07/19  18:33            98,900 【优化】内存加载ferritecore-2.0.5-forge.jar<br>2021/12/22  21:46           244,522 【优化】合成冲突化解polymorph-forge-1.16.5-0.37.jar<br>2021/07/19  14:56            60,714 【优化】实体剔除EntityCulling-1.16.5-2.1.6.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/11/25  01:50            97,273 【优化】模组目录catalogue-1.5.0-1.16.5.jar<br>2021/12/03  22:46           136,584 【优化】模组设置configured-1.5.1-1.16.5.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2021/12/22  21:46           234,623 【优化】生物加载performant-1.16.2-5-3.81m.jar<br>2021/12/14  21:50           585,125 【前置00】ftb-library-forge-1605.3.4-build.90.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2021/12/14  21:50           826,731 【前置10】【辅助】jei-1.16.5-7.7.1.138.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/11/05  14:28           593,114 【前置12】帕秋莉Patchouli-1.16.4-53.2.jar<br>2021/11/13  01:49         4,286,350 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24.jar<br>2021/12/03  22:47         8,797,129 【前置14】【前置21】Quark-r2.4-321.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/12/23  01:13         2,535,453 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.4.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/11/16  15:16         1,030,440 【前置19】rhino-forge-1605.1.5-build.75.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2021/12/07  18:47         3,382,393 【前置22】geckolib-forge-1.16.5-3.0.57.jar<br>2021/11/25  01:50         1,472,504 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.9-1.16.5.jar<br>2021/12/03  23:04            90,019 【前置24】dungeons_libraries-1.16.5-0.0.3-beta.jar<br>2021/10/26  10:58           254,587 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.0.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/12/22  21:46           805,040 【前置29】Mantle-1.16.5-1.6.152.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/12/24  15:56           542,288 【前置2】architectury-1.26.42.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2021/12/24  15:54            56,607 【前置34】Iceberg-1.16.5-1.0.30.jar<br>2021/12/14  21:50         1,232,846 【前置36】附魔前置cofh_core-1.16.5-1.4.0.6.jar<br>2021/12/03  22:46           141,872 【前置37】collective_1.16.5_3.8.jar<br>2021/12/03  22:46           145,933 【前置38】Placebo-1.16.5-4.6.1.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2021/12/26  18:09           601,667 【前置40】valhelsia_core-16.0.14.jar<br>2021/12/07  18:47           915,322 【前置41】【辅助】【前置19】或【前置2】(添加合成表矿辞统一)kubejs-forge-1605.3.19-build.229.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2021/12/15  20:24           417,902 【前置43】shetiphiancore-1.16-3.8.7.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/11/10  00:01           147,708 【前置4】cavebiomeapi-1.16.5-1.4.2.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2021/12/22  21:46           266,819 【前置9】饰品栏curios-forge-1.16.5-4.0.6.7.jar<br>2021/12/14  21:50            15,479 【前置】全局数据包globaldataandresourcepacks-1.16.5-1.10.2.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/12/14  21:50         1,271,118 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.2.0.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/10/26  10:58           297,941 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.1.2.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/12/24  15:54            18,557 【杂项】【前置34】物品品质框ItemBorders-1.16.5-1.1.2.jar<br>2021/12/24  17:05            23,045 【杂项】【前置34】物品边框LegendaryTooltips-1.16.5-1.1.5.jar<br>2021/12/03  22:46            12,875 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.8.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/12/15  20:43           593,065 【杂项】【前置45】专业副本Infinite_Dungeons-1.16.5-1.0.9.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/11/15  01:36            14,638 【杂项】【前置9】【前置14】饰品化夸克背包CuriosQuarkOBP-1.16.5-1.0.2.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/12/23  01:16           779,545 【杂项】下界扩展又nether-s-exoticism-1.16.5-1.1.3.jar<br>2021/12/22  22:13         1,249,382 【杂项】下界矿石Nether+Ores+Plus+++1.5.2+-+1.16.5.jar<br>2021/12/22  21:46           537,646 【杂项】储物抽屉StorageDrawers-1.16.3-8.4.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/12/24  15:43            17,627 【杂项】树叶快速掉落RapidLeafDecay-1.16.5-2.0.0.jar<br>2021/12/03  22:46             8,537 【杂项】汉化i18nupdatemod-1.16.5.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/12/24  15:43             4,834 【杂项】环境噪点AmbientEnvironment-5.0.0.11.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2021/12/03  22:46           396,514 【杂项】荒野之息Paraglider-1.16.5-1.3.2.7.jar<br>2021/11/05  23:53           540,313 【杂项】菜单定制PackMenu-1.16.5-2.5.0.jar<br>2021/11/11  02:08         2,291,012 【杂项】饰品背包ImprovedBackpacks-1.6.2.0.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/12/22  22:23         1,162,470 【生物】(勉强通过)animalsss-0.8.jar<br>2021/12/22  22:22           901,412 【生物】(缝合怪)mobsgenus-0.4.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/11/05  14:26         1,948,461 【生物】MinecraftEarthMod-2.5.7.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/12/14  21:50           840,640 【生物】【前置01】buzzier_bees-1.16.5-3.0.3.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/12/14  21:51         3,682,686 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.2.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/12/03  22:46         2,413,584 【生物】【前置24】地下城怪物dungeons_mobs-1.16.5-2.0.1-beta.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/12/16  20:08           955,466 【生物】【前置7】Untamed+WildLife.jar<br>2021/12/07  18:47         4,806,172 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.34.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2021/12/22  22:21           507,051 【生物】哥布林goblins-0.2.jar<br>2021/12/15  20:23           792,654 【生物】地球版生物restored_earth-1.16.5-1.3.0.jar<br>2021/11/05  14:24        10,560,452 【生物】外来物种Exotic+Critters+1.16+Experimental+1.19.jar<br>2021/11/11  00:37         1,251,211 【生物】如题ambientadditions-0.5.1.jar<br>2021/12/22  22:22           158,032 【生物】巨魔trolls-0.1.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/11/16  15:17        14,521,154 【生物】更多下界生物infernal-expansion-1.16.5-2.4.0.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/11/10  00:02        10,524,585 【生物】更多僵尸UNDEADv.1.3.release+Biome.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/12/07  18:47         1,743,846 【生物】更多挑战DungeonsMod-1.16.3-1.4.43.jar<br>2021/11/02  15:24           714,968 【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2021/12/26  18:09         2,156,364 【生物】更好动物betteranimalsplus-1.16.5-11.0.0-forge.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/12/24  15:54           376,140 【生物】海洋AbyssalDepths-1.16.5-1.0.1.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/11/05  14:28           760,003 【生物】灾祸村民illagers_plus-1.16.4v1.7.2.jar<br>2021/12/24  17:31         3,539,887 【生物】狗头人Koopa’s Critters 1.16 II V1.0.jar<br>2021/11/13  01:26         2,058,724 【生物】珍奇鸟类exoticbirds-1.16.4-1.3.0.jar<br>2021/11/15  01:41           999,568 【生物】科博尔兹及地牢Kobolds-1.4.9.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/12/26  18:09         9,241,688 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)forestcraft-1.603.jar<br>2021/12/03  22:46           333,707 【生物】附魔师enchantwithmob-1.16.5-1.5.2.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/11/16  23:47         4,967,448 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2021/11/25  02:13         4,149,756 【结构】castle_in_the_sky-1.16.5-0.2.6.jar<br>2021/11/13  01:56           313,216 【结构】more_ships_1.16.5_3.jar<br>2021/10/22  13:44           590,639 【结构】StructuresPlusEnd.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/11/05  14:28         1,540,395 【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】(开箱子后会拆除塔)dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2021/12/15  21:52         9,540,039 【结构】【前置7】灾难Cataclysm-0.08.jar<br>2021/11/05  14:28         2,562,731 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.2.jar<br>2021/12/22  21:46           297,282 【结构】了不起的地牢AwesomeDungeonForge-1.16.5-1.1.4.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2021/11/25  01:50         5,544,981 【结构】地下城DungeonsArise-1.16.5-2.1.49-beta.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2021/12/23  01:13           778,769 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.5.jar<br>2021/12/23  00:31         1,255,806 【结构】大型结构Shrines-1.16.5-2.0.0-Beta7.jar<br>2021/12/24  15:48           206,580 【结构】天空村庄SkyVillage_1.0.0_1.16.5.jar<br>2021/04/20  20:54           157,181 【结构】旷野塔towers_of_the_wild-1.16.4-2.0.1.jar<br>2021/12/14  21:50         5,576,490 【结构】更多结构repurposed_structures_forge-3.4.7+1.16.5.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2021/12/15  20:44            94,105 【结构】测试性dungeons-chasms.jar<br>2021/11/25  17:48            49,668 【结构】溪流upstream-1.0.jar<br>2021/12/23  01:45           759,530 【结构】空岛地牢Soaring-Structures-2-1.16.5-2.0.jar<br>2021/11/05  14:28           993,669 【结构】遗迹饰品relics-0.3.1.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/12/22  21:46         1,577,173 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.1.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/12/22  22:23         4,907,893 【群系】simplybiomes-0.5.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/12/07  18:47           978,332 【群系】【前置01】秋原autumnity-1.16.5-2.1.2.jar<br>2021/12/14  21:51         7,004,513 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.1.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/12/07  18:47         1,535,248 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.1.jar<br>2021/10/26  10:58           367,720 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.0.7.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2021/11/16  15:18        51,506,679 【群系】【前置4】cavesandcliffs-1.16.5-7.1.4.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2021/12/07  18:47           561,462 【群系】地狱生物ShretNether - Release -1.3.4.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/11/16  15:16         1,598,328 【群系】探险者explorercraft-5.0.6.jar<br>2021/11/05  14:29        22,443,866 【群系】更好地狱betternether_reforged-1.2.jar<br>2021/12/15  20:43         6,553,790 【群系】末地添加EndAdditions(Forge)-1.13.jar<br>2021/12/22  22:21           593,427 【群系】滋养下界NourishedNetherV8.jar<br>2021/12/23  01:34         2,732,447 【群系】滋养末地NourishedEndV2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/12/14  21:51        10,681,350 【群系】通用群系genericeco-1.16.5-2.3.jar<br>2021/12/24  12:53           467,569 【装备】【前置9】【前置11】Artifacts-1.16.5-2.10.4.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/12/03  22:46         2,220,332 【装备】地下城装备dungeons_gear-1.16.5-3.1.2-beta.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/12/03  22:47        13,859,311 【装饰】【前置39】supplementaries-1.16.5-0.17.12b.jar<br>2021/12/14  21:51         7,871,701 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.18.jar<br>2021/10/26  10:58         1,013,352 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.jar<br>2021/12/07  18:47         1,557,189 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.11.jar<br>2021/12/15  20:44           595,183 【装饰】生境habitat-1.0.1.jar<br>2021/11/05  14:28         9,241,804 【装饰】自然装饰NaturalDecorMod 1.16 II V0.23.jar<br>2021/04/25  00:11            61,580 【装饰】花finallyfarmabledyes-1.16.4-1.2.0.1.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2021/08/07  00:01            30,493 【辅助】jei找东西findme-1.16.3-2.2.0.0.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/10/26  10:58           270,250 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/12/22  21:46            21,587 【辅助】【前置9】盔甲架显示饰品Curious Armor Stands-1.16.5-2.2.0.jar<br>2021/12/22  21:46           512,693 【辅助】世界地图XaerosWorldMap_1.18.8_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/12/26  18:09           322,836 【辅助】搬箱子carryon-1.16.5-1.15.5.22.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/11/05  14:28            46,203 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.2.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/11/11  00:37           588,910 【附魔】【前置01】allurement-1.16.5-1.2.1.jar<br>2021/12/14  21:50            59,391 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.18.jar<br>2021/12/14  21:50           133,379 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.4.0.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/12/15  20:24         4,320,518 【食物】【前置01】neapolitan-1.16.5-2.2.1.jar<br>2021/12/07  18:47           553,175 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.1.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>minecraft[1.16.5]现用模组表1.2</title>
    <url>/2022/01/12/MC/modslists/minecraft%5B1.16.5%5D%E7%8E%B0%E7%94%A8%E6%A8%A1%E7%BB%84%E8%A1%A81.2/</url>
    <content><![CDATA[<p>2021/11/11  18:49            71,220 【任务】【前置00】ftb-money-1605.1.3-build.3.jar<br>2021/12/22  21:46           943,584 【任务】【前置00】ftb-quests-forge-1605.3.6-build.76.jar<br>2021/11/25  01:50           171,679 【任务】【前置00】ftb-teams-forge-1605.2.3-build.40.jar<br>2021/11/11  18:05           106,801 【任务】【前置00】item-filters-forge-1605.2.5-build.9.jar<br>2021/04/24  04:52            23,054 【优化】【前置15】byg群系生成修复chocolate-1.3.0-1.16.4.jar<br>2021/07/19  18:33            98,900 【优化】内存加载ferritecore-2.0.5-forge.jar<br>2022/01/07  02:15           245,533 【优化】合成冲突化解polymorph-forge-1.16.5-0.38.jar<br>2021/07/19  14:56            60,714 【优化】实体剔除EntityCulling-1.16.5-2.1.6.jar<br>2021/04/10  00:04            84,744 【优化】平滑加载smoothboot-forge-1.16.4-1.2.2.jar<br>2021/11/25  01:50            97,273 【优化】模组目录catalogue-1.5.0-1.16.5.jar<br>2021/12/03  22:46           136,584 【优化】模组设置configured-1.5.1-1.16.5.jar<br>2021/05/04  07:33            13,677 【优化】渲染优化（针对多人） out_of_sight-1.16.4-1.0.1.jar<br>2022/01/09  16:43           234,733 【优化】生物加载performant-1.16.2-5-3.82m.jar<br>2021/12/14  21:50           585,125 【前置00】ftb-library-forge-1605.3.4-build.90.jar<br>2021/10/26  10:58           975,289 【前置01】abnormals_core-1.16.5-3.3.0.jar<br>2022/01/12  14:44           827,088 【前置10】【辅助】jei-1.16.5-7.7.1.144.jar<br>2021/07/19  15:23            43,358 【前置11】expandability-2.0.1-forge.jar<br>2021/11/05  14:28           593,114 【前置12】帕秋莉Patchouli-1.16.4-53.2.jar<br>2021/11/13  01:49         4,286,350 【前置13】【生物】【前置12】mysticalworld-1.16.5-0.3.5.24.jar<br>2021/12/03  22:47         8,797,129 【前置14】【前置21】Quark-r2.4-321.jar<br>2021/10/26  11:00        10,314,611 【前置15】【群系】byg-1.3.5.jar<br>2021/04/09  23:44           328,828 【前置16】【食物】潘马斯农村食物核心pamhc2foodcore-1.16.3-1.0.2.jar<br>2021/12/23  01:13         2,535,453 【前置17】【食物】农夫乐事FarmersDelight-1.16.5-0.5.4.jar<br>2021/07/19  16:53           167,613 【前置18】【食物】simplytea-1.16.5-2.4.0.jar<br>2021/11/16  15:16         1,030,440 【前置19】rhino-forge-1605.1.5-build.75.jar<br>2021/07/19  19:35         1,337,675 【前置20】cloth-config-4.11.26-forge.jar<br>2021/07/19  19:19            57,279 【前置21】AutoRegLib-1.6-49.jar<br>2022/01/12  14:44         3,396,633 【前置22】geckolib-forge-1.16.5-3.0.58.jar<br>2021/11/25  01:50         1,472,504 【前置23】【杂项】血月丰收月enhancedcelestials-2.0.9-1.16.5.jar<br>2021/12/03  23:04            90,019 【前置24】dungeons_libraries-1.16.5-0.0.3-beta.jar<br>2022/01/09  16:43           257,414 【前置25.1】(25取其一)【辅助】1高亮显示Jade-1.16.4-2.8.1.jar<br>2022/01/01  14:00           261,390 【前置26】structure_gel-1.16.5-1.7.8.jar<br>2022/01/12  17:07           148,686 【前置27】structure_toolkit-1.16.5-1.0.2.jar<br>2021/10/26  10:58           315,420 【前置28】Bookshelf-Forge-1.16.5-10.3.29.jar<br>2021/12/22  21:46           805,040 【前置29】Mantle-1.16.5-1.6.152.jar<br>2021/07/19  18:15           501,225 【前置2】architectury-1.20.28-forge.jar<br>2021/12/24  15:56           542,288 【前置2】architectury-1.26.42.jar<br>2021/07/20  19:37         6,638,824 【前置30】kotlinforforge-1.14.0-obf.jar<br>2021/10/26  10:58           105,524 【前置31】morevanillalib-1.16.4-1.4.1.jar<br>2021/10/26  10:58           261,390 【前置32】structure_gel-1.16.5-1.7.8.jar<br>2021/10/26  10:58            96,151 【前置33】SimpleCoreLib-1.16.5-2.0.8.22.jar<br>2022/01/01  13:40            61,161 【前置34】Iceberg-1.16.5-1.0.34.jar<br>2022/01/12  15:01             6,636 【前置35】LibraryFerret-Forge-1.16.5-1.0.3.jar<br>2021/12/14  21:50         1,232,846 【前置36】附魔前置cofh_core-1.16.5-1.4.0.6.jar<br>2021/12/03  22:46           141,872 【前置37】collective_1.16.5_3.8.jar<br>2021/12/03  22:46           145,933 【前置38】Placebo-1.16.5-4.6.1.jar<br>2021/10/26  10:58           215,498 【前置39】selene-1.16.5-1.8.1.jar<br>2021/10/26  10:58           106,058 【前置3】YungsApi-1.16.4-Forge-13.jar<br>2022/01/07  02:15           608,118 【前置40】valhelsia_core-16.0.15.jar<br>2021/12/30  23:29           916,043 【前置41】【辅助】【前置19】或【前置2】(添加合成表矿辞统一)kubejs-forge-1605.3.19-build.258.jar<br>2021/08/17  17:04           509,849 【前置42】Penguin-Lib-1.16.5-0.4.3.jar<br>2022/01/12  14:44           418,156 【前置43】shetiphiancore-1.16-3.8.8.jar<br>2021/08/29  21:43            88,373 【前置44】majrusz-library-1.16.4-2.0.1.jar<br>2021/10/26  14:59           217,199 【前置45】Library_of_Exile-1.16.5-1.2.0.jar<br>2021/10/26  15:43         3,145,190 【前置46】【食物】简单农场simplefarming-1.16.5-1.3.8.jar<br>2021/11/10  00:01           147,708 【前置4】cavebiomeapi-1.16.5-1.4.2.jar<br>2021/07/19  15:12           631,288 【前置5】CreativeCore_v2.2.0_mc1.16.5.jar<br>2021/06/04  21:05         2,660,414 【前置6】【杂项】charm-forge-1.16.5-2.3.2.jar<br>2021/08/29  21:52           482,439 【前置7】citadel-1.8.1-1.16.5.jar<br>2021/06/04  19:07           102,333 【前置8】cuneiform-1.16.3-1.2.5.jar<br>2022/01/09  16:43           271,151 【前置9】饰品栏curios-forge-1.16.5-4.0.7.0.jar<br>2021/12/14  21:50            15,479 【前置】全局数据包globaldataandresourcepacks-1.16.5-1.10.2.jar<br>2022/01/09  19:42           139,989 【工具】剥离地形World+Stripper-1.16.5-2.1.0.jar<br>2022/01/09  18:53           182,118 【杂项】SaveMyStronghold-1.16.4-1.0.jar<br>2021/06/04  22:37         2,004,590 【杂项】[NNOW]NeverNeededOrWanted-1.16.5-1.0.9a.jar<br>2021/12/14  21:50         1,271,118 【杂项】【前置01】残暴与掠夺savageandravage-1.16.5-3.2.0.jar<br>2021/07/23  18:01             1,896 【杂项】【前置14】夸克奇思妙想QuarkOddities-1.16.3.jar<br>2021/07/19  16:53             3,063 【杂项】【前置17】农夫乐事兼容性farmersdelightintegration-1.16.5-1.0.3.jar<br>2021/10/26  10:58            29,376 【杂项】【前置17】农夫乐事兼容性farmersdelightintegrations-1.16.5-1.2.jar<br>2021/12/29  19:44           308,351 【杂项】【前置17】农夫乐事铜锅copperpot-1.16.5-1.2.0.jar<br>2021/10/26  10:58           321,866 【杂项】【前置33】矿石SimpleOres2-1.16.5-2.4.7.2.jar<br>2021/12/30  23:29            19,648 【杂项】【前置34】物品品质框ItemBorders-1.16.5-1.1.6.jar<br>2021/12/24  17:05            23,045 【杂项】【前置34】物品边框LegendaryTooltips-1.16.5-1.1.5.jar<br>2021/12/03  22:46            12,875 【杂项】【前置37】围火无怪nohostilesaroundcampfire_1.16.5-3.8.jar<br>2021/07/20  22:17             9,491 【杂项】【前置37】治疗篝火healingcampfire_1.16.5-3.3.jar<br>2021/10/26  10:58            28,518 【杂项】【前置3】群系标题yung_TravelersTitles-1.16.4-1.5.jar<br>2021/12/15  20:43           593,065 【杂项】【前置45】专业副本Infinite_Dungeons-1.16.5-1.0.9.jar<br>2021/07/19  15:14            47,260 【杂项】【前置5】物理掉落物ItemPhysic_v1.4.18_mc1.16.5.jar<br>2021/11/15  01:36            14,638 【杂项】【前置9】【前置14】饰品化夸克背包CuriosQuarkOBP-1.16.5-1.0.2.jar<br>2021/07/20  15:04            67,143 【杂项】【前置9】【前置24】潜影贝栏位curiousshulkerboxes-forge-1.16.5-4.0.1.0.jar<br>2021/07/20  15:10            27,890 【杂项】【前置9】不死图腾栏位curioofundying-forge-1.16.5-5.2.0.0.jar<br>2021/12/23  01:16           779,545 【杂项】下界扩展又nether-s-exoticism-1.16.5-1.1.3.jar<br>2021/12/22  22:13         1,249,382 【杂项】下界矿石Nether+Ores+Plus+++1.5.2+-+1.16.5.jar<br>2021/12/29  19:44           575,639 【杂项】储物抽屉StorageDrawers-1.16.3-8.5.0.jar<br>2021/10/26  10:58             6,082 【杂项】农田不再被踩坏TrampleStopper-2.6.1-build.22+mc1.16.5.jar<br>2022/01/03  01:24         2,595,298 【杂项】巫术精致hexerei-0.1.4.jar<br>2021/04/24  04:44         2,040,762 【杂项】幻梦eidolon-0.2.7.jar<br>2021/10/29  22:48         1,488,023 【杂项】德鲁伊工艺Druidcraft-1.16.5-0.4.54.jar<br>2021/06/05  00:31           560,732 【杂项】更多洞穴特征extcaves.jar<br>2021/10/26  09:42            19,085 【杂项】村庄英雄合成HeroOfNowhereUpdated_1.16.5.jar<br>2021/12/24  15:43            17,627 【杂项】树叶快速掉落RapidLeafDecay-1.16.5-2.0.0.jar<br>2021/12/03  22:46             8,537 【杂项】汉化i18nupdatemod-1.16.5.jar<br>2022/01/03  00:51            34,158 【杂项】添加了一些结构修改了一些配方Farmable1.0.0.jar<br>2021/10/26  09:26             8,837 【杂项】爆头headshot-1.3.0.jar<br>2021/12/24  15:43             4,834 【杂项】环境噪点AmbientEnvironment-5.0.0.11.jar<br>2021/08/17  17:07             2,661 【杂项】白天睡觉插件Daydreamer-1.16.5-1.0.jar<br>2021/06/05  02:31           133,745 【杂项】稀有精英怪infernalmobs-1.16.2.1.jar<br>2022/01/09  19:19            26,771 【杂项】结构大小限制取消StructureExpansion-1.16.5-1.0.7.jar<br>2022/01/09  18:54            23,749 【杂项】自然生成的半砖（加合成表）SlabGen-1.16.5-1.0.0.jar<br>2021/12/03  22:46           396,514 【杂项】荒野之息Paraglider-1.16.5-1.3.2.7.jar<br>2021/11/05  23:53           540,313 【杂项】菜单定制PackMenu-1.16.5-2.5.0.jar<br>2022/01/03  00:51           238,657 【杂项】额外（含一种女巫小屋）extract-1.1.jar<br>2021/11/11  02:08         2,291,012 【杂项】饰品背包ImprovedBackpacks-1.6.2.0.jar<br>2021/04/25  08:54           112,845 【杂项】（再也不用经验修补了）维修箱子RepairChests-1.16.5-1.7.jar<br>2021/12/22  22:23         1,162,470 【生物】(勉强通过)animalsss-0.8.jar<br>2021/12/22  22:22           901,412 【生物】(缝合怪)mobsgenus-0.4.jar<br>2021/10/26  11:01        18,135,643 【生物】alexsmobs-1.12.1.jar<br>2021/11/05  14:26         1,948,461 【生物】MinecraftEarthMod-2.5.7.1.jar<br>2021/07/20  21:55         5,522,069 【生物】mowziesmobs-1.5.19.jar<br>2021/09/05  02:30         1,271,721 【生物】Wilds+Version+2.2.1.jar<br>2021/07/21  13:20         2,970,312 【生物】Zonko’s+Monsters+1.16.5+1.2.jar<br>2021/12/14  21:50           840,640 【生物】【前置01】buzzier_bees-1.16.5-3.0.3.jar<br>2021/06/04  18:57        11,003,946 【生物】【前置01】endergetic-1.16.4-3.0.0.jar<br>2021/12/14  21:51         3,682,686 【生物】【前置01】碧海新生upgrade_aquatic-1.16.5-3.1.2.jar<br>2021/07/21  14:07           963,433 【生物】【前置22】生物与怪物CNB-1.16.3_5-1.2.11.jar<br>2021/12/03  22:46         2,413,584 【生物】【前置24】地下城怪物dungeons_mobs-1.16.5-2.0.1-beta.jar<br>2022/01/09  18:54         2,160,254 【生物】【前置27】slimierslimes-1.16.5-1.2.0.jar<br>2021/06/04  22:35         5,428,670 【生物】【前置32】更多末影人farlanders-1.16.4-1.3.9.jar<br>2021/08/17  16:57           447,935 【生物】【前置42】鱼Piscary-1.16.5-1.0.3.jar<br>2021/08/29  21:22           658,320 【生物】【前置44】难度渐进(宝藏袋)majruszs-difficulty-1.16.4-1.1.0.jar<br>2021/12/16  20:08           955,466 【生物】【前置7】Untamed+WildLife.jar<br>2022/01/09  18:50           127,573 【生物】劫掠兽ravageandcabbage-1.0.0.jar<br>2021/12/07  18:47         4,806,172 【生物】厄运（地狱恶魔）MCDoom-1.16.5-4.0.34.jar<br>2022/01/09  01:34            86,702 【生物】变异村民mutantvillager-0.1.jar<br>2021/06/04  22:26         1,289,476 【生物】变异生物MutantBeasts-1.16.4-1.1.3.jar<br>2021/09/03  16:23         7,681,362 【生物】古老水生物OddWaterMobs[1.16.5]_1.4.0.jar<br>2022/01/03  01:39           583,306 【生物】各种蘑菇人Leos_Mushrooms-1.16.4-v0.5.1.jar<br>2021/12/22  22:21           507,051 【生物】哥布林goblins-0.2.jar<br>2022/01/09  16:43           802,253 【生物】地球版生物restored_earth-1.16.5-1.4.0.jar<br>2021/11/05  14:24        10,560,452 【生物】外来物种Exotic+Critters+1.16+Experimental+1.19.jar<br>2021/11/11  00:37         1,251,211 【生物】如题ambientadditions-0.5.1.jar<br>2022/01/07  01:23         3,868,521 【生物】岩浆炉地牢更新MagmaFurnaceDungeonUpdate.jar<br>2022/01/09  01:33           150,380 【生物】巨怪ogres-0.3.jar<br>2021/12/22  22:22           158,032 【生物】巨魔trolls-0.1.jar<br>2022/01/03  01:37           606,338 【生物】恐龙JurrasicCube-0.1.1-1.16.5.jar<br>2021/10/26  10:58         1,225,645 【生物】无名生物(优质)unnamedanimalmod-1.0.3.jar<br>2021/11/16  15:17        14,521,154 【生物】更多下界生物infernal-expansion-1.16.5-2.4.0.jar<br>2021/07/06  10:33         1,102,070 【生物】更多傀儡extragolems-11.3.1.jar<br>2021/11/10  00:02        10,524,585 【生物】更多僵尸UNDEADv.1.3.release+Biome.jar<br>2021/10/31  18:53           772,409 【生物】更多变异生物mutantmore-1.16.5-1.0.0.jar<br>2021/10/26  10:48           318,147 【生物】更多小型生物LittleMoreCreatures1.1.jar<br>2021/12/07  18:47         1,743,846 【生物】更多挑战DungeonsMod-1.16.3-1.4.43.jar<br>2021/11/02  15:24           714,968 【生物】更多生物(包含但表现于落选生物)mobsgenus-0.2.jar<br>2021/10/26  10:58           265,717 【生物】更多职业村民morevillagers-FORGE-1.16.5-1.5.5.jar<br>2021/07/20  19:50           308,282 【生物】更多骷髅bones-1.16.5-2.1.0.jar<br>2022/01/09  16:43         2,165,733 【生物】更好动物betteranimalsplus-1.16.5-11.0.3-forge.jar<br>2021/07/19  19:05           382,707 【生物】末地重生EndReborn+[0.8.4].jar<br>2021/09/05  16:27           190,249 【生物】村民护卫guardvillagers-1.16.5.1.2.6.jar<br>2021/09/25  19:09           551,025 【生物】水产养殖Aquaculture-1.16.5-2.1.21.jar<br>2021/12/24  15:54           376,140 【生物】海洋AbyssalDepths-1.16.5-1.0.1.jar<br>2022/01/09  18:40         1,577,809 【生物】海盗Pirates_And_Looters_Kraken_Update.jar<br>2021/06/04  22:21         1,454,383 【生物】潘多拉的生物pandoras_creatures-1.16.3-2.0.1.jar<br>2021/11/05  14:28           760,003 【生物】灾祸村民illagers_plus-1.16.4v1.7.2.jar<br>2022/01/09  19:34         3,834,053 【生物】狗头人Koopa’s Critters 1.16.5 II V1.1.jar<br>2022/01/07  02:15         2,058,226 【生物】珍奇鸟类exoticbirds-1.16.4-1.4.0.jar<br>2021/11/15  01:41           999,568 【生物】科博尔兹及地牢Kobolds-1.4.9.jar<br>2022/01/03  01:37           279,724 【生物】科博尔德kobolds-0.1.jar<br>2021/10/26  10:59           743,785 【生物】落选生物outvoted-2.0.0-alpha.12-forge.jar<br>2021/12/26  18:09         9,241,688 【生物】阿斯特米尔的森林(地狱门与钓鱼方式改变)forestcraft-1.603.jar<br>2021/12/03  22:46           333,707 【生物】附魔师enchantwithmob-1.16.5-1.5.2.jar<br>2021/08/29  21:30           274,624 【生物】非虔诚Impish+Tome+(1.16.5_ver.1.0.2).jar<br>2021/11/16  23:47         4,967,448 【生物】龙栖Wyrmroost-1.16.3-1.2.11.jar<br>2021/07/21  14:07           389,176 【结构】 【前置32】更多地牢dungeons_plus-1.16.5-1.1.5.jar<br>2022/01/07  02:16         2,002,788 【结构】BrassAmberBattleTowers-1.16.5-1.1.4.jar<br>2021/11/25  02:13         4,149,756 【结构】castle_in_the_sky-1.16.5-0.2.6.jar<br>2021/11/13  01:56           313,216 【结构】more_ships_1.16.5_3.jar<br>2022/01/09  18:59            71,921 【结构】structures.jar<br>2022/01/09  19:34            79,112 【结构】VanillaStructures.jar<br>2021/10/26  10:58           510,439 【结构】yung_BetterDungeons-1.16.4-1.2.1.jar<br>2021/07/20  17:24           289,307 【结构】yung_BetterMineshafts-Forge-1.16.4-2.0.4.jar<br>2022/01/01  13:52         1,049,019 【结构】【前置26】dungeons_enhanced-1.16.5-1.4.jar<br>2022/01/09  19:34           503,637 【结构】【前置35】AwesomeDungeonForge-1.16.5-2.0.3.jar<br>2021/07/20  17:30            64,256 【结构】【前置3】yung-YungsExtras-Forge-1.16.4-1.0.jar<br>2021/09/03  15:54           541,396 【结构】【前置3】yung_BetterStrongholds-1.16.4-1.2.1.jar<br>2021/11/05  14:28         1,540,395 【结构】【前置40】valhelsia_structures-1.16.5-0.1.6.jar<br>2021/10/26  10:33           428,761 【结构】【前置45】(开箱子后会拆除塔)dungeon_World_of_Exile-1.16.5-1.4.0.jar<br>2022/01/12  14:45         9,509,122 【结构】【前置7】灾难Cataclysm-0.1.jar<br>2022/01/09  19:34           126,932 【结构】三叉戟Trident+Crafting++Structures[2.6]+1.16.x.jar<br>2022/01/09  01:34           658,634 【结构】不死j军团UndeadArmy-2.5.jar<br>2022/01/03  01:36           401,446 【结构】丛林村庄找不到Jungle+Villages+1.16.5++v1.1.jar<br>2021/11/05  14:28         2,562,731 【结构】中世纪城堡(不只结构)MedievalCraft-1.16.5-1.16.2.jar<br>2022/01/03  01:04           848,886 【结构】丰富的天空结构flying_castles_1.16.5_knights_6.0.jar<br>2021/06/17  01:05            85,877 【结构】刷怪castle_dungeons-2.3-1.16.5-forge.jar<br>2022/01/09  16:55            56,728 【结构】刷怪坛New+Spawners.jar<br>2022/01/09  16:43         1,001,999 【结构】哥布林地牢Goblins_Dungeons_1.0.4.jar<br>2021/11/25  01:50         5,544,981 【结构】地下城DungeonsArise-1.16.5-2.1.49-beta.jar<br>2021/06/17  01:03           218,290 【结构】地下村庄stoneholm-1.2.2.jar<br>2021/09/05  02:31            22,253 【结构】地下群系Below+1.0+Forge.jar<br>2021/10/26  11:17         1,542,647 【结构】坚毅堡垒stalwart-dungeons-1.16.5-1.1.7.jar<br>2022/01/09  19:28         1,851,899 【结构】墓园【前置22】The_Graveyard_2.1_(FORGE)_for_1.16.4-1.16.5.jar<br>2021/12/23  01:13           778,769 【结构】大型多层地牢DungeonCrawl-1.16.5-2.3.5.jar<br>2022/01/12  14:44         1,258,938 【结构】大型结构Shrines-1.16.5-2.0.0-Beta11.jar<br>2021/12/24  15:48           206,580 【结构】天空村庄SkyVillage_1.0.0_1.16.5.jar<br>2022/01/09  18:40           446,436 【结构】奇观Phenomena-1.7.3.jar<br>2022/01/02  00:50           122,912 【结构】女巫小屋betterhut+1.1.jar<br>2022/01/01  23:28            80,108 【结构】小型Allawi’s+Structures-1.16.5-v2.2.jar<br>2022/01/03  01:29           480,371 【结构】小结构找不到instantbuildings-1-16-5-1-0-1.jar<br>2022/01/09  19:13           150,212 【结构】少Spruce+Mineshafts.jar<br>2022/01/03  01:26            25,897 【结构】幻术师塔IllusionerTower2.1.1-MC1.16.5.jar<br>2022/01/02  01:27           717,033 【结构】幻梦扩展(eidolon)hexblades-1.16.5-0.0.9.2.jar<br>2022/01/09  19:27           157,147 【结构】旷野塔towers_of_the_wild-1.16.3-2.1.0.1.jar<br>2021/12/14  21:50         5,576,490 【结构】更多结构repurposed_structures_forge-3.4.7+1.16.5.jar<br>2022/01/09  16:55           664,766 【结构】有点密集地下more_underground_structures_1.16.5_4.jar<br>2022/01/09  18:40         1,342,900 【结构】有空球（多）more+structures+3.0.jar<br>2021/10/26  11:30            80,085 【结构】桥YungsBridges-Forge-1.16.4-1.0.1.jar<br>2021/10/22  13:45           141,714 【结构】沙漠下界元素NMN_1.16.5_v0.1.jar<br>2022/01/01  23:27            89,671 【结构】沙漠古迹Ancient+Structures.jar<br>2022/01/09  19:24           172,388 【结构】泰拉式浮空岛Floating_Islands_V1.1.2.jar<br>2021/12/15  20:44            94,105 【结构】测试性dungeons-chasms.jar<br>2021/11/25  17:48            49,668 【结构】溪流upstream-1.0.jar<br>2022/01/09  18:40           234,330 【结构】猪灵Piglin+Expansion+1.1.jar<br>2022/01/09  16:51         1,592,362 【结构】砖房Modest+Bricks+1.0.1+-+Forge+1.16.5.jar<br>2021/12/23  01:45           759,530 【结构】空岛地牢Soaring-Structures-2-1.16.5-2.0.jar<br>2022/01/09  19:13           590,639 【结构】空岛气球StructuresPlusEnd.jar<br>2022/01/03  00:51           456,455 【结构】超多结构locate找不到Extractures(v1.3)_1.16.5.jar<br>2022/01/09  16:43         1,107,495 【结构】遗迹饰品relics-0.3.4.jar<br>2022/01/09  19:27         1,363,108 【结构】露营者StumbleUponCampsites.jar<br>2022/01/09  18:59           759,530 【结构】非常好的天空结构Soaring-Structures-2-1.16.5-2.0.jar<br>2022/01/09  19:27           388,218 【结构】魔术师【前置32】the-conjurer-1.16.4-1.0.13.jar<br>2022/01/09  19:33            20,845 【结构】龟Turtle+King’s+Palace+-+A+[1.16.5]+Structure+Mod+by+TAMOA_GAMING+.jar<br>2022/01/03  01:37           131,854 【结构】（有点多此一举的解密）kitsunesmiscaddons-1.2-forge1.16.5-36.2.0.jar<br>2021/10/29  21:56            19,498 【群系】abyg-1.2-forge.jar<br>2021/12/22  21:46         1,577,173 【群系】BetterDefaultBiomes-1.16.4+-Alpha 2.6.1.jar<br>2021/10/26  11:01        81,199,992 【群系】betterendforge-1.16.5-1.6.3.jar<br>2021/07/19  16:20         3,651,050 【群系】BOP_BiomesOPlenty-1.16.5-13.1.0.480-universal.jar<br>2021/12/29  20:11           538,512 【群系】Mirabilis+1.0.3-1+1.16.5.jar<br>2021/12/22  22:23         4,907,893 【群系】simplybiomes-0.5.jar<br>2021/07/21  14:07         4,751,584 【群系】Spheric 1.0.3 1.16.5.jar<br>2021/10/26  11:02        57,328,296 【群系】【前置01】末地OuterEnd-0.2.14.jar<br>2021/07/19  14:45           554,081 【群系】【前置01】河口群系Bayou-Blues-1.16.5-1.0.5.jar<br>2021/12/07  18:47           978,332 【群系】【前置01】秋原autumnity-1.16.5-2.1.2.jar<br>2021/12/14  21:51         7,004,513 【群系】【前置01】自然环境（有生物）environmental-1.16.5-1.1.1.jar<br>2021/07/19  17:16           665,178 【群系】【前置01】薰衣草Abundance-1.16.5-1.0.5.jar<br>2021/12/07  18:47         1,535,248 【群系】【前置01】雨林沙丘atmospheric-1.16.5-3.1.1.jar<br>2022/01/09  16:43           375,479 【群系】【前置13】【前置12】mysticalbiomes-1.16.5-0.0.1.9.jar<br>2021/07/19  21:30           305,286 【群系】【前置22】无尽海洋endless_oceans-1.0.5-forge.jar<br>2022/01/07  02:16        51,519,595 【群系】【前置4】cavesandcliffs-1.16.5-7.2.0.jar<br>2021/10/26  10:58           870,285 【群系】【前置4】【前置27】岩石darkerdepths-1.16.5-1.1.4.jar<br>2022/01/09  19:40           268,800 【群系】【结构】Wolfie’s+biomes+1.3.jar<br>2022/01/03  01:12         1,543,591 【群系】原版群系升级H.E.B+Release+1.0.jar<br>2021/12/07  18:47           561,462 【群系】地狱生物ShretNether - Release -1.3.4.jar<br>2021/07/19  15:44           280,211 【群系】彩色世界MysticsBiomes-1.16.4-1.1.0.jar<br>2021/07/21  14:07         2,365,497 【群系】恶地改造Betterlands-1.16.5-0.5.0.jar<br>2021/11/16  15:16         1,598,328 【群系】探险者explorercraft-5.0.6.jar<br>2021/11/05  14:29        22,443,866 【群系】更好地狱betternether_reforged-1.2.jar<br>2021/12/15  20:43         6,553,790 【群系】末地添加EndAdditions(Forge)-1.13.jar<br>2021/12/22  22:21           593,427 【群系】滋养下界NourishedNetherV8.jar<br>2021/12/23  01:34         2,732,447 【群系】滋养末地NourishedEndV2.jar<br>2021/07/21  14:06         1,700,785 【群系】灰烬之地Desolation 1.1.0-1 1.16.5.jar<br>2021/09/05  00:01         7,273,457 【群系】舒适下界ComfortableNether4.9.jar<br>2021/12/14  21:51        10,681,350 【群系】通用群系genericeco-1.16.5-2.3.jar<br>2021/12/24  12:53           467,569 【装备】【前置9】【前置11】Artifacts-1.16.5-2.10.4.jar<br>2021/05/24  21:50           327,436 【装备】【前置9】泰拉瑞亚更多饰品curioBountiful+Baubles+FORGE-1.16.3-0.0.2.jar<br>2021/07/20  15:10            30,293 【装备】【前置9】经验护符CrimsonXP-1.1.1.jar<br>2021/10/26  10:58         1,001,013 【装备】升级下界合金装备Upgraded Netherite 1.10.1.jar<br>2021/12/03  22:46         2,220,332 【装备】地下城装备dungeons_gear-1.16.5-3.1.2-beta.jar<br>2021/07/20  17:01         1,462,309 【装饰】【前置29】灵感原版装饰Inspirations-1.16.5-1.2.3.37.jar<br>2021/12/29  19:44        14,012,744 【装饰】【前置39】supplementaries-1.16.5-0.18.0.jar<br>2021/12/14  21:51         7,871,701 【装饰】【前置43】地灵云心海树山花terraqueous-1.16-1.7.18.jar<br>2022/01/01  13:40         1,024,489 【装饰】【前置8】装饰性环境植物terraincognita-1.16.3-1.7.1.1.jar<br>2022/01/09  16:55        39,470,353 【装饰】【结构】More+decoration+1.4+1.16.5.jar<br>2021/12/07  18:47         1,557,189 【装饰】活力之旅projectvibrantjourneys-1.16.5-3.2.11.jar<br>2021/12/15  20:44           595,183 【装饰】生境habitat-1.0.1.jar<br>2021/11/05  14:28         9,241,804 【装饰】自然装饰NaturalDecorMod 1.16 II V0.23.jar<br>2022/01/09  16:43           105,349 【装饰】花finallyfarmabledyes-1.16.5-1.2.1.0.jar<br>2021/07/20  22:35           280,581 【装饰】花草灌木SereneShrubbery-1.16.5-1.1.0.jar<br>2021/10/26  12:06         8,476,267 【装饰】风铃Chimes-1.0.0-1.16.5.jar<br>2021/07/20  23:03         5,398,623 【装饰】（菜篮）NefsMedievalPub+v0.9(1.16.5).jar<br>2022/01/01  13:40            30,160 【辅助】jei找东西findme-1.16.3-2.2.1.0.jar<br>2021/05/03  15:29           792,263 【辅助】Xaeros_Better_PvP_21.8.0_Forge_1.16.5.jar<br>2021/07/21  14:07            19,362 【辅助】【前置10】jei-professions-1.0.0-1.16.4.jar<br>2021/04/09  02:10            24,981 【辅助】【前置10】JEI拓展jeiintegration_1.16.5-7.0.1.15.jar<br>2021/12/30  23:29            69,011 【辅助】【前置10】JEI效果信息显示jeed-1.16.5-1.6.jar<br>2021/12/30  23:29           235,560 【辅助】【前置10】JEI资源显示JustEnoughResources-1.16.5-0.12.1.133.jar<br>2021/10/26  10:58           270,250 【辅助】【前置10】拼音搜索JustEnoughCharacters-1.16.4-4.3.2.jar<br>2021/07/21  14:06            31,243 【辅助】【前置10】附魔信息JEIEnchantmentInfo-1.16.4-1.2.1.jar<br>2021/04/09  23:51           123,705 【辅助】【前置20】边拿边走InvMove-1.16.3-0.4.6.jar<br>2021/12/22  21:46            21,587 【辅助】【前置9】盔甲架显示饰品Curious Armor Stands-1.16.5-2.2.0.jar<br>2022/01/12  14:44           515,600 【辅助】世界地图XaerosWorldMap_1.19.1_Forge_1.16.5.jar<br>2021/04/25  03:14            14,660 【辅助】伤害显示TextDamageIndicators-1.16.3-2.0.1.jar<br>2021/04/24  15:37            42,604 【辅助】拾取通知PickUpNotifier-v1.2-1.16.3.jar<br>2021/12/26  18:09           322,836 【辅助】搬箱子carryon-1.16.5-1.15.5.22.jar<br>2021/04/11  16:07            22,624 【辅助】物品堆叠upsizer-mc1.16.4-6.1.1.jar<br>2021/09/20  22:39            33,125 【辅助】生物生成管理SpawnBalanceUtility-1.36.0.11.jar<br>2021/05/04  07:49            22,955 【辅助】穿草swingthroughgrass-1.16.4-1.5.3.jar<br>2021/09/26  01:06           134,996 【辅助】结构指南针ExplorersCompass-1.16.5-1.1.2-forge.jar<br>2021/09/26  01:06           203,573 【辅助】群系指南针NaturesCompass-1.16.5-1.9.1-forge.jar<br>2021/11/05  14:28            46,203 【辅助】饱和度状态栏appleskin-forge-mc1.16.x-2.2.0.jar<br>2021/04/09  22:58           281,216 【辅助】（区域挖掘）OreExcavation-1.8.157.jar<br>2021/11/11  00:37           588,910 【附魔】【前置01】allurement-1.16.5-1.2.1.jar<br>2021/12/14  21:50            59,391 【附魔】【前置28】附魔描述EnchantmentDescriptions-1.16.5-7.0.18.jar<br>2021/12/14  21:50           133,379 【附魔】【前置36】更多附魔ensorcellation-1.16.5-1.4.0.1.jar<br>2021/10/26  10:58           478,696 【附魔】更多附魔flowingagony-1.16.5-1.0.4.jar<br>2021/07/20  21:14           136,931 【附魔】更多附魔Unique+Enchantments-1.16.5-2.0.1.jar<br>2021/07/20  21:14            11,607 【附魔】更多附魔—战斗Unique+Enchantments+Battle-1.16.5-1.0.jar<br>2021/07/20  21:14            31,406 【附魔】更多附魔工具Unique+Enchantments+Utils-1.16.5-1.3.jar<br>2021/04/25  04:14            47,064 【附魔】附魔拆解台Disenchanting-forge-1.16.5-1.7.1.jar<br>2021/12/15  20:24         4,320,518 【食物】【前置01】neapolitan-1.16.5-2.2.1.jar<br>2021/12/07  18:47           553,175 【食物】【前置01】【前置17】A系融合农夫乐事abnormals_delight-1.16.5-1.2.1.jar<br>2021/04/27  12:06           804,052 【食物】【前置16】潘马斯作物pamhc2crops-1.16.3-1.0.2.jar<br>2021/04/27  12:17           545,339 【食物】【前置16】潘马斯树木pamhc2trees-1.16.3-1.0.1.jar<br>2021/04/27  12:18           913,219 【食物】【前置16】潘马斯食物拓展pamhc2foodextended-1.16.3-1.0.2.jar<br>2021/10/26  10:58            11,809 【食物】【前置17】【前置18】farmerstea-1.16.5-1.3.jar<br>2021/10/26  10:58           283,157 【食物】【前置17】农夫乐事下界扩展nethers_delight-2.1.jar<br>2021/07/19  16:54           130,982 【食物】【前置17】农夫乐事扩展Farmers_Extra_Foods_1.2.jar<br>2021/10/26  10:58           199,890 【食物】【前置17】（巨多联动）农夫乐事非正规厨师irregularchef-1.16.5-1.0.1.jar<br>2021/08/17  17:07           496,315 【食物】【前置42】Horticulture-1.16.5-1.0.2.jar<br>2021/10/26  12:11            79,425 【食物】【前置46】【前置17】简单快乐simpledelights-1.2.jar<br>2021/07/20  23:03           682,828 【食物】懒人厨房CookingForBlockheads_1.16.5-9.3.3.jar<br>2022/01/09  19:43           225,004 全群系world_blender-1.16.5-4.0.2-forge.jar</p>
]]></content>
      <categories>
        <category>MC</category>
      </categories>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>ITN 11-13</title>
    <url>/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/</url>
    <content><![CDATA[<h1 id="IPv4编址"><a href="#IPv4编址" class="headerlink" title="IPv4编址"></a>IPv4编址</h1><h2 id="地址结构"><a href="#地址结构" class="headerlink" title="地址结构"></a>地址结构</h2><p>IPv4 地址为32位分层地址，由网络部分和主机部分两个部分组成。<br>IPv4 地址 - 这是主机的唯一 IPv4 地址。<br>子网掩码 - 用于标识 IPv4 地址的网络部分/主机部分。</p>
<ul>
<li>  <strong>IPv4 主机地址 (例192.168.10.10)</strong> -主机的 IPv4 地址，采用点分十进制和二进制格式。除了根据掩码的主机位全0位（这将是网络地址）或全1位（这将是广播地址）之外，主机地址在主机部分可以有任何位的组合。<strong>注</strong>IPv4 将 <strong>224.0.0.0 到 239.255.255.255</strong> 的地址保留为组播范围（不可作为主机地址）。</li>
<li>  <strong>子网掩码 (例255.255.255.0)</strong> -主机的子网掩码，采用点分十进制和二进制格式。</li>
<li>  <strong>网络地址 (例192.168.10.0)</strong> -IPv4地址和子网掩码之间的逻辑AND运算产生一个点分十进制和二进制格式的IPv4网络地址。<br>例中，主机地址 192.168.10.10 与子网掩码 255.255.255.0 (/24) 之间的 AND运算会产生 IPv4 网络地址为192.168.10.0/24。<br>子网掩码与IP地址相结合用于确定设备属于哪个子网</li>
</ul>
<h2 id="IPv4-单播、广播和组播"><a href="#IPv4-单播、广播和组播" class="headerlink" title="IPv4 单播、广播和组播"></a>IPv4 单播、广播和组播</h2><h3 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h3><p>单播传输是指在一对一通信中，一个设备向另一个设备发送消息。<br>IPv4 单播主机地址的地址范围是 1.1.1.1到 223.255.255.255。不过，此范围中的很多地址被留作特殊用途。这些特殊用途的地址将在本模块后续部分讨论。</p>
<h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p>广播播传输是指设备在一对多通信中，向网络上的所有设备发送消息。<br>广播数据包以32个1位或主机部分全部为 1 的地址作为目的 IP地址。<br>除了 255.255.255.255 的广播地址外，每个网络还有一个广播 IPv4 地址。这个地址称为定向广播，它使用网络范围内的最大地址，即所有主机位全部为 1 的地址。例如，网络192.168.1.0/24的定向广播地址是192.168.1.255。</p>
<h3 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h3><p>主机通过组播传输可以向所属组播组中的选定主机组发送一个数据包，从而减少了流量。<br>组播数据包是一个目的IP地址为组播地址的数据包。IPv4 将 <strong>224.0.0.0 到 239.255.255.255</strong> 的地址保留为组播范围。<br>接收特定组播数据包的主机称为组播客户端。组播客户端使用客户端程序请求的服务来加入组播组。<br>每个组播组由一个 IPv4 组播目的地址代表。当 IPv4 主机加入组播组后，该主机既要处理目的地址为此组播地址的数据包，也要处理发往其唯一单播地址的数据包。</p>
<h2 id="IPv4-地址的分类"><a href="#IPv4-地址的分类" class="headerlink" title="IPv4 地址的分类"></a>IPv4 地址的分类</h2><p>公有 IPv4 地址是能在 ISP（互联网运营商）路由器之间全局路由的地址。但是，并非所有可用的 IPv4 地址都可用于互联网。大多数组织使用称为私有地址的地址块向内部主机分配 IPv4 地址。<br>由于 IPv4 地址空间耗尽，引入了私有 IPv4 地址。私有 IPv4 地址并不是唯一的，可以在任何网络内部使用它。<br>| <strong>网络地址和前缀</strong> | <strong>RFC 1918 私有地址范围</strong> |<br>| — | — |<br>| 10.0.0.0/8 | 10.0.0.0 - 10.255.255.255 |<br>| 172.16.0.0/12 | 172.16.0.0 - 172.31.255.255 |<br>| 192.168.0.0/16 | 192.168.0.0 - 192.168.255.255 |</p>
<h2 id="私有-IPv4-地址和网络地址转换-NAT"><a href="#私有-IPv4-地址和网络地址转换-NAT" class="headerlink" title="私有 IPv4 地址和网络地址转换 (NAT)"></a>私有 IPv4 地址和网络地址转换 (NAT)</h2><p>在 ISP（Internet Service Provider 互联网服务提供商）可以转发此数据包之前，它必须使用网络地址转换 (NAT) 将源 IPv4 地址（即私有地址）转换为公有 IPv4 地址。NAT用于转换私有和公有 IPv4 地址。这通常是在将内部网络连接到 ISP 网络的路由器上完成。在路由到互联网之前，组织内部网中的私有 IPv4 地址将被转换为公有 IPv4 地址。</p>
<h2 id="专用-IPv4-地址"><a href="#专用-IPv4-地址" class="headerlink" title="专用 IPv4 地址"></a>专用 IPv4 地址</h2><p>一些地址，比如网络地址和广播地址不能分配给主机。还有些特殊地址可以分配给主机，但这些主机在网络内的交互方式却受到限制。</p>
<h3 id="环回地址"><a href="#环回地址" class="headerlink" title="环回地址"></a>环回地址</h3><p>环回地址（127.0.0.0 /8 或 127.0.0.1 到 127.255.255.254）通常仅被标识为127.0.0.1，主机使用这些特殊地址将流量指向其自身。</p>
<h3 id="本地链路地址"><a href="#本地链路地址" class="headerlink" title="本地链路地址"></a>本地链路地址</h3><p>本地链路地址（169.254.0.0 /16 或 169.254.0.1 至 169.254.255.254）通常称为自动私有 IP 编址 (APIPA) 地址或自分配地址。 当没有可用的DHCP服务器时，Windows DHCP客户端使用它们进行自我配置。本地链路地址可以用于点对点连接，但通常不用于此目的。</p>
<h3 id="IP-地址的分配"><a href="#IP-地址的分配" class="headerlink" title="IP 地址的分配"></a>IP 地址的分配</h3><p>IPv4 和 IPv6 地址是通过互联网编号指派机构 (IANA) 管理的。IANA 管理并向地区性互联网注册机构 (RIR) 分配 IP 地址块。</p>
<ul>
<li>  <strong>AfriNIC</strong> (非洲网络信息中心) - 非洲地区</li>
<li>  <strong>APNIC</strong> (亚太网络信息中心) - 亚太地区</li>
<li>  <strong>ARIN</strong> (美洲互联网号码注册管理机构) - 北美地区</li>
<li>  <strong>LACNIC</strong> (拉丁美洲及加勒比互联网地址注册管理机构) - 拉丁美洲和部分加勒比海岛屿</li>
<li>  <strong>RIPE NCC</strong> (欧洲 IP 地址注册中心) - 欧洲、中东和中亚<br>RIR 的职责是向 ISP 分配 IP 地址，而 ISP 将向组织和更小的 ISP 提供 IPv4 地址块。根据 RIR 的政策规定，组织也可直接从 RIR 获取地址。</li>
</ul>
<h2 id="网络分段"><a href="#网络分段" class="headerlink" title="网络分段"></a>网络分段</h2><h3 id="广播域和分段"><a href="#广播域和分段" class="headerlink" title="广播域和分段"></a>广播域和分段</h3><p>在以太网局域网中，设备使用广播和地址解析协议 (ARP) 来定位其他设备。地址解析协议 (ARP)将第 2 层广播发送到本地网络上的已知 IPv4 地址，以发现相关 MAC 地址。以太网局域网上的设备还可以使用服务定位其他设备。主机通常需要使用动态主机配置协议 (DHCP) 来获取 IPv4 地址配置，这会发送本地网络上的广播来定位 DHCP 服务器。<br>交换机会将广播传播到所有接口，接收它的接口除外。<br>路由器不传播广播。<br>因此，每个路由器接口都连接了一个广播域，而广播只能在特定广播域内传播。</p>
<h3 id="大型广播域存在的问题与子网划分"><a href="#大型广播域存在的问题与子网划分" class="headerlink" title="大型广播域存在的问题与子网划分"></a>大型广播域存在的问题与子网划分</h3><p>大型广播域是连接很多主机的网络。大型广播域的一个问题是这些主机会生成太多广播，这会对网络造成不良影响。在图中，局域网1 连接了 400 个用户，可能会产生过量的广播流量。这会导致<strong>网络操作速度缓慢</strong>，因为它会导致大量的流量，而<strong>设备操作变慢</strong>是因为设备必须接受和处理每个广播数据包。</p>
<p>解决方案是使用称为<strong>子网划分</strong>的过程缩减网络的规模以创建更小的广播域。这些较小的网络空间通常称为“子网”。<br>子网划分可以降低整体网络流量并改善网络性能。它也能让管理员实施安全策略，例如哪些子网允许或不允许进行通信。另一个原因是，它减少了由于错误配置、硬件/软件问题或恶意意图而受到异常广播流量影响的设备数量。</p>
<h3 id="IPv4-网络的子网"><a href="#IPv4-网络的子网" class="headerlink" title="IPv4 网络的子网"></a>IPv4 网络的子网</h3><p>创建 IPv4 子网时会将一个或多个主机位作为网络位。具体做法是延长子网掩码，从地址的主机部分借用若干位来增加网络位。借用的主机位越多，可以定义的子网也就越多。为了增加子网数量而借用的位越多，每个子网的主机数量就越少。</p>
<h2 id="VLSM-Variable-Length-Subnetwork-Mask-可变长子网掩码"><a href="#VLSM-Variable-Length-Subnetwork-Mask-可变长子网掩码" class="headerlink" title="VLSM(Variable Length Subnetwork Mask 可变长子网掩码)"></a>VLSM(Variable Length Subnetwork Mask 可变长子网掩码)</h2><p>并不是您创建的每个子网都需要这么多主机，这会导致许多IPv4地址未被使用。也许您需要一个包含更多主机的子网。这就是开发可变长子网掩码 (VLSM) 的原因。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645543803092.png"><br>所有子网都使用相同的子网掩码。这意味着每个子网有相同数量的可用主机地址。如图左边所示，传统子网划分可以创建大小相等的子网。传统方案中每个子网都使用相同的子网掩码。如图右边所示，VLSM 使网络空间能够分为大小不等的部分。使用 VLSM，子网掩码将根据特定子网所借用的位数而变化，从而成为 VLSM 的“变量”部分。<br>使用 VLSM 子网，可以为 LAN 和路由器之间网段提供地址，而不产生不必要浪费。</p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645547232646.png"><br>n=子网掩码-网络掩码<br>2^n=子网数<br>2^(32-网络掩码-n)-2=主机数<br>子网数*(主机数+2)=2^(32-网络掩码)<br>例：<br>网络管理员将 192.168.10.0/24 网络划分成带 /26 子网掩码的子网。会创建4个相同大小的子网，每个子网可有62台主机<br>2=子网掩码-网络掩码=26-24<br>2^2=子网数=4<br>2^(32-网络掩码-n)-2=2^(8-2)-2=主机数=62<br>子网数*(主机数+2)=4*(62+2)=2^(32-网络掩码)=2^(32-24)</p>
<p>减二因为最低位(后面全是0)用于表示主机号，最高位(后面全是1)用于表示广播地址</p>
<p>DMZ：Demilitarized Zone 隔离区</p>
<h1 id="IPv6编址"><a href="#IPv6编址" class="headerlink" title="IPv6编址"></a>IPv6编址</h1><p>IPv6 旨在接替 IPv4。IPv6 拥有更大的 128 位地址空间，提供 340 涧（即，340后面有36个0）个不确定地址。IETF 已经创建了各种协议和工具来协助网络管理员将网络迁移到 IPv6。迁移技术可分为三类：</p>
<ul>
<li><strong>双堆栈</strong>-双堆栈允许 IPv4 和 IPv6 在同一网段上共存。双堆栈设备同时运行 IPv4 和 IPv6 协议栈。称为原生 IPv6</li>
<li><strong>隧道</strong>-隧道是一种通过 IPv4 网络传输 IPv6 数据包的方法。</li>
<li><strong>转换</strong>-网络地址转换 64 (NAT64) 允许支持 IPv6 的设备与支持 IPv4 的设备使用类似于 IPv4 中 NAT 的转换技术进行通信。IPv6 数据包被转换为 IPv4 数据包，IPv4 数据包被转换为 IPv6 数据包。</li>
</ul>
<h2 id="IPv6-地址表示方法"><a href="#IPv6-地址表示方法" class="headerlink" title="IPv6 地址表示方法"></a>IPv6 地址表示方法</h2><p>书写 IPv6 地址的首选格式为 x:x:x:x:x:x:x:x，每个“x”均包括四个十六进制值。</p>
<ul>
<li>第一条有助于缩短 IPv6 地址记法的规则是省略十六进制数中的所有前导 0（零）</li>
<li>第二条有助于缩短 IPv6 地址记法的规则是使用双冒号 (::) 替换任何由<strong>一个或多个</strong>全由 0 组成的16 位十六进制数组成的<strong>连续</strong>字符串</li>
<li>双冒号 (::) 仅可在每个地址中<strong>使用一次</strong>，否则可能会得出一个以上的地址。</li>
</ul>
<h2 id="IPv6-地址类型"><a href="#IPv6-地址类型" class="headerlink" title="IPv6 地址类型"></a>IPv6 地址类型</h2><h3 id="IPv6-地址三大类"><a href="#IPv6-地址三大类" class="headerlink" title="IPv6 地址三大类"></a>IPv6 地址三大类</h3><ul>
<li>  <strong>单播</strong> - IPv6 单播地址用于唯一标识支持 IPv6 的设备上的接口。</li>
<li>  <strong>组播</strong> - IPv6 组播地址用于将单个 IPv6 数据包发送到多个目的地。</li>
<li>  <strong>任播</strong> -IPv6 任播地址是可分配到多个设备的 IPv6 任播地址。发送至任播地址的数据包会被路由到最近的拥有该地址的设备。<br>与 IPv4 不同，IPv6 没有广播地址。但是，IPv6 具有 IPv6 全节点组播地址，这在本质上与广播地址的效果相同。</li>
</ul>
<h3 id="IPv6-前缀长度"><a href="#IPv6-前缀长度" class="headerlink" title="IPv6 前缀长度"></a>IPv6 前缀长度</h3><p>在 IPv4 中，/24 称为前缀。在 IPv6 中，它被称为前缀长度。IPv6 不使用点分十进制子网掩码记法(如255.255.255.0)。与IPv4一样，前缀长度以斜线记法表示，用于表示 IPv6 地址的网络部分。<br>强烈建议对大多数网络使用 64 位接口 ID。这是因为无状态地址自动配置(SLAAC)使用64位作为接口ID。它还使子网划分更易于创建和管理。</p>
<h3 id="IPv6-单播地址"><a href="#IPv6-单播地址" class="headerlink" title="IPv6 单播地址"></a>IPv6 单播地址</h3><p><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645606597498.png"><br>IPv6地址通常有两个单播地址:</p>
<ul>
<li>  <strong>全局单播地址(GUA)</strong> - 这类似于公有 IPv4 地址。这些地址具有全局唯一性，是互联网可路由的地址。GUA可静态配置或动态分配</li>
<li>  <strong>链路本地地址 (LLA)</strong> -这对于每个支持ipv6的设备都是必需的。LLA用于与同一链路中的其他设备通信。在 IPv6 中，术语“链路”是指子网。LLA仅限于单个链路。它们的唯一性仅在该链路上得到保证，因为它们在该链路之外不具有可路由性。换句话说，路由器不会转发具有本地链路源地址或目的地址的数据包。</li>
</ul>
<h3 id="唯一本地地址"><a href="#唯一本地地址" class="headerlink" title="唯一本地地址"></a>唯一本地地址</h3><p>（范围 fc00:: /7 到 fdff:: /7）<br>IPv6 唯一本地地址与 IPv4 的 RFC 1918 私有地址具有相似之处，但是也有着重大差异。</p>
<ul>
<li>唯一本地地址用于一个站点内或数量有限的站点之间的本地编址。</li>
<li>唯一本地地址可用于从来不需要访问其他网络的设备。</li>
<li>唯一本地地址不会全局路由或转换为全局 IPv6 地址。</li>
</ul>
<h3 id="IPv6-全局单播地址-GUA"><a href="#IPv6-全局单播地址-GUA" class="headerlink" title="IPv6 全局单播地址 (GUA)"></a>IPv6 全局单播地址 (GUA)</h3><p>IPv6 全局单播地址 (GUA) 具有全局唯一性，可在 IPv6互联网上路由。这些地址相当于公有 IPv4 地址。互联网名称与数字地址分配机构 (ICANN)，即 IANA 的运营商，将 IPv6 地址块分配给五家 RIR。目前分配的仅是前三位为 001 或 2000::/3 的全局单播地址（GUA）<br><strong>注意</strong>: 2001:db8::/32已经留作备档之用，包括示例用途。<br>下图显示了 GUA 的结构和范围。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645609454686.png"><br>带有 /48 全局路由前缀和 /64 前缀的 IPv6 地址</p>
<p><strong>GUA 有三个部分：</strong></p>
<h4 id="全局路由前缀"><a href="#全局路由前缀" class="headerlink" title="全局路由前缀"></a>全局路由前缀</h4><p>全局路由前缀为提供商（如 ISP）分配给客户或站点的地址的前缀或网络部分。例如，ISP 通常会为其客户分配 /48 全局路由前缀。<br>例如，IPv6 地址2001:db8:acad::/48 的全局路由前缀，该前缀表示ISP知道该前缀（网络）的方式是前48位（3个十六进制数）（2001:db8:acad）。/48 前缀长度后面的双冒号 (::) 表示地址的剩余部分全部为 0。全局路由前缀的大小决定子网 ID 的大小。</p>
<h4 id="子网-ID"><a href="#子网-ID" class="headerlink" title="子网 ID"></a>子网 ID</h4><p>子网ID字段是全局路由前缀和接口ID之间的区域。与IPv4不同，在IPv4中您必须从主机部分借用位来创建子网，IPv6在设计时考虑到了子网。组织使用子网 ID 确定其站点的子网。子网 ID 越大，可用子网越多。<br>使用典型的/64前缀长度，前四个十六进制数是地址的网络部分，其中第四个十六进制数表示子网 ID。剩下的四个十六进制数用于接口 ID。</p>
<h4 id="接口-ID"><a href="#接口-ID" class="headerlink" title="接口 ID"></a>接口 ID</h4><p>IPv6 接口 ID 相当于 IPv4 地址的主机部分。使用术语“接口 ID”是因为单个主机可能有多个接口，而每个接口又有一个或多个 IPv6 地址。<br>/64 子网或前缀（全局路由前缀 + 子网 ID）为接口 ID 留下 64 位。建议允许启用 SLAAC 的设备创建自己的 64 位接口 ID。它还使得 IPv6 编址计划的开发变得简单而有效。</p>
<h3 id="IPv6-链路本地地址-LLA"><a href="#IPv6-链路本地地址-LLA" class="headerlink" title="IPv6 链路本地地址 (LLA)"></a>IPv6 链路本地地址 (LLA)</h3><p>IPv6 链路本地地址(LLA)允许设备与同一链路上支持 IPv6 的其他设备通信，并且只能在该链路（子网）上通信。具有源或目的LLA的数据包不能在数据包的源链路之外进行路由。<br><strong>GUA 不是一项要求。但是，每个启用 IPv6 的网络接口都必须有 LLA。</strong><br>如果没有手动为接口配置LLA，设备会在不与 DHCP 服务器通信的情况下自动创建自己的地址。支持 IPv6 的主机会创建 IPv6 LLA，即使没有为该设备分配 IPv6 全局单播地址。这允许支持 IPv6 的设备与同一子网中的其他支持 IPv6 的设备通信。这包括与默认网关（路由器）的通信。<br>IPv6 LLAs在fe80::/10范围内。/10 表示前 10 位是 1111 1110 10xx xxxx。第一个十六进制数的范围是 1111 1110 10<strong>00 0000</strong> (fe80) 到 1111 1110 10<strong>11 1111</strong> (febf)。<br>设备可以通过两种方式获取 LLA：</p>
<ul>
<li>  <strong>静态</strong> -这意味着设备已手动配置。</li>
<li>  <strong>动态</strong> -这意味着设备通过使用随机生成的值或使用扩展唯一标识符 (EUI) 方法创建自己的接口 ID，该方法使用客户端 MAC 地址和其他位。</li>
</ul>
<p><strong>注意</strong>: 通常情况下，用作链路上其他设备的默认网关的是路由器的LLA而不是GUA。</p>
<h2 id="GUA-和-LLA-静态配置"><a href="#GUA-和-LLA-静态配置" class="headerlink" title="GUA 和 LLA 静态配置"></a>GUA 和 LLA 静态配置</h2><p>在 思科IOS 中，大多数 IPv6 的配置和验证命令与 IPv4 的相似。在多数情况下，唯一区别是命令中使用“ipv6”取代“ip”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用以下地址在千兆以太网 0/0/0 接口上配置并激活 IPv6：</span><br><span class="line">R1(config)#interface g0/0/0</span><br><span class="line">将 g0/0/0 作为接口名称</span><br><span class="line">R1(config-if)#ipv6 address fe80::1:1 link-local</span><br><span class="line">设置LLA为fe80::1:1注意加“link-local”</span><br><span class="line">R1(config-if)#ipv6 address 2001:db8:acad:1::1/64</span><br><span class="line">设置GUA为2001:db8:acad:1::1/64</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">激活接口</span><br><span class="line">%LINK-3-UPDOWN: Interface GigabitEthernet0/0/0, changed state to up</span><br><span class="line">显示已开启</span><br><span class="line">R1(config-if)#exit</span><br><span class="line">退出接口配置模式</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用以下地址在串行 0/1/0 接口上配置并激活 IPv6：</span><br><span class="line">R1(config)#interface s0/1/0</span><br><span class="line">将 s0/1/0 作为接口名称</span><br><span class="line">R1(config-if)#ipv6 address fe80::3:1 link-local</span><br><span class="line">设置LLA为fe80::3:1注意加“link-local”</span><br><span class="line">R1(config-if)#ipv6 address 2001:db8:acad:3::1/64</span><br><span class="line">设置GUA为2001:db8:acad:3::1/64</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">激活接口</span><br><span class="line">%LINK-3-UPDOWN: Interface Serial0/1/0, changed state to up</span><br><span class="line">显示已开启</span><br><span class="line">R1(config-if)#exit</span><br><span class="line">退出接口配置模式</span><br></pre></td></tr></table></figure>

<h2 id="GUA动态编址"><a href="#GUA动态编址" class="headerlink" title="GUA动态编址"></a>GUA动态编址</h2><h3 id="RS-and-RA-消息"><a href="#RS-and-RA-消息" class="headerlink" title="RS and RA 消息"></a>RS and RA 消息</h3><p>大多数设备会动态获取其 IPv6 GUA。<br>对于 GUA，设备通过 Internet 控制消息协议版本 6 (ICMPv6) 消息动态获取地址。IPv6 路由器每 200 秒定期将 ICMPv6 RA 消息发送到网络上所有支持 IPv6 的设备。在响应发送 ICMPv6 路由器请求 (RS) 消息的主机时，也会发送 RA 消息，RS消息是对RA消息的请求。</p>
<p>为路由器启用 IPv6 路由，这在默认情况下是不启用的。若要将路由器启用为 IPv6 路由器，必须使用 <code>ipv6 unicast-routing</code> 全局配置命令。<br>ICMPv6 RA 消息提示设备获取 IPv6 GUA的方式。最终决定取决于设备的操作系统。ICMPv6 RA 消息包括以下：</p>
<ul>
<li>  <strong>网络前缀和前缀长度</strong> – 这会告知设备其所属的网络。</li>
<li>  <strong>默认网关</strong> – IPv6 LLA，RA 消息的源 IPv6 地址。</li>
<li>  <strong>DNS 地址和域名</strong> – 这些是DNS 服务器的地址和域名。<br>RA 消息有三种方法：</li>
</ul>
<h4 id="方法-1：SLAAC-Stateless-address-auto-configuration，无状态地址自动配置"><a href="#方法-1：SLAAC-Stateless-address-auto-configuration，无状态地址自动配置" class="headerlink" title="方法 1：SLAAC(Stateless address auto-configuration，无状态地址自动配置)"></a>方法 1：SLAAC(Stateless address auto-configuration，无状态地址自动配置)</h4><p>SLAAC是一种允许设备在没有DHCPv6服务的情况下创建自己的GUA的方法。使用 SLAAC，设备根据本地路由器的 ICMPv6 路由器通告 (RA) 消息获取必要信息。<br>默认情况下，RA 消息会提示接收设备使用 RA 消息中的信息创建其自己的 IPv6 GUA及其他必要信息。DHCPv6 服务器的服务不是必需项。<br>SLAAC 是无状态的，也就是说没有中央服务器（例如有状态DHCPv6 服务器）来分配GUA和维持设备及其地址的清单。借助 SLAAC，客户端设备使用 RA 消息中的信息创建其自己的GUA。<br>地址的两部分生成如下：</p>
<ul>
<li>  <strong>前缀</strong> -这是在 RA 消息中通告的。</li>
<li>  <strong>接口 ID</strong> -使用 EUI-64 流程或通过生成一个随机 64 位数字产生，取决于设备的操作系统。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645702011889.png" alt="enter description here"></li>
</ul>
<h4 id="方法-2：SLAAC-和无状态-DHCPv6-Dynamic-Host-Configuration-Protocol动态主机配置协议"><a href="#方法-2：SLAAC-和无状态-DHCPv6-Dynamic-Host-Configuration-Protocol动态主机配置协议" class="headerlink" title="方法 2：SLAAC 和无状态 DHCPv6(Dynamic Host Configuration Protocol动态主机配置协议)"></a>方法 2：SLAAC 和无状态 DHCPv6(Dynamic Host Configuration Protocol动态主机配置协议)</h4><p>路由器的接口可配置为使用 SLAAC 和无状态 DHCPv6 或仅使用有状态 DHCPv6 发送路由器通告。<br>如图所示，使用此方法，RA 消息建议设备使用以下内容：</p>
<ul>
<li>  SLAAC创建自己的IPv6 GUA</li>
<li>  路由器LLA，是RA源IPv6地址，作为默认网关地址</li>
<li>  使用无状态 DHCPv6 服务器获取其他信息，例如 DNS 服务器地址和域名。</li>
<li><em>注意</em>*: 使用无状态 DHCPv6 服务器分配 DNS 服务器地址和域名。它不分配 GUA。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645702026814.png" alt="enter description here"></li>
</ul>
<h4 id="方法-3：有状态的DHCPv6"><a href="#方法-3：有状态的DHCPv6" class="headerlink" title="方法 3：有状态的DHCPv6"></a>方法 3：有状态的DHCPv6</h4><p>路由器接口可以配置为仅使用有状态的DHCPv6发送RA。<br>有状态 DHCPv6 与 IPv4 的 DHCP 相似。设备可以从有状态 DHCPv6 服务器自动接收编址信息，包括GUA、前缀长度和 DNS 服务器地址。<br>如图所示，使用此方法，RA 消息建议设备使用以下内容：</p>
<ul>
<li>  路由器LLA，是RA源IPv6地址，作为默认网关地址。</li>
<li>  使用有状态 DHCPv6 服务器获取GUA、DNS 服务器地址、域名和其他必要信息。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645702073373.png" alt="enter description here"><br>使用有状态 DHCPv6 服务器分配并维持哪台设备接收哪个 IPv6 地址的清单。IPv4 的 DHCP 是有状态的。</li>
<li><em>注意:</em>* 默认网关地址仅可从 RA 消息中动态获取。无状态或有状态 DHCPv6 服务器均不提供默认网关地址。</li>
</ul>
<h3 id="EUI-64-流程和随机生成"><a href="#EUI-64-流程和随机生成" class="headerlink" title="EUI-64 流程和随机生成"></a>EUI-64 流程和随机生成</h3><p>当 RA 消息为 SLAAC 或 SLAAC 和无状态 DHCPv6 时，客户端必须生成自己的接口 ID。客户端从 RA 消息中获知地址的前缀部分，但必须创建自己的接口 ID。如图所示，接口 ID 可使用 EUI-64 流程或随机生成的 64 位数字创建。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645702541865.png"><br>IEEE 定义了扩展唯一标识符 (Extended Unique Identifier) 或修改的 EUI-64 流程。该流程使用客户端的 48 位以太网 MAC 地址，并在该 48 位 MAC 地址的中间插入另外 16 位来创建 64 位接口 ID。<br>以太网 MAC 地址一般使用十六进制表示，由两部分组成：</p>
<ul>
<li>  **组织唯一标识符 (OUI) **- OUI 为 IEEE 分配的 24 位（6 个十六进制数字）厂商代码。</li>
<li>  <strong>设备标识符</strong> - 设备标识符是通用 OUI 内的唯一 24 位（6 个十六进制数字）值。<br>EUI-64 接口 ID 以二进制表示，共分三个部分：</li>
<li>  客户端 MAC 地址的 24 位 OUI，但是第 7 位（通用/本地 (U/L) 位）颠倒。这意味着，如果第 7 位是 0，则它会变为 1，反之亦然。U/L 位的用途和该位值的翻转原因会在 RFC 5342 中讨论。</li>
<li>  插入的 16 位值 fffe（十六进制）。</li>
<li>  客户端 MAC 地址的 24 位设备标识符。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645703120047.png"><br>EUI-64 优势在于可以使用以太网 MAC 地址确定接口 ID。这也允许网络管理员使用唯一 MAC 地址轻松跟踪终端设备的 IPv6 地址。</li>
</ul>
<p>然而，这引起了许多用户的隐私担忧，他们担心自己的数据包可能会被追踪到实际的物理计算机。出于这些顾虑，可以转而使用<strong>随机生成</strong>的接口 ID。<br>根据操作系统，设备可以使用随机生成的接口 ID，而不使用 MAC 地址和 EUI-64 流程。从 Windows Vista 开始，Windows 使用随机生成的接口 ID，而不是 EUI-64 创建的接口 ID。Windows XP 和之前的 Windows 操作系统均使用 EUI-64。<br><strong>注意</strong>:为确保任何 IPv6 单播地址的唯一性，客户端可以使用重复地址检测 (DAD) 流程。这与 ARP 请求其地址的流程相似。如该请求没有响应，则地址是唯一的。</p>
<h2 id="LLA动态编址"><a href="#LLA动态编址" class="headerlink" title="LLA动态编址"></a>LLA动态编址</h2><p>所有 IPv6 设备都必须有 IPv6 LLA。与 IPv6 GUA一样，您也可以动态创建 LLA。无论您如何创建LLA(和GUA)，重要的是要验证所有IPv6地址配置。<br>使用fe80::/10 前缀和通过 EUI-64 流程或随机生成的 64 位数字创建的接口 ID 动态创建LLA。</p>
<h3 id="Windows上的动态LLA"><a href="#Windows上的动态LLA" class="headerlink" title="Windows上的动态LLA"></a>Windows上的动态LLA</h3><p>操作系统，如Windows，通常会对SLAAC创建的GUA和动态分配的LLA使用相同的方法（EUI-64 生成、随机生成）</p>
<h3 id="思科路由器上的动态LLA"><a href="#思科路由器上的动态LLA" class="headerlink" title="思科路由器上的动态LLA"></a>思科路由器上的动态LLA</h3><p>当为接口分配GUA时，思科路由器会自动创建 IPv6 LLA。默认情况下，思科 IOS 路由器使用 EUI-64 为 IPv6 接口上的所有LLA生成接口 ID。对于串行接口，路由器会使用以太网接口的 MAC 地址。回想一下，LLA在该链路或网络上必须具有唯一性。但是，使用动态分配的LLA的缺点在于其接口 ID 较长，因此很难识别并记住分配的地址。示例显示了路由器 R1 千兆以太网0/0/0 接口的 MAC 地址。该地址用于在同一接口上动态创建LLA，也用于串行0/1/0接口。<br>为了更容易在路由器上识别和记忆这些地址，通常要在路由器上静态配置 IPv6 LLA。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645704177487.png"></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>show ipv6 interface brief</strong> 命令会显示以太网接口的 MAC 地址。EUI-64 使用此 MAC 地址生成LLA的接口 ID。此外，<strong>show ipv6 interface brief</strong> 命令用于显示各个接口的缩略输出。与接口位于同一行的 [up/up] 输出指示第 1 层/第 2 层接口状态。这与等效的 IPv4 命令的状态和协议列相同。<br><strong>show ipv6 route</strong> 命令可用于检验 IPv6 网络和特定 IPv6 接口地址已添加到 IPv6 路由表中。该 <strong>show ipv6 route</strong> 命令将仅显示 IPv6 网络，而不显示 IPv4 网络。<br>IPv6 的 <strong>ping</strong> 命令和 IPv4 中这条命令的用法相同，只不过后接使用的是 IPv6 地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入显示 IPv6 接口状态摘要的 show 命令。</span><br><span class="line">R1#show ipv6 interface brief</span><br><span class="line">GigabitEthernet0/0/0   [up/up]</span><br><span class="line">    FE80::1:1</span><br><span class="line">    2001:DB8:ACAD:1::1</span><br><span class="line">GigabitEthernet0/0/1   [up/up]</span><br><span class="line">    FE80::2:1</span><br><span class="line">    2001:DB8:ACAD:2::1</span><br><span class="line">Serial0/1/0            [up/up]</span><br><span class="line">    FE80::3:1</span><br><span class="line">    2001:DB8:ACAD:3::1</span><br><span class="line">Serial0/1/1            [down/down]</span><br><span class="line">    unassigned</span><br><span class="line">GigabitEthernet0       [administratively down/down]</span><br><span class="line">    unassigned</span><br><span class="line">验证从R1到PC2在2001:db8:acad:1::10的连接性。</span><br><span class="line">R1#show ipv6 route</span><br><span class="line">IPv6 Routing Table - default - 7 entries</span><br><span class="line">Codes: C - Connected, L - Local, S - Static, U - Per-user Static route</span><br><span class="line">       B - BGP, HA - Home Agent, MR - Mobile Router, R - RIP</span><br><span class="line">       H - NHRP, I1 - ISIS L1, I2 - ISIS L2, IA - ISIS interarea</span><br><span class="line">       IS - ISIS summary, D - EIGRP, EX - EIGRP external, NM - NEMO</span><br><span class="line">       ND - ND Default, NDp - ND Prefix, DCE - Destination, NDr - Redirect</span><br><span class="line">       O - OSPF Intra, OI - OSPF Inter, OE1 - OSPF ext 1, OE2 - OSPF ext 2</span><br><span class="line">       ON1 - OSPF NSSA ext 1, ON2 - OSPF NSSA ext 2, la - LISP alt</span><br><span class="line">       lr - LISP site-registrations, ld - LISP dyn-eid, a - Application</span><br><span class="line">C   2001:DB8:ACAD:1::/64 [0/0]</span><br><span class="line">     via GigabitEthernet0/0, directly connected</span><br><span class="line">L   2001:DB8:ACAD:1::1/128 [0/0]</span><br><span class="line">     via GigabitEthernet0/0, receive</span><br><span class="line">C   2001:DB8:ACAD:2::/64 [0/0]</span><br><span class="line">     via GigabitEthernet0/1, directly connected</span><br><span class="line">L   2001:DB8:ACAD:2::1/128 [0/0]</span><br><span class="line">     via GigabitEthernet0/1, receive</span><br><span class="line">C   2001:DB8:ACAD:3::/64 [0/0]</span><br><span class="line">     via Serial0/0/1, directly connected</span><br><span class="line">L   2001:DB8:ACAD:3::1/128 [0/0]</span><br><span class="line">     via Serial0/0/1, receive</span><br><span class="line">L   FF00::/8 [0/0]</span><br><span class="line">     via Null0, receive</span><br><span class="line"></span><br><span class="line">R1#ping 2001:db8:acad:1::10</span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 2001:DB8:ACAD:1::10, timeout is 2 seconds:</span><br><span class="line">!!!!!</span><br><span class="line">Success rate is 100 percent (5/5), round-trip min/avg/max = 1/1/1 ms</span><br><span class="line">您已成功验证 IPv6 地址配置。</span><br></pre></td></tr></table></figure>

<h2 id="IPv6-组播地址"><a href="#IPv6-组播地址" class="headerlink" title="IPv6 组播地址"></a>IPv6 组播地址</h2><p>IPv6 组播地址类似于 IPv4 组播地址。回想一下，组播地址用于发送单个数据包到一个或多个目标（组播组）。IPv6 组播地址的前缀为ff00::/8。<br>IPv6 组播地址分为两种类型：</p>
<ul>
<li>  知名组播地址</li>
<li>  请求节点组播地址</li>
</ul>
<h3 id="知名组播地址"><a href="#知名组播地址" class="headerlink" title="知名组播地址"></a>知名组播地址</h3><p>已分配的知名IPv6 组播地址。分配的组播地址是为预先定义的设备组保留的组播地址。<br>这些是两种常见的 IPv6 分配组播组：</p>
<ul>
<li>  <strong>ff02::1全节点组播组</strong> -这是一个包含<strong>所有支持 IPv6 的设备的组播组</strong>。发送到该组的数据包由该链路或网络上的所有 IPv6 接口接收和处理。这与 IPv4 中的广播地址具有相同的效果。</li>
<li>  <strong>ff02::2:全路由器组播组</strong> - 这是<strong>所有IPv6路由器加入的组播组</strong>。当在IPv6路由器全局模式下启用ipv6 unicast-routing命令后，该路由器即成为该组的成员。发送到该组的数据包由该链路或网络上的所有 IPv6 路由器接收和处理。</li>
</ul>
<h3 id="请求节点组播地址"><a href="#请求节点组播地址" class="headerlink" title="请求节点组播地址"></a>请求节点组播地址</h3><p>请求节点组播地址类似于全节点组播地址(ff02)。请求节点组播地址的优势在于它被映射到特殊的以太网组播地址。这使得以太网网卡可以通过检查目的 MAC 地址过滤该帧，而不是将它发送给 IPv6 流程来判断该设备是否是 IPv6 数据包的既定目标。</p>
<h2 id="IPv6-网络的子网划分"><a href="#IPv6-网络的子网划分" class="headerlink" title="IPv6 网络的子网划分"></a>IPv6 网络的子网划分</h2><p>使用IPv4时，我们必须从主机部分借用位来创建子网。这是因为对IPv4来说，子网划分是事后才想到的。但是，IPv6 的设计考虑到了子网划分。IPv6 GUA中的一个单独的子网ID字段用于创建子网。如图所示，子网ID字段是全局路由前缀和接口ID之间的区域。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN11-13/1645704992473.png"><br>128 位地址的好处在是，它可以为每个网络支持足够多的子网并为每个子网支持足够多的主机。地址保留不是问题。</p>
<ul>
<li>  <strong>16 位子网 ID</strong> -创建多达 65,536 个子网</li>
<li>  <strong>64 位接口 ID</strong> -每个子网支持多达 1800亿亿个主机 IPv6 地址（即 18,000,000,000,000,000,000）</li>
</ul>
<h3 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R1(config)# interface gigabitethernet 0/0/0</span><br><span class="line">R1(config-if)# ipv6 address 2001:db8:acad:1::1/64</span><br><span class="line">R1(config-if)# no shutdown</span><br><span class="line">R1(config-if)# exit</span><br><span class="line">R1(config)# interface gigabitethernet 0/0/1</span><br><span class="line">R1(config-if)# ipv6 address 2001:db8:acad:2::1/64</span><br><span class="line">R1(config-if)# no shutdown</span><br><span class="line">R1(config-if)# exit</span><br><span class="line">R1(config)# interface serial 0/1/0</span><br><span class="line">R1(config-if)# ipv6 address 2001:db8:acad:3::1/64</span><br><span class="line">R1(config-if)# no shutdown</span><br></pre></td></tr></table></figure>

<p>命令<strong>ping ::1</strong>用于测试IPv6主机的内部配置<br><strong>::1</strong> 是一个环回地址。成功地ping到这个地址意味着正确地安装了TCP/IP堆栈。</p>
<h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><h2 id="ICMP-消息"><a href="#ICMP-消息" class="headerlink" title="ICMP 消息"></a>ICMP 消息</h2><p>虽然 IP 只是“尽最大努力”的协议，但在与另一个IP设备通信时，TCP/IP套件确实提供了错误消息和参考消息。这些消息使用 ICMP 服务发送。其用途是就特定情况下处理 IP 数据包的相关问题提供反馈，而并非是使 IP 可靠。ICMP 消息并非必需的，而且在网络内通常出于安全原因而被禁止。<br>ICMP 可同时用于 IPv4 和 IPv6。ICMPv4 是 IPv4 的消息协议。ICMPv6 为 IPv6 提供相同的服务，此外，还包括其他功能。在本课程中，涉及 ICMPv4 和 ICMPv6 时均会使用术语 ICMP。<br>ICMP 消息的类型及其发送原因非常多。ICMPv4 和 ICMPv6 <strong>通用的</strong> ICMP 消息包括：</p>
<h3 id="主机联通性"><a href="#主机联通性" class="headerlink" title="主机联通性"></a>主机联通性</h3><p>ICMP Echo消息可用于测试 IP 网络上主机的可达性。</p>
<h3 id="目的地或服务不可达"><a href="#目的地或服务不可达" class="headerlink" title="目的地或服务不可达"></a>目的地或服务不可达</h3><p>当主机或网关收到无法传送的数据包时，它会使用 ICMP 目的地不可达消息通知源主机，目的地或服务无法到达。消息包括指示数据包为何无法传送的代码。<br>ICMPv4 的目的地不可达代码示例有：</p>
<ul>
<li>  0 - 网络不可达。</li>
<li>  1 - 主机不可达。</li>
<li>  2 - 协议不可达。</li>
<li>  3 - 端口不可达。</li>
</ul>
<p>ICMPv6 的目的地不可达代码示例有：</p>
<ul>
<li>  0-没有通往目标的路由。</li>
<li>  1-管理上禁止与目的地通信（例如防火墙）</li>
<li>  2-超出源地址的范围</li>
<li>  3-地址无法访问</li>
<li>  4-端口不可达。</li>
<li><em>注意</em>*: ICMPv6 的目的地不可达消息代码与此类似，但稍有不同。</li>
</ul>
<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>路由器使用 ICMPv4 超时消息表明，因为数据包的生存时间 (TTL) 字段递减到 0 而不能转发该数据包。如果路由器接收数据包并且将 IPv4 数据包的 TTL 字段的值递减为零，则它会丢弃数据包并向源主机发送超时消息。<br>如果路由器因数据包过期而无法转发 IPv6 数据包，ICMPv6 也会发送超时消息。ICMPv6使用IPv6<strong>跳数限制</strong>字段来确定数据包是否已过期，而不是IPv4 TTL字段。</p>
<h3 id="ICMPv6-特有-消息"><a href="#ICMPv6-特有-消息" class="headerlink" title="ICMPv6 (特有)消息"></a>ICMPv6 (特有)消息</h3><p>在 ICMPv6 中发现的信息和错误消息非常类似于 ICMPv4 的控制和错误消息。但是，ICMPv6 拥有 ICMPv4 中所没有的新特性和功能提升。ICMPv6 消息封装在 IPv6 中。<br>ICMPv6 在邻居发现协议（ND 或 NDP）中包括四个新协议。<br>IPv6 路由器和 IPv6 设备之间的消息传递，包括动态地址分配如下所示：</p>
<ul>
<li>  <strong>路由器请求 (RS) 消息</strong>-RS消息是对RA消息的请求。一个IPv6主机启动后将发送一个RS。</li>
<li>  <strong>路由器通告 (RA) 消息</strong>-启用IPv6的路由器每200秒发送RA消息，向启用IPv6的主机提供编址信息。RA 消息中可以包含主机的编址信息，例如前缀、前缀长度、DNS 地址和域名。使用 SLAAC 的主机会将其默认网关设置为发送 RA 的路由器的本地链路地址。<br>IPv6 设备之间的消息传递，包括重复的地址检测和地址解析如下所示：</li>
<li>  <strong>邻居请求 (NS) 消息</strong>-当设备分配有全局IPv6单播或本地链路单播地址时，则建议对地址执行 重复检测（DAD） 来确保IPv6地址的唯一性。如果网络中的其他设备具有该地址，则会使用 NA 消息进行响应。此 NA 消息通知发送方设备地址已在使用。如果回应的 NA 消息未在固定的一段时间返回，则单播地址是唯一的，可以使用。</li>
<li>  <strong>邻居通告 (NA) 消息</strong>-当 LAN 上的设备知道目的 IPv6 单播地址，但不知道其以太网 MAC 地址时，会使用地址解析。要确定目的 MAC 地址，设备会将 NS 消息发送到请求节点地址。该消息包括已知（目标）IPv6 地址。具有目标 IPv6 地址的设备会使用包含其以太网 MAC 地址的 NA 消息进行回应。</li>
<li><em>注意</em>*: ICMPv6 ND 还包括重定向消息，与 ICMPv4 中使用的重定向消息功能相似。</li>
</ul>
<h2 id="Ping-和-Traceroute-测试"><a href="#Ping-和-Traceroute-测试" class="headerlink" title="Ping 和 Traceroute 测试"></a>Ping 和 Traceroute 测试</h2><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p>Ping 是一种测试程序，它使用 ICMP Echo请求和Echo应答消息来测试主机之间的连接。<br>为了测试与网络上的另一台主机的连接，可使用 ping 命令将回应请求发送给该主机地址。若指定地址处的主机收到回应请求，便会使用Echo应答进行响应。每收到一个Echo应答，ping都会提供发出请求与收到应答的时间反馈。这可以作为网络性能的度量。<br>Ping 对响应规定了超时值。如果在超时前没有收到应答，ping 会提供一条消息，表示未收到响应。这可能表示存在问题，但是，还可能表示在网络上启用了阻止 ping 消息的安全功能。如果在发送ICMP Echo请求之前需要执行地址解析(ARP或ND)，那么第一次ping通常会超时。<br>所有请求发送完毕后，ping实用程序会提供摘要，包括成功率和到达目的地的平均往返时间。</p>
<p>在路由器上输入 <strong>ping</strong> 命令时，最常见的指示符如下所示：</p>
<ul>
<li>  <strong>!</strong> - 表示收到一个 ICMP Echo 应答消息</li>
<li>  <strong>.</strong> - 表示超时，正在等待 ICMP Echo应答消息</li>
<li>  <strong>U</strong> - 表示收到了一个 ICMP 无法到达的消息</li>
</ul>
<p>使用<strong>ping</strong>进行的连通性测试的类型包括:</p>
<ul>
<li>  <strong>Ping 本地环回</strong>-从 127.0.0.1 接收的 IPv4 响应或从 ::1 接收的 IPv6 响应，表示主机上的 IP 安装正确。此响应来自网络层。但是，此响应并不代表地址、掩码或网关配置正确。它也不能说明有关网络协议栈下层的任何状态。它只测试 IP 网络层的 IP 连接。如果收到错误消息，则表示该主机上的 TCP/IP 无法正常运行。</li>
<li>  <strong>向默认网关发出 ping 命令</strong>-成功 ping通网关表示主机和充当网关的路由器接口在本地网络中均运行正常。</li>
<li>  <strong>Ping 远程主机</strong>-如果 ping 成功，则说明网际网络大部分运行正常。在互联网络上成功 ping通即确认本地网络上的通信正常，充当网关的路由器运行正常，且可能位于本地网络和远程主机网络之间路径上的所有其他路由器运行正常。</li>
</ul>
<h3 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h3><p>Ping 用于测试两台主机之间的连接，但是不提供关于主机之间设备的详细信息。Traceroute <strong>tracert</strong>实用程序可以生成通信路径上成功到达的设备列表。此列表可以提供重要的验证和故障排除信息。如果数据到达目的地，则 Trace 就会列出主机之间的路径中每台路由器上的接口。如果数据在沿途的某一跳上失败，则回应 Trace 的最后一个路由器的地址可以提供指示，说明发现问题或有安全限制的地方。<br><strong>往返时间</strong><br>Traceroute 可提供沿路径每一跳的往返时间并指示是否有某一跳未响应。往返时间是数据包到达远程主机以及从该主机返回响应所花费的时间。星号 * 用于表示丢失的或无应答的数据包。<br>此信息可用于在路径中定位有问题的路由器，或表示路由器配置为不应答。如果显示器显示特定的某一跳响应时间长或数据丢失，这表示该路由器的资源或其连接可能压力过大。<br><strong>IPv4 TTL 和 IPv6 跳数限制</strong><br>Traceroute 使用第 3 层报头中的 IPv4 TTL 字段功能和 IPv6 跳数限制字段功能以及 ICMP 超时消息。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ITN 14-15</title>
    <url>/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/</url>
    <content><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>传输层负责在不同主机上运行的<strong>应用程序</strong>之间进行的逻辑通信。<br>传输层包括两个协议：</p>
<ul>
<li>  传输控制协议 (TCP Transmission Control Protocol)</li>
<li>  用户数据报协议 (UDP User Datagram Protocol)</li>
</ul>
<h2 id="传输层的职责"><a href="#传输层的职责" class="headerlink" title="传输层的职责"></a>传输层的职责</h2><ul>
<li><strong>跟踪各个会话</strong>-源应用和目的应用之间传输的每个数据集称为会话并分别进行跟踪</li>
<li><strong>数据分段和数据段重组</strong>-将应用程序数据划分为适当大小的块。根据所使用的传输层协议，传输层块称为数据段或数据报。</li>
<li><strong>添加报头信息</strong>-将包含二进制数据的报头信息添加到每个数据块中，这些数据被组织成几个字段。不同的传输层协议通过这些字段值在管理数据通信过程中执行各自的功能。</li>
<li><strong>标识应用</strong>-为了将数据流传递到适当的应用程序，传输层使用称为端口号的标识符来标识目标应用。</li>
<li><strong>会话多路复用</strong>-使不同的通信会话在同一网络上交错。</li>
</ul>
<h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><p>传输层协议指定如何在主机之间传输消息，并负责管理会话的可靠性要求。传输层包括 TCP 和 UDP 协议。<br>不同的应用有不同的传输可靠性要求。因此，TCP/IP 提供了两个传输层协议，如图所示</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP 被认为是可靠且功能齐全的传输层协议，用于确保所有数据到达目的设备。TCP包含确保应用数据传递的字段。这些字段需要发送和接收的主机进行额外处理。<br>TCP将数据分为若干个数据段。<br>TCP 使用以下基本操作提供可靠性和流量控制：</p>
<ul>
<li>  编号并跟踪从特定应用程序发送到特定主机的数据段。</li>
<li>  确认收到数据</li>
<li>  在一定时间段后重新传输未确认的数据</li>
<li>  有顺序的数据可能以错误的顺序到达 以接收方可以接受的有效速率* 发送数据</li>
</ul>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP是一种比TCP更简单的传输层协议。它不提供可靠性和流量控制，这意味着它需要更少的报头字段。由于发送方和接收方UDP进程不需要管理可靠性和流量控制，这意味着 UDP 数据报的处理速度比 TCP 数据段快。UDP 仅提供在相应应用之间传输数据报的基本功能，需要很少的开销和数据检查。<br>UDP 将数据划分为数据报，也称为数据段。<br>UDP是一种无连接协议。由于 UDP 不提供可靠性或流量控制，因此不需要建立连接。由于 UDP 不跟踪客户端和服务器之间发送或接收的信息，因此UDP 也称为无状态协议。<br>UDP 也称为最大努力交付协议，因为在目的地接收到数据后没有确认消息。UDP 中没有通知发送方是否成功传输的传输层程。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/1645791005727.png" alt="enter description here"><br>UDP 是一个尽最大努力传输协议，而 TCP 是一个可靠的传输协议。<br><strong>实时视频和语音应用</strong>能够容忍具有极小或没有明显影响的一些数据丢失，非常适合于 UDP。</p>
<h2 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>除了支持<strong>数据分段和重组</strong>的基本功能之外，TCP 还提供以下服务：</p>
<ul>
<li>  <strong>建立会话</strong> -TCP是一种面向连接的协议，在转发任何流量之前，在源设备和目的设备之间协商并建立永久连接（或会话）。通过建立会话，设备可以协商特定时间能够转发的流量，而且两个设备之间的通信数据可得到严格管理。</li>
<li>  <strong>确保可靠的传递</strong> -由于多种原因，数据段在网络传输过程中可能会损坏或者完全丢失。TCP确保从源设备发送的每个数据段都能够到达目的地。</li>
<li>  <strong>提供相同顺序的传递</strong> -由于网络可能提供了多条路由，每条路由又有不同的传输速率，所以可能导致数据抵达的顺序错乱。通过对数据段编号和排序，TCP 确保按正确的顺序重组这些数据段。</li>
<li>  <strong>支持流量控制</strong> -网络主机的资源有限（即，内存或处理能力）。当 TCP 发现这些资源超负荷运转时，它可以请求源应用程序降低数据流速。为此，TCP 会调整源设备传输的数据量。流量控制可避免当接收主机的资源不堪重负时，数据的重新传输。</li>
</ul>
<h3 id="报头"><a href="#报头" class="headerlink" title="报头"></a>报头</h3><p>在封装应用层数据时，TCP 数据段会增加 20 个字节（即 160 位）的开销。该图显示的是 TCP 报头中的字段。(10个)<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/1646123477727.png" alt="enter description here"></p>
<h3 id="报头字段"><a href="#报头字段" class="headerlink" title="报头字段"></a>报头字段</h3><table>
<thead>
<tr>
<th><strong>TCP 报头字段</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>源端口</strong></td>
<td>一个16位字段, 用于通过端口号标识源应用程序。用于跟踪设备之间的多个会话。还用于为服务器的响应保留打开的条目</td>
</tr>
<tr>
<td><strong>目的端口</strong></td>
<td>一个16位字段, 用于通过端口号标识目的应用 程序。</td>
</tr>
<tr>
<td><strong>序列号</strong></td>
<td>一个32位字段, 用于数据重组。</td>
</tr>
<tr>
<td><strong>确认号</strong></td>
<td>一个32位的字段, 用于指示已接收到数据, 并且期望从源 接收下一个字节。</td>
</tr>
<tr>
<td><strong>报头长度</strong></td>
<td>一个4位字段, 称为“数据偏移”, 表示 TCP数据段报头的长度。</td>
</tr>
<tr>
<td><strong>保留</strong></td>
<td>一个6位字段, 保留供将来使用。</td>
</tr>
<tr>
<td><strong>控制位</strong></td>
<td>一个6位字段, 包括位代码或标志, 指示 TCP段的目的和功能。</td>
</tr>
<tr>
<td><strong>窗口大小</strong></td>
<td>一个16位字段, 用于指示一次可以接受的 字节数。</td>
</tr>
<tr>
<td><strong>校验和</strong></td>
<td>一个16位字段, 用于数据段报头和数据的错误检查。</td>
</tr>
<tr>
<td><strong>紧急</strong></td>
<td>一个 16 位字段, 用于指示包含的数据是否紧急。</td>
</tr>
</tbody></table>
<h3 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h3><p>FTP、HTTP、SMTP、SSH</p>
<h2 id="UDP概述"><a href="#UDP概述" class="headerlink" title="UDP概述"></a>UDP概述</h2><p>因此，UDP 仅仅是将接收到的数据按照先来后到的顺序转发到应用程序。如果数据顺序对应用程序很重要，应用程序必须确定正确的顺序并决定如何处理数据。因此，UDP 仅仅是将接收到的数据按照先来后到的顺序转发到应用程序。如果数据顺序对应用程序很重要，应用程序必须确定正确的顺序并决定如何处理数据。### 功能<br>UDP 是一种尽最大努力传输协议。UDP 是一种轻型传输协议，提供与 TCP 相同的<strong>数据分段和重组功能</strong>，但是<strong>没有 TCP 所提供的可靠性和流量控制</strong>。<br>UDP 协议非常简单，它通常被描述为与 TCP 比较所不提供的功能。<br>UDP的特点包括以下几种：</p>
<ul>
<li>  数据按照接收顺序重构。</li>
<li>  丢失的任何数据段都不会重新发送。</li>
<li>  不会建立会话。</li>
<li>  不会告知发送者资源可用性。</li>
</ul>
<h3 id="报头-1"><a href="#报头-1" class="headerlink" title="报头"></a>报头</h3><p>UDP 是无状态协议，这意味着客户端和服务器都不会跟踪通信会话的状态。如果使用 UDP 作为传输协议时要求可靠性，<strong>必须由应用来处理可靠性</strong>。<br>UDP 中的通信块称为数据报或数据段，这些数据报通过传输层协议尽力传送，有四个字段，需要8个字节(即64位)。该图显示的是 UDP 报头中的字段。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/1646123863260.png" alt="enter description here"></p>
<h3 id="报头字段-1"><a href="#报头字段-1" class="headerlink" title="报头字段"></a>报头字段</h3><table>
<thead>
<tr>
<th><strong>UDP 报头字段</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>源端口</strong></td>
<td>一个16位字段,用于通过端口号标识源应用程序。</td>
</tr>
<tr>
<td><strong>目的端口</strong></td>
<td>一个16位字段,用于通过端口号标识目的应用 程序。</td>
</tr>
<tr>
<td><strong>长度</strong></td>
<td>一个16位字段,指示UDP数据报报头的长度。</td>
</tr>
<tr>
<td><strong>校验和</strong></td>
<td>一个16位字段,用于数据报报头和数据的错误检查。</td>
</tr>
</tbody></table>
<h3 id="应用程序-1"><a href="#应用程序-1" class="headerlink" title="应用程序"></a>应用程序</h3><p>最适合采用 UDP 协议的三种应用程序包括：</p>
<ul>
<li>  <strong>实时视频和多媒体应用程序</strong> - 这些应用可以容忍部分数据丢失但要求延迟极小或没有延迟的应用程序。示例包括 VoIP 和实时流传输视频。</li>
<li>  <strong>简单请求和应答应用程序</strong>- 处理简单事务的应用程序，其中主机发送请求，但不一定收到应答。示例包括 DNS 和 DHCP。</li>
<li>  <strong>处理可靠性的应用程序</strong> - 不要求进行流量控制、错误检测、确认和错误恢复，或这些功能由应用程序来执行的单向通信。示例包括 SNMP 和 TFTP。<br>即：DHCP、DNS、SNMP、TFTP、VoIP、视频会议</li>
</ul>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>TCP 和 UDP 传输层协议使用端口号来管理多个同时的对话。TCP和UDP报头字段标识源和目的<strong>应用程序</strong>端口号。</p>
<p>源端口和目的端口都被置入分段内，然后分段封装于<strong>IP 数据包</strong>内。IP 数据包中含有源 IP 地址和目的 IP 地址。<br>源 IP 地址和源端口号的组合或者目的 IP 地址和目的端口号的组合，称为<strong>套接字</strong>。</p>
<p>互联网编号指派机构 (IANA) 是负责分配各种编址标准（包括端口号）的标准组织。用于标识源端口号和目的端口号的16位二进制提供了从0到65535的端口范围。</p>
<p>三个端口组<br>| <strong>端口组</strong> | <strong>号码范围</strong> | <strong>描述</strong> |<br>| — | — | — |<br>| <strong>公认端口</strong> | <strong>0到1023</strong> | 这些端口号保留用于常见或流行的服务和应用程序, 例如 Web浏览器, 电子邮件客户端和远程访问 客户端。为常用的服务器应用程序定义的公认端口使 客户端能够轻松识别所需的关联服务。<br>|<br>| <strong>注册端口</strong> | <strong>1024到49151</strong> | IANA将这些端口号分配给请求实体, 以用于特定的进程或应用程序。这些进程主要是用户选择安装的单个 应用程序, 而不是使用公认端口号的 常见应用程序。例如, 思科已为其RADIUS服务器身份验证进程 注册了端口1812。<br>|<br>| <strong>私有</strong>和(或)<strong>动态端口</strong> | <strong>49152 到 65535</strong> | 这些端口也称为 _临时端口_。客户端的操作系统通常在 发起与服务的连接时动态分配端口号。之后即可在通信过程中使用动态端口识别客户端 应用程序。<br>|</p>
<p>该表显示了一些常用的公认端口号及其相关应用程序。<br>| <strong>端口号</strong> | <strong>协议</strong> | <strong>应用层</strong> |<br>| — | — | — |<br>| <strong>20</strong> | TCP | 文件传输协议 (FTP) - 数据 |<br>| <strong>21</strong> | TCP | 文件传输协议 (FTP) - 控制 |<br>| <strong>22</strong> | TCP | 安全 Shell (SSH) |<br>| <strong>23</strong> | TCP | Telnet |<br>| <strong>25</strong> | TCP | 简单邮件传输协议 (SMTP) |<br>| <strong>53</strong> | UDP、TCP | 域名服务 (DNS) |<br>| <strong>67</strong> | UDP | 动态主机配置协议 (DHCP)- 服务器 |<br>| <strong>68</strong> | UDP | 动态主机配置协议-客户端 |<br>| <strong>69</strong> | UDP | 简单文件传输协议 (TFTP) |<br>| <strong>80</strong> | TCP | 超文本传输协议 (HTTP) |<br>| <strong>110</strong> | TCP | 邮局协议第 3 版 (POP3) |<br>| <strong>143</strong> | TCP | 互联网消息访问协议 (IMAP) |<br>| <strong>161</strong> | UDP | 简单网络管理协议 (SNMP) |<br>| <strong>443</strong> | TCP | 安全超文本传输协议 (HTTPS) |</p>
<p>Windows中命令<code>netstat</code>可列出正在使用的协议、本地地址和端口号、外部地址和端口号以及连接的状态。<br>默认情况下，<strong>netstat</strong>命令会试图将 IP 地址解析为域名，将端口号解析为公认应用程序。使用 <strong>-n</strong> 选项能够以数字形式显示 IP 地址和端口号。</p>
<h2 id="TCP通信进程"><a href="#TCP通信进程" class="headerlink" title="TCP通信进程"></a>TCP通信进程</h2><p>在服务器上运行的每个应用程序进程都配置为使用一个端口号。端口号由系统管理员自动分配或手动配置。<br>在同一传输层服务中，单个服务器上不能同时存在具有相同端口号的两个不同服务。<br>分配有特定端口的活动服务器应用程序被认为是开放的，也就是说，传输层将接受并处理分配到该端口的数据段。所有发送到正确套接字地址的传入客户端请求都将被接受，数据将被传送到服务器应用。</p>
<h3 id="TCP-连接的建立-三次握手"><a href="#TCP-连接的建立-三次握手" class="headerlink" title="TCP 连接的建立(三次握手)"></a>TCP 连接的建立(三次握手)</h3><p>三次握手验证目标主机是否可用来通信。</p>
<ul>
<li><strong>第一步SYN</strong>：源客户端请求与服务器进行客户端-服务器通信会话。</li>
<li><strong>第二步ACK和SYN</strong>：服务器确认客户端-服务器通信会话，并请求服务器-客户端通信会话。</li>
<li><strong>第三步ACK</strong>：源客户端确认服务器-客户端通信会话。</li>
</ul>
<h3 id="会话终止"><a href="#会话终止" class="headerlink" title="会话终止"></a>会话终止</h3><p>若要关闭连接，分段报头必须设置完成 (FIN) 控制标志。为终止每个单向 TCP 会话，需采用包含 FIN 分段和确认 (ACK) 分段的二次握手。<br>因此，若要终止 TCP 支持的整个会话过程，需要实施四次交换，以<strong>终止两个双向</strong>会话。客户端或服务器都可以发起终止。</p>
<ul>
<li><strong>第一步FIN</strong>：当客户端的数据流中没有其他要发送的数据时，它将发送带 FIN 标志设置的分段。</li>
<li><strong>第二步ACK</strong>：服务器发送 ACK 信息，确认收到从客户端发出的请求终止会话的 FIN 信息。</li>
<li><strong>第三步FIN</strong>：服务器向客户端发送 FIN 信息，终止从服务器到客户端的会话。</li>
<li><strong>第四部ACK</strong>：客户端发送 ACK 响应信息，确认收到从服务器发出的 FIN 信息。</li>
</ul>
<h3 id="TCP-三次握手分析"><a href="#TCP-三次握手分析" class="headerlink" title="TCP 三次握手分析"></a>TCP 三次握手分析</h3><p>主机维护状态，跟踪会话过程中的每个分段，并使用 TCP 报头信息交换已接收数据的相关信息。TCP 是全双工协议，每个连接都代表两个单向通信会话。若要建立连接，主机应执行三次握手。如图所示，TCP 报头中的<strong>控制位</strong>指出了连接的进度和状态。<br>这些是三次握手的功能：</p>
<ul>
<li>  确认目的设备存在于网络上。</li>
<li>  确认目的设备有活动的服务，并且正在源客户端要使用的目的端口号上接受请求。</li>
<li>  通知目的设备源客户端想要在该端口号上建立通信会话。<br>通信完成后，将关闭会话并终止连接。连接和会话机制保障了 TCP 的可靠性功能。<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/1646134323200.png" alt="enter description here"><br>TCP 分段报头的控制位字段中的六位被称为标志。标志是设置为<strong>开启或关闭的位</strong>。<br>六个控制位标志如下：</li>
<li>  <strong>URG</strong> - 紧急指针字段（重要）</li>
<li>  <strong>ACK</strong> - 用于建立连接和会话终止的确认标志</li>
<li>  <strong>PSH</strong> - 推送功能</li>
<li>  <strong>RST</strong> - 在出现错误或超时时重置连接</li>
<li>  <strong>SYN</strong> - 同步建立连接中使用的序列号</li>
<li>  <strong>FIN</strong> - 没有更多来自发送方的数据，并用于会话终止</li>
</ul>
<h2 id="可靠性和流控制"><a href="#可靠性和流控制" class="headerlink" title="可靠性和流控制"></a>可靠性和流控制</h2><h3 id="TCP可靠性-保证及按序传递"><a href="#TCP可靠性-保证及按序传递" class="headerlink" title="TCP可靠性 - 保证及按序传递"></a>TCP可靠性 - 保证及按序传递</h3><p>有时可能TCP数据段没有到达目的地。有时，TCP段可能会无序到达。因此，为了让接收方理解原始消息，必须<strong>接收所有数据</strong>，<strong>并重组这些数据段</strong>，使其恢复原有顺序。每个数据包中的数据段报头中都含有序列号，便于进行数据重组。序列号代表 TCP 分段的第一个数据字节在完整数据中的位置。<br>在会话建立过程中，将设置<strong>初始序列号</strong> (ISN)。此 ISN 表示传输到接收应用的字节起始值。在会话过程中，每传送一定字节的数据，序列号就随之增加。<strong>通过这样的数据字节跟踪，可以唯一标识并确认每个分段，还可以标识丢失的分段。</strong><br>（ISN 并不是从 1 开始，而是随机的数字。这样做的目的是防止某些类型的恶意攻击。为简单起见，本章的示例中我们将使用 1 作为 ISN。）</p>
<h3 id="TCP可靠性-数据丢失和重传"><a href="#TCP可靠性-数据丢失和重传" class="headerlink" title="TCP可靠性 - 数据丢失和重传"></a>TCP可靠性 - 数据丢失和重传</h3><p>TCP 提供了管理数据段丢失的方法。其中一个方法就是重新传输未确认的数据。</p>
<ul>
<li>序列 (SEQ) 号和确认 (ACK) 号一起使用，以确认接收传输段中包含的数据字节。SEQ 编号标识正在传输的数据段中的第一个字节。TCP 使用发送回源代码的 ACK 编号来<strong>指示接收方希望接收的下一个字节</strong>。这称为<strong>期望确认</strong>。<br>在进行后续增强之前，TCP只能确认预期的下一个字节。</li>
<li>今天的主机操作系统通常采用一种称为选择性确认 (SAK) 的可选 TCP 功能，在三次握手期间协商。如果两个主机都支持SACK，则接收方可以<strong>明确地确认</strong>接收了哪些数据段(字节)，<strong>包括任何不连续的段</strong>。因此，发送主机只需要重新传输丢失的数据。</li>
</ul>
<h3 id="TCP-流量控制-窗口大小和确认"><a href="#TCP-流量控制-窗口大小和确认" class="headerlink" title="TCP 流量控制 - 窗口大小和确认"></a>TCP 流量控制 - 窗口大小和确认</h3><p>TCP 还提供了<strong>流量控制机制</strong>。</p>
<ul>
<li><p><strong>流量控制</strong>即目的主机能够可靠地接收并处理的数据量。<br>流量控制可以调整给定会话中源和目的地之间的数据流速，有助于保持 TCP 传输的可靠性。为此，TCP 报头包括一个称为“窗口大小”的 16 位字段。</p>
</li>
<li><p><strong>窗口大小</strong>用于确定在获得确认前可以发送的字节数。</p>
</li>
<li><p><strong>确认号</strong>是指下一个预期字节的编号。<br>窗口大小是 TCP 会话的目的设备一次可以接受和处理的字节数。<br>初始窗口大小在三次握手期间建立 TCP 会话时确定。源设备必须根据目的设备的窗口大小限制发送到目的设备的字节数。只有源设备收到字节数已接收的确认之后，才能继续发送更多会话数据。</p>
</li>
</ul>
<p><strong>注意</strong>：设备如今使用滑动窗口协议。接收方通常在每收到两个数据段之后发送确认。在确认之前收到的数据段的数量可能有所不同。滑动窗口的优势在于，只要接收方确认之前的数据段，就可以让发送方持续传输数据段。</p>
<h3 id="TCP-流量控制-最大段大小-MSS"><a href="#TCP-流量控制-最大段大小-MSS" class="headerlink" title="TCP 流量控制-最大段大小 (MSS)"></a>TCP 流量控制-最大段大小 (MSS)</h3><p>MSS 是 TCP 报头中选项字段的一部分，用于指定设备可以在单个 TCP数据段中接收的最大数据量（以字节为单位）。</p>
<ul>
<li>MSS 大小不包括 TCP 报头。</li>
<li>MSS 通常包括在三次握手过程中。</li>
<li>使用 IPv4 时，常见的 MSS 为 1460 字节。<br>主机会从以太网最大传输单位 (MTU) 中减去 IP 和 TCP 报头，从而确定其 MSS 字段的值。在以太网接口上，默认 MTU 为 1500 个字节。减去 20 个字节的 IPv4 报头和 20 个字节的 TCP 报头，默认 MSS 大小为 1460 个字节<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/1646137161386.png" alt="enter description here"></li>
</ul>
<h3 id="TCP-流量控制-避免拥塞"><a href="#TCP-流量控制-避免拥塞" class="headerlink" title="TCP 流量控制 - 避免拥塞"></a>TCP 流量控制 - 避免拥塞</h3><p>网络中出现拥塞会使过载的路由器丢弃数据包。当包含 TCP 数据段的数据包未到达其目的地时，它们就成为未确认的数据包。通过确定 TCP 数据段发送但未确认的速率，源设备可以假设一定程度的网络拥塞。<br>出现网络拥塞时，从源设备丢失的 TCP 数据段就会<strong>重传</strong>。如果不适当控制重传，TCP 数据段的额外重传会使拥塞的情况更糟。网络中不仅有 TCP 数据段的新数据包，而且还有重传丢失的 TCP 数据段的反馈效果，这都增加了拥塞。<br><strong>为避免和控制拥塞，TCP 使用了多个拥塞处理机制、计时器和算法。</strong><br>如果源设备确定 TCP 数据段没有被确认或没有被及时确认，它会在<strong>收到确认之前减少发送的字节数</strong>。</p>
<h2 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h2><p>低开销与可靠性</p>
<h3 id="UDP-数据报重组"><a href="#UDP-数据报重组" class="headerlink" title="UDP 数据报重组"></a>UDP 数据报重组</h3><p>与 TCP分段类似，当将多个 UDP 数据报发送到目的主机时，它们通常采用不同的路径，到达顺序也可能跟发送时的顺序不同。与 TCP 不同，UDP 不跟踪序列号。<br>因此，UDP 仅仅是将接收到的数据<strong>按照先来后到的顺序</strong>转发到应用程序。如果数据顺序对应用程序很重要，<strong>应用程序</strong>必须确定正确的顺序并决定如何处理数据。</p>
<h3 id="UDP-服务器进程与请求"><a href="#UDP-服务器进程与请求" class="headerlink" title="UDP 服务器进程与请求"></a>UDP 服务器进程与请求</h3><p>与基于 TCP 的应用程序相同的是，基于 UDP 的服务器应用程序也被分配了<strong>公认端口号</strong>或<strong>注册端口号</strong>。当上述应用或进程在服务器上运行时，它们就会接受与所分配端口号相匹配的数据。当 UDP 收到用于某个端口的数据报时，它就会按照应用的端口号将数据发送到相应的应用。</p>
<h3 id="UDP-客户端进程"><a href="#UDP-客户端进程" class="headerlink" title="UDP 客户端进程"></a>UDP 客户端进程</h3><p>客户端应用向服务器进程请求数据，便会发起客户端-服务器通信。<br>UDP 客户端进程则是从可用端口号中动态挑选一个端口号，用来作为会话的源端口。<br>而目的端口通常都是分配到服务器进程的公认端口号或注册端口号。</p>
<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="应用层、表示层和会话层"><a href="#应用层、表示层和会话层" class="headerlink" title="应用层、表示层和会话层"></a>应用层、表示层和会话层</h2><h3 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h3><p>该层为用于通信的应用程序和用于消息传输的底层网络提供接口。应用层协议用于在源主机和目的主机上运行的程序之间进行数据交换。<br>基于TCP/IP模型，OSI 模型上面三层（应用层、表示层和会话层）定义了 TCP/IP 应用层的功能。</p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层具有三个主要功能：</p>
<ul>
<li>  将来自源设备的数据格式化或表示成兼容形式，以便目的设备接收。</li>
<li>  采用可被目的设备解压缩的方式对数据进行压缩。</li>
<li>  加密要传输的数据并在收到数据时解密数据。<br>表示层标准的示例有MKV、GIF、JPG、MOV和PNG。</li>
</ul>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层的功能就是<strong>创建并维护</strong>源应用程序和目的应用程序之间的<strong>对话</strong>。会话层用于<strong>处理信息交换</strong>，<strong>发起对话</strong>并使其处于活动状态，并在对话中断或长时间处于空闲状态时<strong>重启会话</strong>。</p>
<h3 id="TCP-IP-应用层协议"><a href="#TCP-IP-应用层协议" class="headerlink" title="TCP/IP 应用层协议"></a>TCP/IP 应用层协议</h3><h4 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h4><p>DNS - 域名系统（或服务）</p>
<ul>
<li>  TCP,UDP客户端 53</li>
<li>  将域名（例如 cisco.com）转换为 IP 地址。</li>
</ul>
<h4 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h4><p>BOOTP - 引导程序协议</p>
<ul>
<li>  UDP 客户端 68，服务器 67</li>
<li>  允许无盘工作站探查其 IP 地址、网络中 BOOTP 服务器的 IP 地址以及要加载到内存中以引导机器的文件</li>
<li>  BOOTP 正在被 DHCP 所取代</li>
</ul>
<p>DHCP-动态主机配置协议</p>
<ul>
<li>  UDP 客户端 68，服务器 67</li>
<li>  动态分配IP地址可以重复使用不再需要的地址</li>
</ul>
<h4 id="电子邮箱"><a href="#电子邮箱" class="headerlink" title="电子邮箱"></a>电子邮箱</h4><p>SMTP - 简单邮件传输协议</p>
<ul>
<li>  TCP 25</li>
<li>  允许客户端向邮件服务器发送电子邮件</li>
<li>  允许服务器向其他服务器发送电子邮件</li>
</ul>
<p>POP3 - 邮局协议</p>
<ul>
<li>  TCP 110</li>
<li>  允许客户端从邮件服务器检索电子邮件 将电子邮件* 下载到客户端的本地邮件应用程序</li>
</ul>
<p>IMAP - 互联网消息访问协议</p>
<ul>
<li>  TCP 143</li>
<li>  允许客户端访问存储在邮件服务器中的电子邮件</li>
<li>  在服务器上维护电子邮件</li>
</ul>
<h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><p>FTP - 文件传输协议</p>
<ul>
<li>  TCP 20至21</li>
<li>  设置规则，使得一台主机上的用户能够通过网络访问另一台主机或向其传输文件</li>
<li>  FTP是一种可靠、面向连接且进行确认的文件传输协议。<br>TFTP - 简单文件传输协议</li>
<li>  UDP 客户端 69</li>
<li>  一个简单的，无连接的文件传输协议，使用尽最大努力、不被答复的文件交付</li>
<li>  它使用的开销比FTP少</li>
</ul>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><p>HTTP-超文本传输协议</p>
<ul>
<li>  TCP 80,8080</li>
<li>  有关在万维网上交换文本、图形图像、音频、视频以及其他多媒体文件的一组规则集<br>HTTPS - 安全 HTTP</li>
<li>  TCP，UDP 443</li>
<li>  浏览器使用加密技术保护 HTTP 通信</li>
<li>  验证您的浏览器连接的网站</li>
</ul>
<h2 id="客户端-服务器模式"><a href="#客户端-服务器模式" class="headerlink" title="客户端-服务器模式"></a>客户端-服务器模式</h2><p>客户端进程和服务器进程都处于应用层。客户端首先向服务器发送数据请求，服务器通过发送一个或多个数据流来响应客户端。应用层协议规定了客户端和服务器之间请求和响应的格式。除了实际数据传输外，数据交换过程还要求用户身份验证以及要传输的数据文件的标识。</p>
<h2 id="对等网络-P2P"><a href="#对等网络-P2P" class="headerlink" title="对等网络(P2P)"></a>对等网络(P2P)</h2><p>在对等 (P2P) 网络模式中，可以从对等设备访问数据，而无需使用专用服务器。</p>
<p>P2P 网络模型包含两个部分：P2P 网络和 P2P 应用程序。</p>
<h3 id="P2P-网络"><a href="#P2P-网络" class="headerlink" title="P2P 网络"></a>P2P 网络</h3><p>在 P2P 网络中，两台或多台计算机通过网络互连，它们共享资源(如打印机和文件)时可以不借助专用服务器。每台接入的终端设备（称为“对等体”）既可以作为服务器，也可以作为客户端。在某项事务中，作为服务器的计算机也可以同时成为其他服务器的客户端。于是，计算机的角色根据请求的不同在客户端和服务器之间切换。</p>
<h3 id="P2P-应用程序"><a href="#P2P-应用程序" class="headerlink" title="P2P 应用程序"></a>P2P 应用程序</h3><p>对等 (P2P) 应用程序允许设备在同一通信中同时充当客户端和服务器。在该模型中，每台客户端都是服务器，而每台服务器也同时是客户端。P2P 应用程序要求每台终端设备提供用户界面并运行后台服务。</p>
<h3 id="常见对等应用程序"><a href="#常见对等应用程序" class="headerlink" title="常见对等应用程序"></a>常见对等应用程序</h3><p>使用 P2P 应用程序时，网络中运行该应用程序的每台计算机都可以充当在网络中运行该应用程序的其他计算机的客户端或服务器。常见 P2P 网络包括:</p>
<ul>
<li>  BitTorrent</li>
<li>  Direct Connect</li>
<li>  eDonkey</li>
<li>  Freenet</li>
</ul>
<p>某些 P2P 应用程序基于 Gnutella 协议，允许每个用户与他人共享整个文件。如图所示，通过与 Gnutella 协议兼容的客户端软件，用户可以在互联网上连接 Gnutella 服务，然后定位并访问由其他 Gnutella 对等设备共享的资源。许多Gnutella客户机应用程序可用,包括μTorrent,BitComet, DC++, Deluge, 和emule。</p>
<h2 id="Web-和电子邮件协议"><a href="#Web-和电子邮件协议" class="headerlink" title="Web 和电子邮件协议"></a>Web 和电子邮件协议</h2><h3 id="超文本传输协议-HTTP-和超文本标记语言-HTML"><a href="#超文本传输协议-HTTP-和超文本标记语言-HTML" class="headerlink" title="超文本传输协议(HTTP)和超文本标记语言(HTML)"></a>超文本传输协议(HTTP)和超文本标记语言(HTML)</h3><p>URL(Uniform Resource Locator，统一资源定位符)<br>URI(Uniform Resource Identifier，统一资源标识符)</p>
<p>对于<a href="http://www.cisco.com/index.html%EF%BC%88URL%EF%BC%89">http://www.cisco.com/index.html（URL）</a></p>
<ul>
<li>浏览器对 URL 地址的三个组成部分进行分析：http（协议或方案）、<a href="http://www.cisco.com(服务器名称)、index.html(所请求的特定文件名)/">www.cisco.com（服务器名称）、index.html（所请求的特定文件名）</a></li>
<li>然后，浏览器将通过域名服务器将 <a href="http://www.cisco.com/">www.cisco.com</a> 转换成数字表示的 IP 地址，用它连接到该服务器。客户端通过向服务器发送GET请求向服务器发起一个HTTP请求并请求index.html文件。</li>
<li>作为对请求的响应，服务器将此web页面的HTML代码发送到浏览器。</li>
<li>浏览器解译 HTML 代码并为浏览器窗口格式化页面。</li>
</ul>
<h3 id="HTTP-和-HTTPS"><a href="#HTTP-和-HTTPS" class="headerlink" title="HTTP 和 HTTPS"></a>HTTP 和 HTTPS</h3><p>HTTP 是一种请求/响应协议。当客户端，尤其是 Web 浏览器，发送请求到 Web 服务器时，HTTP 将指定用于该通信的消息类型。<br>常用的三种消息类型包括 GET、POST 和 PUT。</p>
<ul>
<li>  <strong>GET</strong> - 客户端请求数据。客户端（Web 浏览器）向 Web 服务器发送 GET 消息以请求 HTML 页面。</li>
<li>  <strong>POST</strong> - 上传数据文件到 Web 服务器，例如表单数据。</li>
<li>  <strong>PUT</strong> - 用于向 Web 服务器上传资源或内容，例如图像。</li>
</ul>
<p>尽管 HTTP 灵活性相当高，但它不是一个安全协议。<br>为了在互联网中进行安全通信，人们使用 HTTP 安全（HTTPS）协议。HTTPS 借助身份验证和加密来保护数据，使数据得以安全地在客户端与服务器之间传输。HTTPS 使用的客户端请求服务器响应过程与 HTTP 相同，但在数据流通过网络传输以前会使用安全套接字层 (SSL) 加密。</p>
<h3 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h3><p>邮件是通过网络发送、存储和检索电子消息的存储转发方法。邮件消息存储在邮件服务器的数据库中。<br>邮件客户端通过与邮件服务器通信来收发邮件。邮件服务器之间也会互相通信，以便将邮件从一个域发到另一个域中。也就是说，发送邮件时，邮件客户端并不会直接与另外一个邮件客户端通信。而是双方客户端均依靠邮件服务器来传输邮件。</p>
<p>电子邮件支持三种单独的协议以实现操作：简单邮件传输协议 (<strong>SMTP</strong>)、邮局协议 (<strong>POP</strong>) 和 Internet 邮件访问协议 (<strong>IMAP</strong>)。发送邮件的应用层进程会使用 SMTP。客户端会使用以下两种应用层协议之一来检索邮件：POP 或 IMAP。</p>
<h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><p>SMTP 邮件格式要求邮件具有报头和正文。虽然邮件正文没有长度限制，但邮件报头必须具有格式正确的收件人邮件地址和发件人地址。</p>
<p>当客户端发送邮件时，客户端 SMTP 进程会连接公认端口 25 上的服务器 SMTP 进程。连接建立后，客户端将尝试通过此连接<strong>发送邮件</strong>到服务器。服务器收到邮件后，如果收件人在本地，它会将邮件保存在本地账户中，或者将邮件转发给另一台邮件服务器以便传输。</p>
<p>发出邮件时，目的邮件服务器可能并不在线，或者正忙。因此，SMTP 将邮件转到后台处理，稍后再发送。服务器会定期检查邮件队列，然后尝试再次发送。经过预定义的过期时间后，如果仍然无法发送邮件，则会将其作为无法投递的邮件退回给发件人。</p>
<h4 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h4><p>应用程序使用 POP 从邮件服务器中<strong>检索邮件</strong>。根据 POP 的规定，邮件将从服务器下载到客户端，然后从服务器上删除。这是 POP 的默认操作。</p>
<p>服务器通过在 TCP <strong>端口 110</strong> 上被动侦听客户端连接请求来启动 POP 服务。当客户端要使用此服务时，它会发送一个请求来建立与服务器的 TCP 连接。一旦建立连接，POP 服务器即会发送问候语。然后客户端和 POP 服务器会交换命令和响应，直到连接关闭或中止。</p>
<p>根据 POP，由于电子邮件会下载到客户端并从服务器删除，因此电子邮件不会集中保存在某一特定的位置。因为 POP <strong>不存储</strong>邮件，因此不建议用于需要集中备份解决方案的小型企业。POP3 是最常用的版本。</p>
<h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><p>IMAP 是另外一种用于<strong>检索</strong>电子邮件消息的协议。与 POP 不同的是，当用户连接使用 IMAP 的服务器时，邮件的副本会下载到客户端应用程序。同时原始邮件会一直<strong>保留在服务器</strong>上，直到用户将它们手动删除。用户在自己的邮件客户端软件中查看邮件副本。</p>
<p>用户可以在服务器上创建文件层次结构来组织和保存邮件。该文件结构会照搬到邮件客户端。当用户决定删除邮件时，服务器会同步该操作，从服务器上删除对应的邮件。</p>
<h2 id="IP-编址服务"><a href="#IP-编址服务" class="headerlink" title="IP 编址服务"></a>IP 编址服务</h2><p>使用数字 IP 地址标记设备以便通过网络发送和接收数据。人们创建了可以将数字地址转换为简单易记名称的域名系统。<br>DNS (Domain Name System，域名系统)协议定义了一套自动化服务，<strong>该服务将资源名称与所需的数字网络地址匹配</strong>。协议涵盖了查询格式、响应格式及数据格式。DNS 协议通信采用单一格式，即消息格式。该格式用于所有类型的客户端查询和服务器响应、报错消息、以及服务器间的资源记录信息的传输。</p>
<h3 id="DNS-消息格式"><a href="#DNS-消息格式" class="headerlink" title="DNS 消息格式"></a>DNS 消息格式</h3><p>DNS 服务器中存储不同类型的资源记录，用来解析域名。这些记录中包含域名、地址以及记录的类型。<br>这些记录有以下类型：</p>
<ul>
<li>  <strong>A</strong> - <strong>终端</strong>设备 IPv4 地址</li>
<li>  <strong>NS</strong> - <strong>授权域名服务器</strong></li>
<li>  <strong>AAAA</strong> - <strong>终端</strong>设备 <strong>IPv6</strong> 地址（读作“四 A”）</li>
<li>  <strong>MX</strong> - <strong>邮件</strong>交换记录</li>
</ul>
<p>在客户端进行查询时，服务器 DNS 进程首先会查看<strong>自己的记录</strong>以解析名称。如果服务器不能通过自身存储的记录解析域名，它将联系<strong>其他服务器</strong>对该域名进行解析。在检索到匹配信息并将其返回到原始请求服务器后，服务器临时<strong>存储数字地址</strong>，以供再次请求同一域名时使用。</p>
<p>DNS在服务器间使用相同的消息格式，包含所有类型的客户端查询的问题、回答、授权和更多信息以及服务器响应、错误消息和服务器间的资源记录信息的传输。</p>
<p><code>ipconfig /displaydns</code>命令显示所有 DNS 缓存条目。(Windows)<br><code>nslookup</code>命令后，即显示为主机配置的默认 DNS 服务器，可以在nslookup提示符下输入主机名或域名</p>
<h4 id="DNS-层级"><a href="#DNS-层级" class="headerlink" title="DNS 层级"></a>DNS 层级</h4><p>DNS 协议采用分层系统创建数据库以提供名称解析<br><img src="/2022/02/28/%E7%BD%91%E7%BB%9C/ITN14-15/1646740214410.png"><br>不同的顶级域有不同的含义，分别代表着组织类型或起源国家/地区</p>
<h3 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议(DHCP)"></a>动态主机配置协议(DHCP)</h3><p>主机连入网络时，将联系 DHCP 服务器并请求地址。DHCP 服务器从已配置地址范围（也称为“地址池”）中选择一条地址，并将其分配（租赁）给主机。</p>
<p>在较大型的网络中，或者用户经常变更的网络中，地址分配优先选用 DHCP。新用户可能在到达时需要连接；其他用户可能有新计算机必须要连接。与为每个连接使用静态编址的做法相比，采用 DHCP 自动分配 IPv4 地址的方法更有效。<br>DHCP可以<strong>在一段可配置的时间内分配IP地址</strong>，这段时间称为租期。租期是一个重要的 DHCP 设置，当租期过期或 DHCP 服务器收到 DHCPRELLAME 消息时，地址将返回到 DHCP 池以便重复使用。因此，用户可以自由的移动位置，并通过DHCP随时重新连接网络。</p>
<p>很多网络都同时采用 DHCP 和静态编址。<strong>DHCP 用于</strong>一般用途主机，例如用户终端设备。<strong>静态编址用于</strong>网络设备，例如网关路由器、交换机、服务器和打印机。</p>
<h4 id="DHCP-工作原理"><a href="#DHCP-工作原理" class="headerlink" title="DHCP 工作原理"></a>DHCP 工作原理</h4><p>配置了 DHCP 的 IPv4 设备在启动或连接到网络时，<br>客户端将<strong>广播</strong>一条 DHCP <strong>1发现 (DHCPDISCOVER) 消息</strong>以确定网络上是否有可用 DHCP 服务器。<br>DHCP 服务器<strong>回复</strong> DHCP <strong>2服务 (DHCPOFFER) 消息</strong>，为客户端提供租赁服务。该服务消息包含为其分配的 IPv4 地址和子网掩码、DNS 服务器的 IPv4 地址和默认网关的 IPv4 地址。租赁服务还包括租用期限。</p>
<p>如果本地网络中有超过一台 DHCP 服务器，客户端可能会收到<strong>多条</strong> DHCPOFFER 消息。此时，客户端必须在这些服务器中进行<strong>选择</strong>，并且将包含服务器标识信息及客户端所接受的租赁服务的 DHCP <strong>3请求 (DHCPREQUEST) 消息</strong>发送出去。客户端还可选择向服务器请求分配以前分配过的地址。</p>
<p>如果客户端请求的 IPv4 地址（或者服务器提供的 IPv4 地址）<strong>仍然可用</strong>，服务器将<strong>返回</strong> DHCP <strong>4确认 (DHCPACK) 消息</strong>，向客户端确认地址租赁。如果请求的地址<strong>不再有效</strong>，则所选服务器将回复一条 DHCP <strong>否定</strong>确认 (DHCPNAK) 消息。一旦返回 DHCP NAK 消息，应<strong>重新启动</strong>选择进程，并重新发送新的 DHCP 发现消息。客户端租赁到地址后，应在租期结束前发送 DHCPREQUEST 消息进行续期。</p>
<p>DHCP 服务器确保每个 IP 地址都是唯一的（一个 IP 地址不能同时分配到不同的网络设备上）。因此，大多数ISP往往使用 DHCP 为其客户分配地址。</p>
<p><strong>DHCPv6</strong> 有一组与DHCPv4 类似的消息。DHCPv6 消息包括 SOLICIT、ADVERTISE、INFORMATION REQUEST 和 REPLY。</p>
<h2 id="文件共享服务"><a href="#文件共享服务" class="headerlink" title="文件共享服务"></a>文件共享服务</h2><h3 id="文件传输协议-FTP"><a href="#文件传输协议-FTP" class="headerlink" title="文件传输协议(FTP)"></a>文件传输协议(FTP)</h3><p>FTP 用于客户端和服务器之间的数据传输。FTP 客户端是一种在计算机上运行的应用，用于从 FTP 服务器中收发数据。</p>
<p>客户端使用 TCP 端口 21 与服务器建立第一个连接用于控制流量。流量由客户端命令和服务器应答组成。<br>客户端使用 TCP 端口 20 与服务器建立第二个连接用于实际数据传输。每当有数据需要传输时都会建立此连接。</p>
<p>数据传输可以在任何一个方向进行。客户端可以从服务器下载（取）数据，也可以向服务器上传（放）数据。</p>
<h3 id="服务器消息块-SMB"><a href="#服务器消息块-SMB" class="headerlink" title="服务器消息块(SMB)"></a>服务器消息块(SMB)</h3><p>服务器消息块 (SMB) 是一种客户端/服务器文件共享协议，用于规范共享网络资源（如目录、文件、打印机以及串行端口）结构。这是一种请求-响应协议。所有的 SMB 消息都采用一种常用格式。该格式采用固定大小的文件头，后跟可变大小的参数以及数据组件。<br>三个功能：</p>
<ul>
<li>  启动、身份验证以及终止会话</li>
<li>  控制文件和打印机的访问</li>
<li>  允许应用程序向任何设备收发消息<br>Microsoft 网络配置中主要采用 SMB 形式实现文件共享和打印服务。</li>
</ul>
<p>与 FTP 协议支持的文件共享不同，SMB 协议中的客户端要与服务器建立长期连接。一旦建立连接，客户端用户就可以访问服务器上的资源，就如同资源位于客户端主机上一样。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统(1-3)</title>
    <url>/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/</url>
    <content><![CDATA[<h1 id="操作系统引论"><a href="#操作系统引论" class="headerlink" title="操作系统引论"></a>操作系统引论</h1><h2 id="目标和作用"><a href="#目标和作用" class="headerlink" title="目标和作用"></a>目标和作用</h2><p>目标：方便性、有效性、可扩展性、开放性<br>作用</p>
<ol>
<li>作为用户与计算机硬件系统之间的接口</li>
<li>操作系统引论作为计算机系统资源的管理者</li>
<li>实现了对计算机资源的抽象</li>
</ol>
<h2 id="发展过程"><a href="#发展过程" class="headerlink" title="发展过程"></a>发展过程</h2><p>人工操作方式、脱机输入输出方式<br>单批道处理系统<br>多批道处理系统（资源利用率高，系统吞吐量大，平均周转时间长，无交互能力）<br>分时系统（多路性、独立性、及时性、交互性）<br>实时系统（多路性、独立性、及时性、交互性、可靠性）<br>微机操作系统（单用户多用户）</p>
<h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><ul>
<li>并发 -  <strong>并发性</strong>是指两个或多个事件在同一时间间隔内发生，而<strong>并行性</strong>是指两个或多个事件在同一时刻发生。</li>
<li>共享 -  <strong>资源共享</strong>是指系统中的资源可供内存中多个并发执行的进程共同使用。一段时间内只允许一个进程访问的资源称为<strong>临界资源</strong>一个进程访问结束并释放系统资源后才允许另一进程对该资源访问的方式称为<strong>互斥访问</strong></li>
<li>虚拟 -  通过<strong>空分复用</strong>或<strong>时分复用</strong>技术将一条物理信道变为若干条逻辑信道的技术</li>
<li>异步 -  进程的执行本身具有异步性（不可预知完成时间与顺序）所以要设计同步机制</li>
</ul>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="处理机管理功能"><a href="#处理机管理功能" class="headerlink" title="处理机管理功能"></a>处理机管理功能</h3><ul>
<li>进程控制</li>
<li>进程同步</li>
<li>进程通信</li>
<li>调度</li>
</ul>
<h3 id="内存管理功能"><a href="#内存管理功能" class="headerlink" title="内存管理功能"></a>内存管理功能</h3><ul>
<li>内存分配</li>
<li>内存保护</li>
<li>地址映射</li>
<li>内存扩充</li>
</ul>
<h3 id="I-O-设备管理功能"><a href="#I-O-设备管理功能" class="headerlink" title="(I/O)设备管理功能"></a>(I/O)设备管理功能</h3><ul>
<li>缓冲管理</li>
<li>设备分配</li>
<li>设备处理</li>
</ul>
<h3 id="文件管理功能"><a href="#文件管理功能" class="headerlink" title="文件管理功能"></a>文件管理功能</h3><ul>
<li>文件存储空间管理</li>
<li>目录管理</li>
<li>文件读写管理与保护</li>
</ul>
<h3 id="操作系统与用户之间的接口"><a href="#操作系统与用户之间的接口" class="headerlink" title="操作系统与用户之间的接口"></a>操作系统与用户之间的接口</h3><ul>
<li>用户接口（联机用户接口、脱机用户接口、程序接口）</li>
<li>程序接口</li>
</ul>
<h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><h3 id="无结构"><a href="#无结构" class="headerlink" title="无结构"></a>无结构</h3><p>程序紧凑，高效利用内存<br>但是随着系统的不断扩大，所设计出的操作系统就会变得既庞大又杂乱。<br>一方面会使编制的程序错误很多给调试工作带来困难<br>另一方面也使程序难以阅读和理解，增加了维护负担</p>
<h3 id="模块化结构"><a href="#模块化结构" class="headerlink" title="模块化结构"></a>模块化结构</h3><p>模块化OS由程序设计的模块化设计思想演变而来<br>衡量模块化设计的两个标准：内聚性、耦合性<br>优点：</p>
<ol>
<li>提高OS设计的正确性、可理解性和可维护性。</li>
<li>增强OS的可适应性。</li>
<li>加速OS开发过程。<br>问题：</li>
<li>最初模块接口规定难以满足实际需求</li>
<li>无序设计</li>
</ol>
<h3 id="分层式结构"><a href="#分层式结构" class="headerlink" title="分层式结构"></a>分层式结构</h3><p>将模块接口法中对模块的设计顺序由无序变为有序，自底向上分层设计<br>优点：</p>
<ol>
<li>易保证系统的正确性</li>
<li>易扩充和易维护性<br>缺点：</li>
<li>系统效率降低：单向依赖的层次使得必须建立层次之间的通信机制增加通信开销</li>
</ol>
<h3 id="文件管理功能-文件管理功能"><a href="#文件管理功能-文件管理功能" class="headerlink" title="文件管理功能### 文件管理功能"></a>文件管理功能### 文件管理功能</h3><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ol>
<li><p>设计现代OS的主要目标是什么？<br>方便性、有效性、可扩展性、开放性</p>
</li>
<li><p>试说明推动分时系统形成和发展的主要动力是什么。<br>满足人机交互需求，实现共享主机</p>
</li>
<li><p>为什么要引入实时操作系统？<br>更好的满足实时控制实时信息处理领域对时间控制的需求</p>
</li>
<li><p>试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较。<br>交互性：实时系统的交互性不像分时系统为终端用户提供数据和资源共享服务，而限于特定专用服务程序<br>及时性：分时系统的响应时间间隔通常为人们所能接受的1~3秒，实时系统由截至时间所确定通常为秒级到毫秒级<br>可靠性：实时系统相比分时系统要求更高的可靠性，所以采取多级容错措施保障系统的安全性</p>
</li>
<li><p>OS有几大特征？最基本的特征是什么？<br>并发性、共享性、虚拟性、异步性；并发性最基本</p>
</li>
<li><p>处理机管理有哪些主要功能？其主要任务是什么？<br>进程控制、进程同步、进程通信、调度<br>创建进程结束进程控制正在运行的进程、使多个进程有序同步进行、交换进程任务的信息、选择作业分配资源运行的作业调度和选择进程分配处理器设置现场执行的进程调度</p>
</li>
<li><p>存储器有哪些主要功能？其主要任务是什么？<br>内存分配、内存保护、地址映射、内存扩充<br>为程序分配内存空间、确保程序运行空间不干扰、将逻辑地址映射为物理地址、实现调用置换等功能</p>
</li>
<li><p>设备管理有哪些主要功能？其主要任务是什么？<br>缓冲管理、设备分配、设备处理<br>完成用户IO请求分配所需IO设备执行IO操作、提高CPU和IO设备的利用率提高IO速度方便用户使用</p>
</li>
<li><p>文件管理有哪些主要功能？其主要任务是什么？<br>文件存储空间管理、目录管理、文件读写管理与保护<br>分配外存空间提高外存利用率、为文件建立目录加以有效组织、根据用户请求读写外存数据、防止文件被非法窃取和受到破坏保障文件安全性</p>
</li>
</ol>
<h1 id="进程的描述与控制"><a href="#进程的描述与控制" class="headerlink" title="进程的描述与控制"></a>进程的描述与控制</h1><h2 id="前趋图和程序执行"><a href="#前趋图和程序执行" class="headerlink" title="前趋图和程序执行"></a>前趋图和程序执行</h2><p>前趋图（Precedence  Graph）是一个有向无循环图，用于描述进程之间执行的前后关系。</p>
<h3 id="程序的顺序执行"><a href="#程序的顺序执行" class="headerlink" title="程序的顺序执行"></a>程序的顺序执行</h3><ul>
<li>顺序性</li>
<li>封闭性</li>
<li>可再现性</li>
</ul>
<h3 id="程序的并发执行"><a href="#程序的并发执行" class="headerlink" title="程序的并发执行"></a>程序的并发执行</h3><ul>
<li>间断性</li>
<li>失去封闭性</li>
<li>不可再现性</li>
</ul>
<h2 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h2><p>而由程序段、相关的数据段和PCB三部分便构成了进程实体。</p>
<h3 id="典型定义"><a href="#典型定义" class="headerlink" title="典型定义"></a>典型定义</h3><ol>
<li>进程是程序的一次执行。</li>
<li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</li>
<li>进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位</li>
</ol>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>动态性</li>
<li>并发性</li>
<li>独立性</li>
<li>异步性</li>
</ul>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/IMG_20220304_151207_edit_772433114767030.jpg" alt="IMG_20220304_151207_edit_772433114767030"></p>
<h3 id="PCB数据结构"><a href="#PCB数据结构" class="headerlink" title="PCB数据结构"></a>PCB数据结构</h3><ol>
<li><strong>进程标识符</strong> - 用于惟一地标识一个进程。分为内部标识符和外部标识符</li>
<li><strong>处理机状态</strong> - 组成：①通用寄存器②指令计数器③程序状态字PSW④用户栈指针</li>
<li><strong>进程调度信息</strong> - 包括：①进程状态②进程优先级③进程调度所需的其它信息④事件，阻塞原因</li>
<li><strong>进程控制信息</strong> - ①程序和数据的地址 ②进程同步和通信机制 ③资源清单 ④链接指针</li>
</ol>
<table>
<thead>
<tr>
<th>pid</th>
</tr>
</thead>
<tbody><tr>
<td>进程状态</td>
</tr>
<tr>
<td>现场</td>
</tr>
<tr>
<td>优先级</td>
</tr>
<tr>
<td>阻塞原因</td>
</tr>
<tr>
<td>程序地址</td>
</tr>
<tr>
<td>同步机制</td>
</tr>
<tr>
<td>资源清单</td>
</tr>
<tr>
<td>链接指针</td>
</tr>
</tbody></table>
<h3 id="PCB的组织方式"><a href="#PCB的组织方式" class="headerlink" title="PCB的组织方式"></a>PCB的组织方式</h3><ol>
<li><strong>线性方式</strong> 将系统中的所有PCB组织在一张线性表中，将该表的首地址存放在一个专用区域中。</li>
<li><strong>链接方式</strong> 把具有同一状态的PCB，用其中的链接字链接成一个队列，排成就绪队列，若干个阻塞队列以及空白队列。</li>
<li><strong>索引方式</strong> 系统根据所有进程的状态建立几张索引表。</li>
</ol>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>进程控制是用于创建一个新进程，终止一个已完成的进程，或去终止一个因出现某事件而使其无法运行下去的进程，还负责进程运行中的状态转换。</p>
<h3 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h3><p>OS内核—-常驻内存。<br>包含与硬件紧密相关的模块（中断处理） 常用设备驱动、运行频率高的模块（时钟管理、进程调度）<br>目的：1、保护；2、提供OS效率</p>
<ol>
<li>支撑功能 - 中断处理 时钟管理 原语操作</li>
<li>资源管理功能 - 进程管理 存储器管理 设备管理</li>
</ol>
<h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><h4 id="进程的层次结构"><a href="#进程的层次结构" class="headerlink" title="进程的层次结构"></a>进程的层次结构</h4><p>即父进程、子进程（可以继承父进程所拥有的资源）</p>
<h4 id="引起创建进程的事件"><a href="#引起创建进程的事件" class="headerlink" title="引起创建进程的事件"></a>引起创建进程的事件</h4><ol>
<li>用户登录</li>
<li>作业调度</li>
<li>提供服务</li>
<li>应用请求</li>
</ol>
<h4 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h4><p>调用进程创建原语Creat（ ）按下述步骤创建一个新进程：</p>
<ol>
<li>申请空白PCB。</li>
<li>为新进程分配资源。</li>
<li>初始化进程控制块。包括：<br>①初始化标识信息。<br>②初始化处理机状态信息。<br>③初始化处理机控制信息。</li>
<li>将新进程插入就绪队列。</li>
</ol>
<h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><h4 id="引起进程终止的事件"><a href="#引起进程终止的事件" class="headerlink" title="引起进程终止的事件"></a>引起进程终止的事件</h4><ol>
<li>正常结束: 批处理中用Holt指令，分时中用Logs off指令。</li>
<li>异常结束：<br>①越界错误。存储区。<br>②保护错。写一个只读文件。<br>③非法指令。执行一条不存在的指令。<br>④特权指令错。用户访问只允许OS执行的指令。<br>⑤运行超时。<br>⑥等待超时。<br>⑦算术运算错。被0除。<br>⑧I/O故障。</li>
<li>外界干预：外界干预并非指在本进程运行中出现了异常事件，而是指进程应外界的请求而终止运行。<br>① 操作员或操作系统干预。<br>② 父进程请求终止该进程。<br>③ 当父进程终止时，OS也将他的所有子孙进程终止。</li>
</ol>
<h4 id="进程的终止过程"><a href="#进程的终止过程" class="headerlink" title="进程的终止过程"></a>进程的终止过程</h4><ol>
<li>根据被终止进程的标识符ID，从PCB集合中检索出该进程的PCB，从中读出该进程的状态。</li>
<li>若被终止进程正处于执行状态，应立即终止该进程的执行，并置调度标志为真，用于指示该进程被终止后应重新进行调度。</li>
<li>若该进程还有子孙进程，还应将其所有子孙进程予以终止，以防他们成为不可控的进程。</li>
<li>将被终止进程所拥有的全部资源，或者归还给其父进程，或者归还给系统。</li>
<li>将被终止进程（它的PCB）从所在队列（或链表）中移出，等待其他程序来搜集信息。</li>
</ol>
<h3 id="进程的阻塞与唤醒、挂起与激活"><a href="#进程的阻塞与唤醒、挂起与激活" class="headerlink" title="进程的阻塞与唤醒、挂起与激活"></a>进程的阻塞与唤醒、挂起与激活</h3><h4 id="引起进程阻塞的事件"><a href="#引起进程阻塞的事件" class="headerlink" title="引起进程阻塞的事件"></a>引起进程阻塞的事件</h4><ol>
<li>请求系统服务：提出I/O服务时，并不立即满足该进程的要求时，转变为阻塞状态来等待</li>
<li>启动某种操作：当进程启动某种操作后，在该操作完成之后才能继续执行。</li>
<li>新数据尚未到达：对于相互合作的进程而言。 </li>
<li>无新工作可做。如发送进程。</li>
</ol>
<h4 id="进程阻塞过程"><a href="#进程阻塞过程" class="headerlink" title="进程阻塞过程"></a>进程阻塞过程</h4><p>正在执行的进程，当发现上述某事件时，由于无法继续执行，于是进程便通过调用阻塞原语block( )把自己阻塞。</p>
<ol>
<li>把进程控制块中的现行状态由“执行”改为“阻塞”，并将PCB插入阻塞队列。</li>
<li>转调度程序进行重新调度，将处理机分配给另一就绪进程，并进行切换。</li>
</ol>
<h4 id="进程唤醒过程"><a href="#进程唤醒过程" class="headerlink" title="进程唤醒过程"></a>进程唤醒过程</h4><p>当被阻塞进程所期待的事件出现时，则由有关进程（比如，用完并释放了该I/O设备的进程）调用唤醒原语wakeup( )，将等待该事件的进程唤醒。</p>
<ol>
<li>首先把被阻塞的进程从等待该事件的阻塞队列中移出，将其PCB中的现行状态由阻塞改为就绪</li>
<li>然后再将该PCB插入到就绪队列中。</li>
</ol>
<h4 id="进程的挂起"><a href="#进程的挂起" class="headerlink" title="进程的挂起"></a>进程的挂起</h4><p>当出现了引起进程挂起的事件时，系统将利用挂起原语suspend( )将指定进程进程挂起。</p>
<ol>
<li>首先检查被挂起进程的状态，若处于活动就绪状态，便将其改为静止就绪；</li>
<li>对于活动阻塞状态的进程，则将之改为静止阻塞状态。</li>
</ol>
<h4 id="进程的激活"><a href="#进程的激活" class="headerlink" title="进程的激活"></a>进程的激活</h4><p>当发生激活进程的事件时，则可将在外存上处于静止就绪状态的进程换入内存。 系统利用激活原语active( )将指定进程激活:</p>
<ol>
<li>激活原语先将进程从外存调入内存，检查该进程的现行状态; </li>
<li>若是静止就绪，便将之改为活动就绪；若为静止阻塞，便将之改为活动阻塞。</li>
</ol>
<h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><p>为什么：<br>由于进程的异步性，也会给系统造成混乱，在OS中引入进程同步。<br>任务：<br>使并发执行的诸进程之间能有效地共享资源和相互合作，从而使程序的执行具有可再现性。</p>
<h3 id="进程同步的基本概念"><a href="#进程同步的基本概念" class="headerlink" title="进程同步的基本概念"></a>进程同步的基本概念</h3><ul>
<li>两种形式的制约关系：1）间接相互制约关系。由于资源共享 2）直接相互制约关系。主要由于进程间的合作。</li>
<li><strong>临界资源</strong> 一次仅允许一个进程访问的资源为临界资源 。</li>
<li><strong>临界区</strong> 把在每个进程中访问临界资源的那段代码称为临界区。</li>
<li>同步机制<strong>规则</strong> ：1)空闲让进 2)忙则等待 3)有限等待 4)让权等待</li>
</ul>
<h3 id="硬件同步机制"><a href="#硬件同步机制" class="headerlink" title="硬件同步机制"></a>硬件同步机制</h3><p>利用计算机硬件指令解决临界区问题<br>    对临界区管理将标识看做一个锁，“锁开”进入，“锁关”等待。 初始打开，每个进入临界区的进程必须对锁进行测试。 测试和关锁操作必须连续（原子操作）<br>方法：</p>
<ul>
<li>关中断</li>
<li>利用Test-and-Set指令实现互斥</li>
<li>利用Swap指令实现进程互斥</li>
</ul>
<p>优点：</p>
<ul>
<li>适用于任意数目的进程，在单处理器或多处理器上</li>
<li>简单，容易验证其正确性</li>
<li>可以支持进程内存在多个临界区，只需为每个临界区设立一个布尔变量</li>
</ul>
<p>缺点：</p>
<ul>
<li>等待要耗费CPU时间，不能实现“让权等待”</li>
<li>可能“饥饿”：从等待进程中随机选择一个进入临界区，有的进程可能一直选不上</li>
</ul>
<h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><p>信号量（Semaphores）机制:是一种卓有成效的进程同步工具。</p>
<h4 id="整形信号量"><a href="#整形信号量" class="headerlink" title="整形信号量"></a>整形信号量</h4><ol>
<li>必须置一次且只能置一次初值，并且初值不能为负数。</li>
<li>只能执行P、V操作。</li>
<li>必须成对使用P、V操作：P操作遗漏则不能保证互斥访问，V操作遗漏则不能在使用临界资源之后将其释放；P，V次序不能错误、重复或遗漏。<br>整形信号量机制的问题：忙等。<br>wait操作中信号量S&lt;=0时，会不停的测试<br>未遵循让权等待的原则</li>
</ol>
<h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><p>只能用于共享一个临界资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">	int value;</span><br><span class="line">	struct process_control_block *list;</span><br><span class="line">&#125;semaphore;</span><br><span class="line"></span><br><span class="line">wait(semaphore *S)&#123;</span><br><span class="line">	S-&gt;value--;</span><br><span class="line">	if(S-&gt;value&lt;0)block(S-&gt;list);</span><br><span class="line">&#125;</span><br><span class="line">signal(semaphore *S)&#123;</span><br><span class="line">	S-&gt;value++;</span><br><span class="line">	if(S-&gt;value&lt;=0)wakeup(S-&gt;list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>信号量的初值：0，1，n三种情况<br>    1：表示临界资源；<br>    0：表示进程间的同步（前驱）关系<br>    n：表示若干个资源</p>
<h4 id="AND型信号量"><a href="#AND型信号量" class="headerlink" title="AND型信号量"></a>AND型信号量</h4><p><strong>AND同步机制的基本思想</strong>：将进程在整个运行过程中需要的所有资源，一次性全都地分配给进程，待进程使用完后再一起释放。只要尚有一个资源未能分配给进程，其它所有可能为之分配的资源，也不分配给他。<br><strong>原子操作</strong>：要么全部分配到进程，要么一个也不分配。<br>在wait操作中，增加了一个“AND”条件，故称为AND同步，或称为同时wait操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swait（S1，S2，···，Sn ） &#123;</span><br><span class="line">     while（true）&#123;</span><br><span class="line">         if（ S1≥1 and S2≥1 and…and Sn≥1 ）&#123;</span><br><span class="line">            for (i = 1 ; i&lt;= n; i++)&#123;</span><br><span class="line">                     Si =  Si – 1;</span><br><span class="line">             &#125;</span><br><span class="line">             break;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">               place  the process  in  the waiting  queue  associated  with  the  first  Si  found  with  Si＜1,  and  set  the program  count  of  this  process  to  the  beginning  of  Swait  operation//将进程置于与在 Si&lt;1 的条件下找到的**第一个** Si 关联的等待队列中，并将此过程的程序计数设置为 Swait 操作的开始</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ssignal（S1，S2，···，Sn）&#123;</span><br><span class="line">    for(  i = 1; i&lt;= n; i++ )&#123;</span><br><span class="line">         Si = Si+1;</span><br><span class="line">         Remove  all  the  process  waiting  in  the  queue  associated  with  Si  into  the  ready  queue//将与 Si 关联的队列中**所有**等待的进程移动到就绪队列中</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="信号量集"><a href="#信号量集" class="headerlink" title="信号量集"></a>信号量集</h4><p>一般信号量集是指同时需要多种资源、每种占用的数目不同、且可分配的资源(预留下限)还存在一个临界值时的信号量处理<br>一般信号量集的基本思路就是在AND型信号量集的基础上进行扩充，在一次原语操作中完成所有的资源申请</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swait（S1，t1，d1，…，Sn，tn，dn）（满足ti≥ di）    </span><br><span class="line">    if( S1 ≥t1 &amp;…&amp; Sn≥tn)&#123;  </span><br><span class="line">          for(  i =1; i&lt;=n; i++)&#123;</span><br><span class="line">                    Si ＝Si － di;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">          Place  the  executing  process  in  the  waiting  queue  of  the  first Si  with Si＜ti  and  set  its  program  counter  to  the  beginning  of  the  Swait  operation//将进程置于与在 Si&lt;ti 的条件下找到的**第一个** Si 关联的等待队列中，并将此过程的程序计数设置为 Swait 操作的开始</span><br><span class="line">    &#125;//end if</span><br><span class="line">&#125;//end Swait </span><br><span class="line"></span><br><span class="line"> Ssignal（S1，d1，···，Sn，dn）&#123;</span><br><span class="line">    for( i =1; i&lt;= n; i++)&#123;  </span><br><span class="line">        Si = Si + di；</span><br><span class="line">        Remove  all  the  process  waiting  in  the  queue  associated  with  Si  into  the  ready  queue//将与 Si 关联的队列中**所有**等待的进程移动到就绪队列中</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三种特例：</p>
<ol>
<li>Swait(S,d,d)：允许每次申请d个资源。当资源数少于d时，不予分配。</li>
<li>Swait (S,1,1)：S&gt;1，记录型信号量。S=1时，互斥型信号量。</li>
<li>Swait(S,1,0)，可控开关，当S&gt;=1时，允许进入，S&lt;1时，不能进入。</li>
</ol>
<h2 id="经典进程的同步问题"><a href="#经典进程的同步问题" class="headerlink" title="经典进程的同步问题"></a>经典进程的同步问题</h2><h3 id="生产者——消费者问题"><a href="#生产者——消费者问题" class="headerlink" title="生产者——消费者问题"></a>生产者——消费者问题</h3><h4 id="记录型信号量解决"><a href="#记录型信号量解决" class="headerlink" title="记录型信号量解决"></a>记录型信号量解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void producer( )&#123;</span><br><span class="line">    do&#123;</span><br><span class="line">		…</span><br><span class="line">		Produce an item in nextp;</span><br><span class="line">		…</span><br><span class="line">		wait(empty);</span><br><span class="line">		wait(mutex);</span><br><span class="line">		buffer(in):=nextp;</span><br><span class="line">		in:=(in+1) mod n;</span><br><span class="line">		signal(mutex);</span><br><span class="line">		signal(full);</span><br><span class="line">	&#125;while(TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void consumer&#123;</span><br><span class="line">  do&#123;</span><br><span class="line">  		wait(full);</span><br><span class="line">		wait(mutex);</span><br><span class="line">		nextc:=buffer(out);</span><br><span class="line">		out:=(out+1) mod n;</span><br><span class="line">		signal(mutex);</span><br><span class="line">		signal(empty);</span><br><span class="line">		Consumer the item in nextc;</span><br><span class="line">		……</span><br><span class="line">	&#125;while(TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AND信号量解决"><a href="#AND信号量解决" class="headerlink" title="AND信号量解决"></a>AND信号量解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int  in=0, out=0;</span><br><span class="line">item    buffer[ n ];</span><br><span class="line">semaphore  mutex=1, empty=n, full=0;</span><br><span class="line">void producer( )&#123;</span><br><span class="line">	do&#123;</span><br><span class="line">		…</span><br><span class="line">		produce an item in nextp;</span><br><span class="line">		…</span><br><span class="line">		Swait(empty, mutex);</span><br><span class="line">		buffer[in] = nextp;</span><br><span class="line">		in = (in+1) % n;</span><br><span class="line">		Ssignal(mutex, full);</span><br><span class="line">	&#125;while(TRUE);</span><br><span class="line">&#125; //end producer</span><br><span class="line"></span><br><span class="line">void consumer&#123;</span><br><span class="line">	do&#123;</span><br><span class="line">		Swait(full, mutex);</span><br><span class="line">		nextc = buffer[out];</span><br><span class="line">		out = (out+1) % n;</span><br><span class="line">		Ssignal(mutex, empty);</span><br><span class="line">		consumer the item in nextc;</span><br><span class="line">	&#125;while(TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><p>几种解决方法：</p>
<ol>
<li>至多只允许有四位哲学家同时去拿左边的筷子，最终能保证至少有一位哲学家能够进餐，并在用毕时能释放出他用过的两只筷子，从而使更多的哲学家能够进餐。</li>
<li>仅当哲学家的左、右两只筷子均可用时，才允许他拿起筷子进餐。</li>
<li>规定奇数号哲学家先拿他左边的筷子，然后再去拿右边的筷子；而偶数号哲学家则相反。按此规定，将是1、 2号哲学家竞争1号筷子；3、4号哲学家竞争3号筷子。即五位哲学家都先竞争奇数号筷子，获得后，再去竞争偶数号筷子，最后总会有一位哲学家能获得两只筷子而进餐</li>
</ol>
<h4 id="AND信号量解决-1"><a href="#AND信号量解决-1" class="headerlink" title="AND信号量解决"></a>AND信号量解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">semaphore chopstick[5]=&#123;1,1,1,1,1&#125;;</span><br><span class="line">do&#123;</span><br><span class="line">	……;</span><br><span class="line">	think;</span><br><span class="line">	Sswait(chopstick[(i+1) % 5],chopstick[i]);</span><br><span class="line">	eat;</span><br><span class="line">	Ssignal(chopstick[(i+1) % 5],chopstick[i]);</span><br><span class="line">&#125;while(TRUE);</span><br></pre></td></tr></table></figure>

<h3 id="读者——写者问题"><a href="#读者——写者问题" class="headerlink" title="读者——写者问题"></a>读者——写者问题</h3><h4 id="记录型信号量解决-1"><a href="#记录型信号量解决-1" class="headerlink" title="记录型信号量解决"></a>记录型信号量解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">semaphore rmutex=1, wmutex = 1;</span><br><span class="line">int readcount = 0;</span><br><span class="line"></span><br><span class="line">void reader( )&#123;</span><br><span class="line">	do&#123;</span><br><span class="line">		wait(rmutex);</span><br><span class="line">		if  readcount=0  then  wait(wmutex);</span><br><span class="line">		readcount:=readcount+1;</span><br><span class="line">		signal(rmutex);</span><br><span class="line">		…				</span><br><span class="line">		perform read operation</span><br><span class="line">		…</span><br><span class="line">		wait(rmutex);</span><br><span class="line">		readcount:=readcount-1;</span><br><span class="line">		if readcount=0  then signal(wmutex);</span><br><span class="line">		signal(rmutex);</span><br><span class="line">	&#125;while(TRUE);</span><br><span class="line">&#125;//end reader</span><br><span class="line"></span><br><span class="line">void writer( )&#123;</span><br><span class="line">	do&#123;</span><br><span class="line">		wait(wmutex)</span><br><span class="line">		perform write operation;</span><br><span class="line">		signal(wmutex)</span><br><span class="line">	&#125;while(TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line">	cobegin</span><br><span class="line">	reader(); writer();</span><br><span class="line">	coend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="信号量集解决"><a href="#信号量集解决" class="headerlink" title="信号量集解决"></a>信号量集解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int RN;</span><br><span class="line">Semaphore L=RN, mx=1;</span><br><span class="line">//RN标示同时允许多少读进程存在</span><br><span class="line">void reader( )&#123;</span><br><span class="line">	   do&#123;</span><br><span class="line">              swait(L,1,1);</span><br><span class="line">              swait(mx,1,0);</span><br><span class="line">                   …</span><br><span class="line"> 	        perform read operation;</span><br><span class="line">		        …</span><br><span class="line">	         ssignal(L,1);</span><br><span class="line">        &#125;while(TRUE);</span><br><span class="line">&#125;//end reader</span><br><span class="line"></span><br><span class="line"> void writer( )&#123;</span><br><span class="line">        do&#123;</span><br><span class="line">             swait(mx,1,1; L,RN,0);</span><br><span class="line">             perform write operation;</span><br><span class="line">             ssignal(mx, 1);</span><br><span class="line">        &#125;while(TRUE);</span><br><span class="line"> &#125; //end writer</span><br><span class="line"></span><br><span class="line"> void main( )&#123;</span><br><span class="line">    cobegin</span><br><span class="line">       reader(); writer();</span><br><span class="line">    coedn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li><strong>共享存储器系统</strong> - 基于共享数据结构的通信方式。基于共享存储区的通信方式。</li>
<li><strong>消息传递系统</strong> - 是目前的主要通信方式，信息单位：消息（报文）实现：一组通信命令（原语），具有透明性、同步的实现。实现方式的不同，而分成：<br>   （1）直接通信方式<br>   （2）间接通信方式</li>
<li><strong>管道通信系统</strong> - 管道：连接一个读进程和一个写进程之间通信的共享文件。 功能：大量的数据发收。 注意：<pre><code>（1）互斥
（2）同步
（3）对方是否存在
</code></pre>
</li>
<li><strong>客户机服务器系统</strong></li>
</ul>
<h3 id="消息传递通信的实现方法"><a href="#消息传递通信的实现方法" class="headerlink" title="消息传递通信的实现方法"></a>消息传递通信的实现方法</h3><ul>
<li><p>直接通信方式<br>这是指发送进程利用OS所提供的发送命令，直接把消息发送给目标进程。<br>系统提供下述两条通信命令（<strong>原语</strong>）：<br>   Send  （Receiver，  message）；<br>   Receive（Sender，  message）； </p>
</li>
<li><p>间接通信方式<br>指进程之间利用信箱的通信方式。发送进程发送给目标进程的消息存放信箱；接收进程则从该信箱中，取出对方发送给自己的消息；消息在信箱中可以安全地保存，只允许核准的目标用户随时读取。<br>   系统为信箱通信提供了若干条<strong>原语</strong>，分别用于信箱的创建、撤消和消息的发送、接收等。优点：在读/写时间上的随机性<br>信箱分为以下三类：<br>（1）私用信箱<br>（2）公用信箱<br>（3）共享信箱<br>在利用信箱通信时，在发送进程和接收进程之间，存在以下四种关系：<br>（1）一对一关系。<br>（2）多对一关系，客户/服务器交互。<br>（3）一对多关系， 广播方式。<br>（4）多对多关系。</p>
</li>
</ul>
<h3 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h3><p>消息头：含控制信息如：收/发进程名，消息长度、类型、编号<br>消息内容：<br>    定长消息：系统开销小，用户不便（特别是传长消息用户）<br>    变长消息：开销大，用户方便。</p>
<h3 id="消息格式进程同步方式"><a href="#消息格式进程同步方式" class="headerlink" title="消息格式进程同步方式"></a>消息格式进程同步方式</h3><p>1）发送和接收进程阻塞（汇合）用于紧密同步，无缓冲区时。<br>2）发送进程不阻塞，接收进程阻塞（多个）相当于接收进程（可能是多个）一直等待发送进程，如：打印进程等待打印任务。<br>3）发送/接收进程均不阻塞一般在发、收进程间有多个缓冲区时。</p>
<h2 id="进程运行与监控"><a href="#进程运行与监控" class="headerlink" title="进程运行与监控"></a>进程运行与监控</h2><h3 id="Linux进程控制块"><a href="#Linux进程控制块" class="headerlink" title="Linux进程控制块"></a>Linux进程控制块</h3><h4 id="task-struct结构"><a href="#task-struct结构" class="headerlink" title="task_struct结构"></a>task_struct结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pid_t pid;</span><br><span class="line">uid_t uid,euid; </span><br><span class="line">gid_t gid,egid;</span><br><span class="line">volatile long state;</span><br><span class="line">int exit_state;</span><br><span class="line">unsigned int rt_priority;</span><br><span class="line">unsigned int policy;</span><br><span class="line">struct list_head tasks;</span><br><span class="line">struct task_struct *real_parent;</span><br><span class="line">struct task_struct *parent;</span><br><span class="line">struct list_head children,sibling;</span><br><span class="line">struct fs_struct *fs;</span><br><span class="line">struct files_struct *files;</span><br><span class="line">struct mm_struct *mm;</span><br><span class="line">struct signal_struct *signal;</span><br><span class="line">struct sighand_struct *sighand;</span><br><span class="line">cputime_t utime, stime;</span><br><span class="line">struct timespec start_time;</span><br><span class="line">struct timespec real_start_time;</span><br></pre></td></tr></table></figure>

<h4 id="task-struct-进程状态"><a href="#task-struct-进程状态" class="headerlink" title="task_struct:进程状态"></a>task_struct:进程状态</h4><p>——<code>volatile long state;</code><br>state成员的可能取值如下： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define TASK_RUNNING	0  </span><br><span class="line">#define TASK_INTERRUPTIBLE	1  </span><br><span class="line">#define TASK_UNINTERRUPTIBLE	2  </span><br><span class="line">#define TASK_ZOMBIE	4  </span><br><span class="line">#define TASK_STOPPED	8</span><br></pre></td></tr></table></figure>

<h4 id="进程状态切换"><a href="#进程状态切换" class="headerlink" title="进程状态切换"></a>进程状态切换</h4><p><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1646809311457.png"></p>
<h4 id="task-struct-文件管理"><a href="#task-struct-文件管理" class="headerlink" title="task_struct:文件管理"></a>task_struct:文件管理</h4><p><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1647413678022.png"></p>
<h3 id="进程的启动"><a href="#进程的启动" class="headerlink" title="进程的启动"></a>进程的启动</h3><p>UNIX&amp;Linux中创建进程的方式：</p>
<ul>
<li><p>在shell中执行命令或可执行文件由shell进程调用fork函数创建子进程</p>
</li>
<li><p>在代码中（已经存在的进程中）调用fork函数创建子进程，fork创建的进程为子进程，原进程为父进程</p>
</li>
<li><p>Linux系统中进程0 （PID=0）是由内核创建，其他所有进程都是由父进程调用fork函数所创建的。进程0在创建子进程（PID=1，init进程）后，进程0就转为交换进程或空闲进程</p>
</li>
<li><p>进程1（init进程）是系统中其他所有进程的共同祖先</p>
</li>
</ul>
<h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p><code>#include&lt;unistd.h&gt;</code>头文件定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Clone the calling process, creating an exact copy.</span><br><span class="line">	Return -1 for errors, 0 to the new process,</span><br><span class="line">	and the process ID of the new process to the old process.  */</span><br></pre></td></tr></table></figure>
<p>fork函数被正确调用后，将会在子进程中和父进程中分别返回</p>
<ul>
<li>在子进程中返回值为0（不合法的PID，提示当前运行在子进程中）</li>
<li>在父进程中返回值为子进程ID（让父进程掌握所创建子进程的ID号）</li>
<li>出错返回-1</li>
</ul>
<p>子进程是父进程的副本</p>
<ul>
<li>子进程复制/拷贝父进程的PCB、用户空间（数据段、堆和栈）</li>
<li>父子进程共享正文段（只读）<br>父进程继续执行fork函数调用之后的代码，子进程也从fork函数调用之后的代码开始执行为了提高效率，fork后不并立即复制父进程数据段、堆和栈，采用了写时复制机制（Copy-On-Write）：当父子进程任意之一要修改数据段、堆、栈时，进行复制操作，并且仅复制修改区域</li>
</ul>
<p>子进程复制父进程的进程控制块</p>
<ul>
<li>父进程的文件描述符表被子进程复制，父子进程的同一文件描述符<strong>指向同一个文件表</strong></li>
<li>父子进程对同一文件访问基于<strong>相同的文件当前位置</strong></li>
</ul>
<p>父子进程对共享文件的常见处理方式：</p>
<ul>
<li>父进程等待子进程完成。当子进程终止后，文件当前位置已经得到了相应的更新</li>
<li>父子进程各自执行不同的程序段，各自关闭不需要的文件</li>
</ul>
<p>vfork函数保证子进程先执行，在它调用exec或者exit之后，父进程才会继续被调度执行（父进程处于TASK_UNINTERRUPTIBLE状态）</p>
<h4 id="进程内存空间布局"><a href="#进程内存空间布局" class="headerlink" title="进程内存空间布局"></a>进程内存空间布局</h4><ul>
<li>命令行参数和环境变量 - 主要用于支撑函数调用 存放参数、局部变量等</li>
<li>堆栈 - 用于动态分配内存</li>
<li>未初始化的数据 - 程序执行之前，将此段中 的数据初始化为0，如 全局变量long sum[1000];</li>
<li>初始化的数据 - 包含了程序中需明确赋 初值的变量，如全局变量 int maxcount=99;</li>
<li>正文 - CPU执行的代码部分，正文 段通常是共享、只读的</li>
</ul>
<h3 id="进程的运行控制"><a href="#进程的运行控制" class="headerlink" title="进程的运行控制"></a>进程的运行控制</h3><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>设置环境变量的三种方法： </p>
<ul>
<li>putenv - 将环境变量字符串放入环境变量表中</li>
<li>setenv - 将指定环境变量的值设置为参数指定值</li>
<li>unsetenv - 删除指定的环境变量字符串</li>
</ul>
<h4 id="exec系列函数"><a href="#exec系列函数" class="headerlink" title="exec系列函数"></a>exec系列函数</h4><p>进程调用exec系列函数在进程中加载执行另外一个可执行文件<br>exec系列函数替换了当前进程（执行该函数的进程）的正文段、数据段、堆和栈（来源于加载的可执行文件），但并不修改PCB！<br>执行exec系列函数后从加载可执行文件的main函数开始重新执行<br>exec系列函数<strong>并不创建新进程</strong>，所以在调用exec系列函数后其进程ID(uid)并未改变，已经打开的文件描述符不变</p>
<p>execl execle execlp execv execve execvp<br>六个函数开头均为exec，所以称为exec系列函数</p>
<ul>
<li>l：表示list，每个命令行参数都说明为一个单独的参数</li>
<li>v：表示vector，命令行参数放在数组中</li>
<li>e：表示由函数调用者提供环境变量表</li>
<li>p：表示通过环境变量PATH来指定路径，查找可执行文件</li>
</ul>
<h3 id="进程的监测"><a href="#进程的监测" class="headerlink" title="进程的监测"></a>进程的监测</h3><h4 id="终止进程函数"><a href="#终止进程函数" class="headerlink" title="终止进程函数"></a>终止进程函数</h4><p>头文件stdlib.h定义：void  exit( int  status )<br>头文件unistd.h定义：void  _exit (int  status ）<br>调用这两个函数均会正常地终止一个进程<br>调用 <strong>_exit</strong> 函数将会<strong>立即</strong>返回内核<br>调用 <strong>exit</strong> 函数执行一些预先注册的终止处理函数,执行文件I/O操作的善后工作，使得所有缓冲的输出数据被更新到相应的设备,返回内核</p>
<h4 id="获知子进程状态改变"><a href="#获知子进程状态改变" class="headerlink" title="获知子进程状态改变"></a>获知子进程状态改变</h4><ul>
<li>主动获取 - 调用wait或waitpid函数等待子进程状态信息改变，并获取其状态信息</li>
<li>异步通知 - 当一个进程发生特定的状态变化（进程终止、暂停以及恢复）时，内核向其父进程发送SIGCHLD信号，父进程可以选择忽略该信号，也可以对信号进行处理（默认处理方式为忽略该信号）</li>
</ul>
<p>僵尸进程：<br>进程在退出之前会释放进程用户空间的所有资源，但PCB等内核空间资源不会被释放。当父进程调用wait或waitpid函数后，内核将根据情况<strong>关闭</strong>该进程打开的所有文件。而对于已经终止但父进程尚未对其调用wait或waitpid函数的进程（TASK_ZOMBIE状态），称为僵尸进程。</p>
<p>孤儿进程：<br>如果 <strong>父进程在子进程终止之前终止</strong>，则子进程的父进程将变为init进程，保证每个进程都有父进程，由init进程调用wait函数进行善后</p>
<h5 id="wait函数"><a href="#wait函数" class="headerlink" title="wait函数"></a>wait函数</h5><p>头文件：sys/wait.h<br>功能：获取任意子进程的状态改变信息（如果是终止状态则对子进程进行善后处理）<br><code>pid_t wait(int *statloc); </code><br>参数statloc：用于存储子进程的状态改变信息<br>若成功返回状态信息改变的子进程ID，出错返回-1<br>子进程状态改变信息包含了多种类型的信息，可以通过<strong>系统提供的宏</strong>来快速解析子进程的状态<br>如：<br>| 宏 | 功能说明 |<br>| — | — |<br>| WIFEXITED(statloc) | 当子进程正常终止时该宏为真，对于这种情况可进一步执行WEXITSTATUS(statloc)，获取子进程传递给exit、_exit函数参数的低8位 |<br>| WIFSIGNALED(statloc) | 当子进程异常终止时该宏为真，对于这种情况可进一步执行WTERMSTG(statloc)，获取使子进程终止的信号编号 |<br>| WIFSTOPPED(statloc) | 当子进程暂停时该宏为真，对于这种情况可进一步执行WSTOPSIG(statloc)，获取使子进程暂停的信号编号 |<br>| WIFCONTINUED(statloc) | 若子进程在暂停后已经继续则该宏为真 |</p>
<p>如果一个进程有几个子进程，那么只要有一个子进程状态改变，wait函数就返回</p>
<p>如何才能使用wait函数等待某个<strong>特定</strong>子进程的状态改变？</p>
<ol>
<li>调用wait，然后将其返回的进程ID和所期望的子进程ID进行比较</li>
<li>如果ID不一致，则保存该ID，并循环调用wait函数，直到等到所期望的子进程ID为止</li>
</ol>
<h5 id="waitpid函数"><a href="#waitpid函数" class="headerlink" title="waitpid函数"></a>waitpid函数</h5><p>功能：等待某个<strong>特定</strong>子进程状态改变<br><code>pid_t waitpid(pid_t pid, int *statloc, int options);</code><br>参数：</p>
<ul>
<li>pid：pid == -1：等待任意子进程状态改变（同wait）；pid &gt; 0：等待进程ID为pid的子进程状态改变；pid == 0：等待其组ID等于调用进程组ID的任意子进程；pid &lt; -1：等待其组ID等于pid绝对值的任意子进程</li>
<li>statloc：用于存储子进程的状态改变信息</li>
<li>options：可以为0，也可以是以下常量：WNOHANG：如果没有任何已经终止的子进程则马上返回, 函数不等待，此时返回值为0；WUNTRACED：用于跟踪调试<br>成功返回终止子进程ID，失败返回-1</li>
</ul>
<p>waitpid可以实现非阻塞的等待操作，有时希望取得子进程的状态改变信息，但不希望阻塞父进程等待子进程状态改变</p>
<h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><ol>
<li>在一个已有进程中<strong>创建</strong>一个新线程比创建一个全新进程所需的时间少。</li>
<li><strong>终止</strong>一个线程比终止一个进程花费的时间少。</li>
<li>线程间<strong>切换</strong>比进程间切换花费的时间少。</li>
<li>线程提高了不同的执行程序间<strong>通信</strong>的效率。同一个进程中的线程共享存储空间和文件，它们无需调用内核就可以互相通信。</li>
</ol>
<h3 id="线程的引入"><a href="#线程的引入" class="headerlink" title="线程的引入"></a>线程的引入</h3><p>引入进程是为了使多个程序能够并发执行，以提高资源利用率和系统吞吐量；<br>引入线程是为了减少程序在并发执行时所付出的时空开销，使OS具有更好的并发性<br> 进程的两个基本属性</p>
<ul>
<li>一个可拥有资源的独立单位</li>
<li>一个可调度和分派的基本单位</li>
</ul>
<p>调度和分派的部分通常称为<strong>线程</strong>或轻型进程，而资源所有权的部分通常称为<strong>进程</strong>。</p>
<h3 id="线程与进程的比较"><a href="#线程与进程的比较" class="headerlink" title="线程与进程的比较"></a>线程与进程的比较</h3><p>从调度性、并发性、系统开销和拥有资源等方面对线程和进程进行比较。<br>（线程必须在某个进程内执行 一个进程可以包含一个线程或多个线程）</p>
<h4 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h4><p>在传统的操作系统中，进程作为拥有资源和独立调度、分派的基本单位。而在引入线程的操作系统中，则把线程作为调度和分派的基本单位，而进程作为资源拥有的基本单位。</p>
<h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>在引入线程的操作系统中，不仅进程之间可以并发执行，而且在一个进程中的多个线程之间亦可并发执行，使得操作系统具有更好的并发性，从而能更加有效地提高系统资源的利用率和系统的吞吐量。</p>
<h4 id="拥有资源"><a href="#拥有资源" class="headerlink" title="拥有资源"></a>拥有资源</h4><p>一般而言，线程<strong>自己不拥有系统资源</strong>(也有一点必不可少的资源)，但它可以访问其隶属进程的资源，即一个进程的代码段、数据段及所拥有的系统资源，如已打开的文件、I/O 设备等，可以<strong>供</strong>该进程中的所有线程所共享。</p>
<h4 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h4><p>同一进程中的不同线程共享进程的内存空间和资源。<br>同一进程中的<strong>不同线程</strong>的独立性低于<strong>不同进程</strong>。</p>
<h4 id="系统开销"><a href="#系统开销" class="headerlink" title="系统开销"></a>系统开销</h4><p>线程的切换只需要保存和设置少量的寄存器内容，不涉及存储器管理方面的操作。<br>由于一个进程中的多个线程具有相同的地址空间，在同步和通信的实现方面线程也比进程容易。在一些操作系统中，线程的切换、同步和通信都无须操作系统内核的干预。（少）</p>
<h4 id="支持多处理机系统"><a href="#支持多处理机系统" class="headerlink" title="支持多处理机系统"></a>支持多处理机系统</h4><p>一个进程分为多个线程分配到多个处理机上并行执行，可加速进程的完成。</p>
<h3 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h3><ol>
<li>轻型实体<br> 线程自己基本不拥有系统资源，只拥有少量必不可少的资源：TCB，程序计数器、一组寄存器、栈。</li>
<li>独立调度和分派的基本单位<br> 在多线程OS中,线程是独立运行的基本单位,因而也是独立调度和分派的基本单位。</li>
<li>可并发执行<br> 同一进程中的多个线程之间可以并发执行，一个线程可以创建和撤消另一个线程。</li>
<li>共享进程资源<br> 它可与同属一个进程的其它线程共享进程所拥有的全部资源。</li>
</ol>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>同进程一样，线程之间也存在共享资源和相互合作的制约关系，致使线程在运行时也具有间断性。<br>线程运行时有以下3种状态：<br>①<strong>执行</strong>状态:表示线程正获得CPU而运行；<br>②<strong>就绪</strong>状态:表示线程已具备了各种运行条件，一旦获得CPU便可执行；<br>③<strong>阻塞</strong>状态:表示线程在运行中因某事件而受阻，处于暂停执行的状态；</p>
<h3 id="线程的组成"><a href="#线程的组成" class="headerlink" title="线程的组成"></a>线程的组成</h3><p>每个线程有一个TCB结构，即线程控制块，用于保存自己私有的信息，主要由以下部分组成：</p>
<ul>
<li>一个唯一的线程标识符；</li>
<li>一组寄存器 ：包括程序计数器、状态寄存器、通用寄存器的内容；</li>
<li>线程运行状态：用于描述线程正处于何种运行状态；</li>
<li>优先级：描述线程执行的优先程度；</li>
<li>线程专有存储器：用于保存线程自己的局部变量拷贝；</li>
<li>信号屏蔽：对某些信号加以屏蔽；</li>
<li>两个栈指针：核心栈、用户栈。</li>
</ul>
<h3 id="进程线程对比"><a href="#进程线程对比" class="headerlink" title="进程线程对比"></a>进程线程对比</h3><table>
<thead>
<tr>
<th>应用功能</th>
<th>线程</th>
<th>进程</th>
</tr>
</thead>
<tbody><tr>
<td>创建</td>
<td>pthread_create</td>
<td>fork,vfork</td>
</tr>
<tr>
<td>退出</td>
<td>pthread_exit</td>
<td>exit</td>
</tr>
<tr>
<td>等待</td>
<td>pthread_join</td>
<td>wait、waitpid</td>
</tr>
<tr>
<td>取消/终止</td>
<td>pthread_cancel</td>
<td>abort</td>
</tr>
<tr>
<td>读取ID</td>
<td>pthread_self()</td>
<td>getpid()</td>
</tr>
<tr>
<td>同步互斥/通信机制</td>
<td>互斥锁、条件变量、读写锁</td>
<td>无名管道、有名管道、信号、消息队列、信号量、共享内存</td>
</tr>
</tbody></table>
<h3 id="线程间的同步和通信"><a href="#线程间的同步和通信" class="headerlink" title="线程间的同步和通信"></a>线程间的同步和通信</h3><p>▪为使系统中的多线程能有条不紊的运行，系统必须提供用于实现线程间同步和通信的机制。在多线程OS中，通常提供多种同步机制:</p>
<ul>
<li>互斥锁(mutex) - 互斥锁是一种比较简单的、用于实现进程间对资源互斥访问的机制。 由于操作互斥锁的时间和空间开销都较低，因而较适合于高频度使用的关键共享数据和程序段。</li>
<li>条件变量 - 每一个条件变量通常都与一个互斥锁一起使用。 单纯的互斥锁用于短期锁定，主要是用来保证对临界区的互斥进入。而条件变量则用于线程的长期等待， 直至所等待的资源成为可用的。</li>
<li>信号量机制 - 当某线程需利用信号量来实现同一进程中各线程之间的同步时，可调用创建信号量的命令来创建一私用信号量，其数据结构存放在应用程序的地址空间中。</li>
</ul>
<h2 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h2><h3 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h3><p>用户级线程仅存在于用户空间中。对于这种线程的创建、撤消、线程之间的同步与通信等功能，都无须内核来实现。<br>优点：</p>
<ul>
<li>线程切换<strong>不调用内核</strong></li>
<li>调度是应用程序特定的：可以选择<strong>最好的算法</strong></li>
<li>可运行在任何操作系统上（只需要线程库），可以在一个<strong>不支持线程的OS</strong>上实现<br>缺点：</li>
<li>当线程执行一个系统调用时，该线程及其所属进程内的所有线程都会<strong>被阻塞</strong>。</li>
<li>多线程应用<strong>不能利用</strong>多处理机进行多重处理。</li>
</ul>
<h3 id="内核支持线程"><a href="#内核支持线程" class="headerlink" title="内核支持线程"></a>内核支持线程</h3><p>内核支持线程，是在内核的支持下运行的，即无论是用户进程中的线程，还是系统进程中的线程，他们的创建、撤消和切换等，是依靠内核实现的。<br>优点：</p>
<ul>
<li>在多处理器系统中，内核能够<strong>同时</strong>调度同一进程中多个线程并行执行；</li>
<li>如果进程中的一个线程被阻塞了，内核<strong>可以</strong>调度该进程中的其它线程占有处理器运行，也可以运行其它进程中的线程；</li>
<li>内核支持线程具有很小的数据结构和堆栈，线程的切换比较<strong>快</strong>，切换<strong>开销小</strong>；</li>
<li>内核本身也可以采用多线程技术，可以提高系统的执行<strong>速度和效率</strong>。<br>缺点：<br>对于线程切换而言，其模式切换的开销较大 在同一个进程中，从一个线程切换到另一个线程时，需要<strong>从用户态转到内核态再转到用户态</strong>进行，这是因为用户进程的线程在用户态运行，而线程调度和管理是在内核实现的，系统开销较大。</li>
</ul>
<h3 id="组合方式"><a href="#组合方式" class="headerlink" title="组合方式"></a>组合方式</h3><p>用户级线程是在用户空间实现的。所有用户级线程都具有相同的数据结构，它们都运行在一个中间系统上：<br>运行时系统（又称为线程库）<br>内核控制线程又称为轻型进程LWP<br><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1647413220791.png" alt="enter description here"></p>
<h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><ol>
<li><p>什么是前趋图？为什么要引入前趋图？<br>指一个有向无环图，用于描述进程之间执行的先后顺序</p>
</li>
<li><p>画出前趋图：S1:a=x+y;S2:b=z+1;S3:c=a-b;S4:w=c+1;<br><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="未命名文件"></p>
</li>
<li><p>为什么要引入进程，会产生什么影响？<br>为了使程序并发的执行，并且可以对并发执行的程序加以描述与控制；使程序可以并发执行</p>
</li>
<li><p>从动态性、并发性和独立性的角度比较进程和程序<br>动态性：进程的实质是进程实体的执行过程，具有生命周期。而程序是静态的一组有序指令集。<br>并发性：进程可以并发执行。程序没有建立PCB不能并发执行。<br>独立性：进程是一个能够独立运行的、独立获得资源的、独立接受调度的基本单位。未建立PCB的程序不能独立参与运行</p>
</li>
<li><p>PCB的作用？为什么说PCB是进程唯一标志<br>PCB是进程实体的一部分，PCB使一个程序成为能够独立运行的基本单位，PCB描述进程的基本情况和活动过程，进而控制和管理进程。操作系统是通过PCB来对进程进行控制和管理的。</p>
</li>
<li><p>进程的三个基本状态转化原因<br>有1就绪状态——执行状态：进程调度<br>执行状态——就绪状态：时间片完成<br>执行状态——阻塞状态：I/O请求<br>阻塞状态——就绪状态：I/O完成</p>
</li>
<li><p>为什么要引入挂起状态，有什么性质？<br>有终端用户需求、父进程请求、负荷调节的需要、操作系统的需要；挂起状态进程静止不能被调度</p>
</li>
<li><p>进程切换时要保存的处理器状态信息有哪些？<br>通用寄存器、指令寄存器、程序状态寄存器、用户栈指针</p>
</li>
<li><p>引起进程创建的主要事件<br>用户登录、作业调度、提供服务、应用请求</p>
</li>
<li><p>引起进程撤销的主要事件<br>正常结束、异常结束（越界错、保护错、非法指令、特权指令错、运行超时、等待超时、算数运算错、I/O故障）、外界干扰（操作员或操作系统干预、父进程请求、因父进程终止而终止）</p>
</li>
<li><p>创建进程时所要完成的主要工作<br>申请空白PCB、为新进程分配资源、初始化PCB、插入就绪队列</p>
</li>
<li><p>引起进程阻塞或被唤醒的主要事件<br>请求共享资源失败、等待某种操作、新数据尚未到达、等待新任务</p>
</li>
<li><p>从调度性、并发性、拥有资源及系统开销方面对比进程与线程<br>调度性：线程作为调度和分派的基本单位，而进程作为资源拥有的基本单位。<br>并发性：均可并发执行。<br>拥有资源：进程是拥有资源的基本单位，线程只拥有必不可少的资源，本身不拥有系统资源，但可以访问隶属资源。<br>系统开销：在创建、撤销和切换进程的开销显著大于线程。</p>
</li>
<li><p>解释用户级线程与内核支持线程<br>用户级线程：用户级线程仅存在于用户空间中。对于这种线程的创建、撤消、线程之间的同步与通信等功能，都无须内核来实现。<br>内核支持线程：内核支持线程，是在内核的支持下运行的，即无论是用户进程中的线程，还是系统进程中的线程，他们的创建、撤消和切换等，是依靠内核实现的。</p>
</li>
</ol>
<h1 id="处理机调度与死锁"><a href="#处理机调度与死锁" class="headerlink" title="处理机调度与死锁"></a>处理机调度与死锁</h1><h2 id="处理机调度的层次"><a href="#处理机调度的层次" class="headerlink" title="处理机调度的层次"></a>处理机调度的层次</h2><ul>
<li>高级调度 - 又称长程调度或作业调度，将外存作业调入内存，创建PCB等，插入就绪队列。用于批处理系统。调度最慢</li>
<li>低级调度 - 又称进程调度或短程调度，决定就绪队列中的那个进程应获得处理机，并将处理机分配给选中的进程。调度最频繁</li>
<li>中级调度 - 又称内存调度，把外存上那些已经具备运行条件的就绪进程重新载入内存。从静止就绪到活动就绪。</li>
</ul>
<h2 id="处理机调度算法的目标"><a href="#处理机调度算法的目标" class="headerlink" title="处理机调度算法的目标"></a>处理机调度算法的目标</h2><h3 id="共同目标："><a href="#共同目标：" class="headerlink" title="共同目标："></a>共同目标：</h3><ul>
<li>资源利用率：使系统处理器和资源尽可能忙碌</li>
<li>公平性：为进程合理分配CPU时间，不会发生饥饿</li>
<li>平衡性：为不同类型进程平衡分配资源</li>
<li>策略强制执行：如安全策略可无条件准确执行</li>
</ul>
<h3 id="批处理系统的目标"><a href="#批处理系统的目标" class="headerlink" title="批处理系统的目标"></a>批处理系统的目标</h3><ul>
<li>平均周转时间短</li>
<li>系统吞吐量高：尽量多地选择短作业运行</li>
<li>处理机利用率高：尽量选择计算量大的作业</li>
</ul>
<h3 id="分时系统的目标"><a href="#分时系统的目标" class="headerlink" title="分时系统的目标"></a>分时系统的目标</h3><ul>
<li>响应时间快</li>
<li>均衡性：指系统响应时间的长短应与用户所请求服务的复杂性相适应。</li>
</ul>
<h3 id="实时系统的目标"><a href="#实时系统的目标" class="headerlink" title="实时系统的目标"></a>实时系统的目标</h3><ul>
<li>截至时间的保证：开始截止时间 完成截止时间 硬实时、软实时</li>
<li>可以预测性：对调度结果的可预见性</li>
</ul>
<h2 id="作业与作业调度"><a href="#作业与作业调度" class="headerlink" title="作业与作业调度"></a>作业与作业调度</h2><ul>
<li>作业 Job：用户提交给系统的一项相对独立的工作。程序+数据+作业说明书</li>
<li>作业步：在作业运行期间，每个作业都必须经过若干个相对独立，又相互关联的顺序加工步骤才能得到结果，每一个加工步骤称为一个作业步，各作业步之间存在着相互联系。</li>
<li>作业流：依次执行的作业步，作业步间非并行的。</li>
</ul>
<h3 id="作业控制块-JCB"><a href="#作业控制块-JCB" class="headerlink" title="作业控制块(JCB)"></a>作业控制块(JCB)</h3><p>作业在系统中存在的标志，保存了系统对作业进行管理和调度的全部信息。<br>通常包含：</p>
<ul>
<li>作业标识</li>
<li>用户名称</li>
<li>用户账号</li>
<li>作业类型(CPU 繁忙型、I/O 繁忙型、批量型、终端型)</li>
<li>作业状态</li>
<li>调度信息(CPU 繁忙型、I/O 繁忙型、批量型、终端型)</li>
<li>资源需求(预计运行时间、要求内存大小、要求 I/O 设备的类型和数量等)</li>
<li>资源使用情况等</li>
</ul>
<h3 id="作业运行的三个阶段和三种状态"><a href="#作业运行的三个阶段和三种状态" class="headerlink" title="作业运行的三个阶段和三种状态"></a>作业运行的三个阶段和三种状态</h3><p>收容阶段：后备状态<br>运行阶段：运行状态<br>完成阶段：完成状态</p>
<h3 id="作业调度的主要任务"><a href="#作业调度的主要任务" class="headerlink" title="作业调度的主要任务"></a>作业调度的主要任务</h3><ul>
<li>接纳多少个作业：太多会影响系统服务质量，如延长周转时间；太少会导致资源利用率和系统吞吐量太低</li>
<li>接纳哪些作业：将哪些作业从外存调入内存，取决于所采用的调度算法</li>
</ul>
<h3 id="先来先服务-FCFS-和短作业优先-SJF-调度算法"><a href="#先来先服务-FCFS-和短作业优先-SJF-调度算法" class="headerlink" title="先来先服务(FCFS)和短作业优先(SJF )调度算法"></a>先来先服务(FCFS)和短作业优先(SJF )调度算法</h3><p>在作业调度中是从后备队列调入内存运行。<br>在进程调度中则是从就绪队列中选出估计运行时间最短的进程分配处理机使它立即执行并一直执行到完成，或发生某事件而被阻塞放弃处理机时，再重新调度。</p>
<h4 id="先来先服务："><a href="#先来先服务：" class="headerlink" title="先来先服务："></a>先来先服务：</h4><p>既可用于作业调度，也可用于进程调度。有利于长作业（进程），而不利于短作业（进程）。</p>
<h4 id="短作业-进程-优先调度算法SJ-P-F："><a href="#短作业-进程-优先调度算法SJ-P-F：" class="headerlink" title="短作业(进程)优先调度算法SJ(P)F："></a>短作业(进程)优先调度算法SJ(P)F：</h4><p>是指对短作业或短进程优先调度的算法。它们可以分别用于作业调度和进程调度。<br>对长作业不利，不能保证紧迫性作业(进程)会被及时处理，根据用户所提供的估计执行时间而定不准确。</p>
<h3 id="优先级调度算法和高响应比优先调度算法"><a href="#优先级调度算法和高响应比优先调度算法" class="headerlink" title="优先级调度算法和高响应比优先调度算法"></a>优先级调度算法和高响应比优先调度算法</h3><p>优先级调度算法：<br>外部赋予作业（进程）相应的优先级，例如以作业的紧迫程度作为优先级。<br>选择优先级高的进程投入运行。既可用于作业调度算法，也可用于进程调度。</p>
<p>高响应比优先调度算法：<br>赋予作业动态优先级，优先级随作业等待时间延长而增加，从而使长作业的优先级在等待期间不断增加。<br>响应比Rp：<br><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1647848472429.png" alt="enter description here"><br>算法既照顾了短作业，又考虑了作业到达的先后次序，不会使长作业长期得不到服务</p>
<h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><h3 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h3><ul>
<li>保存处理机的现场信息</li>
<li>按某种算法选取进程</li>
<li>把处理机分配给进程<strong>strong text</strong></li>
</ul>
<h3 id="进程调度机制"><a href="#进程调度机制" class="headerlink" title="进程调度机制"></a>进程调度机制</h3><p><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1647853007722.png" alt="enter description here"></p>
<h3 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h3><h4 id="非抢占方式："><a href="#非抢占方式：" class="headerlink" title="非抢占方式："></a>非抢占方式：</h4><p>一旦进程投入运行，除了进程完成或者需要阻塞外，不能剥夺其处理机。<br>采用这种方式时，引起调度的原因可归结为： </p>
<ul>
<li>进程运行完毕或因发生某事件而无法继续运行</li>
<li>因I/O请求而阻塞</li>
<li>因通信或者同步而阻塞</li>
</ul>
<h4 id="抢占方式："><a href="#抢占方式：" class="headerlink" title="抢占方式："></a>抢占方式：</h4><p>允许根据某种原则，暂停正在执行的进程，重新分配处理机。<br>使用抢占式的原因： </p>
<ul>
<li>批处理：防止长进程长期占用CPU，公平</li>
<li>分时：人机交互</li>
<li>实时：紧迫任务的执行<br>主要原则</li>
<li>优先权</li>
<li>短进程优先</li>
<li>时间片原则</li>
</ul>
<h3 id="轮转调度算法-RR"><a href="#轮转调度算法-RR" class="headerlink" title="轮转调度算法(RR)"></a>轮转调度算法(RR)</h3><p>基于时间片轮转<br>原理： FCFS策略+时钟中断+时间片原则<br>时间片太小：利于短作业，但增大调度和上下文切换频率，增大系统开销； 时间片太长：退化为FCFS算法。 时间片合适：略大于一次典型的交互所需的时间，使大多数交互式进程能在一个时间片内完成。<br>当进程的时间片耗尽或运行完毕，系统将CPU分配给队首进程（或新到达紧迫进程）</p>
<h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><p>同样分为非抢占式和抢占式<br>对于优先级是的设立还分为静态优先权（简单，但低优先权作业可能长期不被调度）和动态优先权（长短兼顾 缺点：需计算 Rp=(等待时间＋服务时间)/服务时间 ）</p>
<h3 id="多队列调度算法"><a href="#多队列调度算法" class="headerlink" title="多队列调度算法"></a>多队列调度算法</h3><p>针对：不同用户的调度策略需求:实时/分时/批处理混合系统<br>和多CPU单就绪队列的问题:互斥访问导致效率不高<br>解决办法:<br>不同类型或者性质的进程组织在不同的队列中<br>每个CPU和一个队列，分配优化，CPU间队列均衡</p>
<h3 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h3><p>设置多个就绪队列，并为各个队列赋予不同的优先级。<br>优先级愈高的队列的进程的执行时间片就愈小。<br>新进程首先进入最高优先级的队列。每个队列采用FCFS算法。<strong>队列中的进程运行一个时间片后未结束则降级排到下一个队列的末尾</strong>。最低优先权队列中的进程则按RR方式运行。<br>按队列优先级调度。只有比队列的优先级高的队列均空时，才运行该队列中的进程。<br>特点：长、短作业兼顾，有较好的响应时间</p>
<h3 id="基于公平原则的调度算法"><a href="#基于公平原则的调度算法" class="headerlink" title="基于公平原则的调度算法"></a>基于公平原则的调度算法</h3><ol>
<li>保证调度算法 - 保证的是绝对运行时间，即启动后在某个时间段内必须获得多少运行时间。 例如N个进程平均分配时间。</li>
<li>公平分享调度算法 - 按照用户数量平均分配时间，而不是进程间平均分配。</li>
</ol>
<h2 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h2><p>实时调度必须满足实时任务对截至时间的要求</p>
<h3 id="实现实时调度的基本条件"><a href="#实现实时调度的基本条件" class="headerlink" title="实现实时调度的基本条件"></a>实现实时调度的基本条件</h3><ul>
<li>就绪时间</li>
<li>开始截止时间和完成截止时间</li>
<li>处理时间</li>
<li>资源要求</li>
<li>优先级</li>
</ul>
<p>单处理机条件下必须保证处理时间与截至时间之比小于1</p>
<h3 id="实时调度算法的分类"><a href="#实时调度算法的分类" class="headerlink" title="实时调度算法的分类"></a>实时调度算法的分类</h3><h4 id="非抢占式"><a href="#非抢占式" class="headerlink" title="非抢占式"></a>非抢占式</h4><p><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1647855224272.png" alt="enter description here"></p>
<ol>
<li>非抢占式轮转调度</li>
<li>非抢占式优先调度</li>
</ol>
<h4 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h4><ol>
<li>基于时钟中断的抢占式</li>
<li>立即抢占式</li>
</ol>
<h3 id="EDF最早截至时间算法"><a href="#EDF最早截至时间算法" class="headerlink" title="EDF最早截至时间算法"></a>EDF最早截至时间算法</h3><p>就绪队列按各任务截止时间的早晚排序；具有最早截止时间的任务排在队列的最前面。</p>
<h3 id="LLF最低松弛度优先算法"><a href="#LLF最低松弛度优先算法" class="headerlink" title="LLF最低松弛度优先算法"></a>LLF最低松弛度优先算法</h3><p>松弛度=完成截至时间–剩余运行时间–当前时间<br>按松弛度排序实时任务的就绪队列，松弛度值最小的任务排在队列最前面</p>
<h3 id="优先级倒置"><a href="#优先级倒置" class="headerlink" title="优先级倒置"></a>优先级倒置</h3><p>即高优先级进程(或线程)被低优先级进程(或线程)延迟或阻塞。<br>主要原因可能是较低优先级任务占用临界资源后未释放而切换任务执行<br>解决方法：</p>
<ul>
<li>规定进入临界区后不允许抢占</li>
<li>优先级继承机制(动态优先级)，即占用同样资源的低优先级进程继承需要资源的进程的高优先级</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="资源问题"><a href="#资源问题" class="headerlink" title="资源问题"></a>资源问题</h3><ul>
<li>可重用性资源(打印机)和消耗性资源(消息)</li>
<li>不可抢占性资源(打印机)</li>
</ul>
<h3 id="计算机系统的死锁"><a href="#计算机系统的死锁" class="headerlink" title="计算机系统的死锁"></a>计算机系统的死锁</h3><p>原因：</p>
<ol>
<li>竞争可重用资源、可消耗资源</li>
<li>进程间推进顺序非法。<br><img src="/2022/03/04/%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F(1-3)/1647855855262.png" alt="enter description here"></li>
</ol>
<h3 id="定义、必要条件和处理方法"><a href="#定义、必要条件和处理方法" class="headerlink" title="定义、必要条件和处理方法"></a>定义、必要条件和处理方法</h3><p>定义：如果一组进程中的每一个进程<strong>都在等待仅由该组进程中的其他进程才能引发的事件</strong>，那么该组进程是死锁的</p>
<p>四个条件：</p>
<ol>
<li>互斥条件：指进程对所分配到的资源进行排它性使用 。</li>
<li>请求和保持条件：指进程已经保持了至少一个资源，但又提出了新的资源请求 。</li>
<li>不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</li>
<li>环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链 。</li>
</ol>
<h4 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h4><p>通过<strong>设置某些限制条件</strong>，去破坏产生死锁的四个必要条件中的一个或几个条件，来预防发生死锁。<br>预防死锁使四个必要条件中的第2、3、4条件之一不能成立</p>
<h5 id="破环条件2"><a href="#破环条件2" class="headerlink" title="破环条件2"></a>破环条件2</h5><p>通过：</p>
<ul>
<li>第一种协议<strong>规定开始运行之前，必须一次性申请所需的全部资源</strong></li>
<li>第二种协议规定进程在运行过程中要逐步释放已用资源再请求新资源</li>
<li>*优点**：简单、易于实现且很安全。</li>
<li>*缺点**：资源被严重浪费，使进程延迟运行。</li>
</ul>
<h5 id="破环条件3"><a href="#破环条件3" class="headerlink" title="破环条件3"></a>破环条件3</h5><p>当一个已经保持了某些资源的进程，再提出新的资源请求而<strong>不能立即得到满足</strong>时，必须释放它已经保持了的所有资源。待以后需要时再重新申请<br><strong>缺点</strong>：因反复地申请和释放资源，致使进程执行被无限推迟，延长进程周转时间、增加系统开销、降低吞吐量</p>
<h5 id="破环条件4"><a href="#破环条件4" class="headerlink" title="破环条件4"></a>破环条件4</h5><p>将所有资源按类型进行线性排队，并赋予不同的序号。 所有进程对资源的请求必须严格按照资源序号递增的次序提出<br><strong>优点</strong>：相比前两种提高了资源利用率和系统吞吐量<br><strong>缺点</strong>：各类资源分配的序号必须相对稳定限制了新设备类型的增加；作业使用顺序与系统规定顺序不同造成资源浪费；增加了程序设计难度。</p>
<h4 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h4><p>是在资源的动态分配过程中，用某种方法去防止系统进入不安全状态，从而避免发生死锁。<strong>不会事先设置限制</strong><br>安全状态是指系统能按某种进程顺序，使每个进程都可顺利地完成，称系统处于安全状态。</p>
<h5 id="Dijkstra银行家算法"><a href="#Dijkstra银行家算法" class="headerlink" title="Dijkstra银行家算法"></a>Dijkstra银行家算法</h5><p>可利用资源向量Available<br>最大需求矩阵Max<br>分配矩阵Allocation<br>需求矩阵Need<br>P120</p>
<h4 id="死锁的检测与解除"><a href="#死锁的检测与解除" class="headerlink" title="死锁的检测与解除"></a>死锁的检测与解除</h4><p>检测死锁：通过系统所设置的<strong>检测机构</strong>，及时地检测出死锁的发生，并精确地确定与死锁有关的进程和资源；<br>解除死锁：当<strong>检测</strong>到系统中<strong>已</strong>发生死锁时，须将进程从死锁状态中<strong>解脱出来</strong>。常用的实施方法是撤消或挂起一些进程。<br><strong>配套使用</strong></p>
<h5 id="检测："><a href="#检测：" class="headerlink" title="检测："></a>检测：</h5><p>系统必须保存有关资源的请求和分配信息，根据信息通过<strong>资源分配图</strong>或<strong>死锁定理</strong>的方法检测死锁</p>
<h5 id="解除："><a href="#解除：" class="headerlink" title="解除："></a>解除：</h5><p>两种常用方法：抢占资源(使死锁进程抢占其它进程资源以完成进程解除死锁)、终止进程(终止或撤销死锁进程)<br>其中终止方法可终止所有死锁进程，更好是按付出代价最小算法逐个解除</p>
<h6 id="付出代价最小算法"><a href="#付出代价最小算法" class="headerlink" title="付出代价最小算法"></a>付出代价最小算法</h6><ul>
<li><p>一种找到付出代价最小的终止顺序，但成本高的算法：</p>
<ol>
<li> 先从死锁进程组中取出一个，形成第一层终止，若有n个死锁进程，则有n个第一层。</li>
<li> 再从n个第一层中取一个，形成第二层终止，每个第一层又有n-1个第二层终止。</li>
<li> 如此循环，直到解除死锁，将各层的总代价计算，得到最小的终止顺序。<br>理解为从最低代价开始依次找到导致死锁的最低代价进程</li>
</ol>
</li>
<li><p>另一种比较有效的算法：</p>
<ol>
<li> 找到死锁进程组中，终止代价最小的，将其从死锁进程组中删去。</li>
<li> 再从新的死锁进程组中，找到终止代价最小的，删去。</li>
<li> 如此循环，直到解除死锁。<br>理解为一直解除最低代价进程(不判断此时死锁是否由它导致)直到解除死锁</li>
</ol>
</li>
</ul>
<h2 id="习题-2"><a href="#习题-2" class="headerlink" title="习题"></a>习题</h2><p>1、假设一个多级反馈队列的实现共有4级，各个队列的时间片长度是1、2、4、6秒，已知当前仅在第一级队列上有一个执行时长为10秒的进程O，在两秒后将有一个执行时长为8秒的任务A到达，请算出任务A的周转时间。<br>1:10-1=9O<br>2<br>4<br>6</p>
<p>1<br>2:9-1=8O<br>4<br>6<br>任务A到达<br>1:8-1=7A<br>2:<br>4:8O<br>6</p>
<p>1:<br>2:7A<br>4:8O-4=4O<br>6</p>
<p>1:<br>2:7A-2=5A<br>4:<br>6:4O</p>
<p>1:<br>2:<br>4:5A<br>6:4O-4=0O完成</p>
<p>1:<br>2:<br>4:5A-4=1A<br>6:</p>
<p>1:<br>2:<br>4:<br>6:1A-1=0A完成</p>
<p>所以答案等于1+4+2+4+4+1=16s</p>
<p>2、简述死锁的必要条件，以及预防死锁方法与必要条件的关系。<br>四个条件：</p>
<ol>
<li>互斥条件：指进程对所分配到的资源进行排它性使用 。</li>
<li>请求和保持条件：指进程已经保持了至少一个资源，但又提出了新的资源请求 。</li>
<li>不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</li>
<li>环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链</li>
</ol>
<p>预防死锁通过设置某些限制条件，去破坏产生死锁的四个必要条件中的一个或几个条件，来预防发生死锁。预防死锁使四个必要条件中的第2、3、4条件之一不能成立：</p>
<p>破环条件2通过：第一种协议规定开始运行之前，必须一次性申请所需的全部资源<br> 第二种协议规定进程在运行过程中要逐步释放已用资源再请求新资源；</p>
<p>破环条件3当一个已经保持了某些资源的进程，再提出新的资源请求而不能立即得到满足时，必须释放它已经保持了的所有资源。待以后需要时再重新申请；</p>
<p>破环条件4将所有资源按类型进行线性排队，并赋予不同的序号。 所有进程对资源的请求必须严格按照资源序号递增的次序提出。</p>
<p>3、在银行家算法中，若出现下述资源分配情况，试问：<br>| Process | Allocation | Need__  | Available |<br>|—|—|—|—|<br>| P0 | 0 0 3 2 | 0 0 1 2 | 1 6 2 2 |<br>| P1 | 1 0 0 0 | 1 7 5 0 |<br>| P2 | 1 3 5 4 | 2 3 5 6 |<br>| P3 | 0 3 3 2 | 0 6 5 2 |<br>| P4 | 0 0 1 4 | 0 6 5 6 |</p>
<p>（1）该状态是否安全？<br>安全，先执行P0后按P3、P4、P1、P2顺序即可完成全部进程<br>（2）若进程 P2 提出请求 Request（1，2，2，2）后，系统能否将资源分配<br>给它？<br>能，可按P2、P0、P3、P4、P1执行完成</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
